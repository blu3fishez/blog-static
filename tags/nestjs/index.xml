<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Nestjs on blog.blu3fishez</title>
    <link>https://blog.blu3fishez.org/tags/nestjs/</link>
    <description>Recent content in Nestjs on blog.blu3fishez</description>
    <image>
      <title>blog.blu3fishez</title>
      <url>https://blog.blu3fishez.org/images/papermod-cover.png</url>
      <link>https://blog.blu3fishez.org/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.151.0</generator>
    <language>en</language>
    <copyright>blu3fishez</copyright>
    <lastBuildDate>Sat, 21 Dec 2024 12:36:32 +0900</lastBuildDate>
    <atom:link href="https://blog.blu3fishez.org/tags/nestjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Custom Passport 로 Github OAuth 로직을 직접 구현하기</title>
      <link>https://blog.blu3fishez.org/posts/2024/2024-12-21-custom-passport-%EB%A1%9C-github-oauth-%EB%A1%9C%EC%A7%81%EC%9D%84-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 21 Dec 2024 12:36:32 +0900</pubDate>
      <guid>https://blog.blu3fishez.org/posts/2024/2024-12-21-custom-passport-%EB%A1%9C-github-oauth-%EB%A1%9C%EC%A7%81%EC%9D%84-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</guid>
      <description>&lt;h2 id=&#34;개요&#34;&gt;개요&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;OAuth&lt;/code&gt; 가 조금 어렵다고 해서 솔직히 하루 걸릴 줄 알았습니다. 하지만 차근차근 진행해보니 수월하게 진행할 수 있었는데, 그 과정을 개발일지로 남겨주는게 좋을 것 같아 미리 남겨봅니다.&lt;/p&gt;
&lt;p&gt;실제로 OAuth 를 예제로 만들어보는 &lt;code&gt;블로그 글&lt;/code&gt; 들이 상당 수 존재하였으며, 이것들을 바탕으로 단순히 따라가기만 하면 될 것 같았습니다. 하지만 그 과정에서 이해되지 않는 부분이 존재하였고, 이 부분에서 트러블 슈팅이 조금 있었습니다.&lt;/p&gt;
&lt;p&gt;제가 &lt;code&gt;어떻게 OAuth를 하는지 알려주어야 앞으로 OAuth 관련 기능 구현에 있어서 도움이 될 수 있을 것이라 판단하였기에 문서로 기록하고자 합니다.&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nest.js Modules 를 통해 배우는 의존성 주입</title>
      <link>https://blog.blu3fishez.org/posts/2024/2024-10-25-nestjs-modules-%EB%A5%BC-%ED%86%B5%ED%95%B4-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85/</link>
      <pubDate>Fri, 25 Oct 2024 12:10:38 +0900</pubDate>
      <guid>https://blog.blu3fishez.org/posts/2024/2024-10-25-nestjs-modules-%EB%A5%BC-%ED%86%B5%ED%95%B4-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;[!important]&lt;/p&gt;
&lt;p&gt;제가 몰랐던 백엔드 지식 위주로 이야기 합니다.
Express, MVC 패턴에 관해 공부하고 오셔야 이해할 수 있습니다.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Express 를 배우고, 보다 좀 더 정형화된 형식이 필요함을 느꼈다.&lt;/p&gt;
&lt;p&gt;코드를 보다 견고하게 짜는 것에 대한 욕심이 생겼고, 에러 처리 등 다양한 예외 처리 로직들을 수행해보면서, 코드의 안정성이 중요하다는 걸 느꼈다.&lt;/p&gt;
&lt;p&gt;그래서 이번에 Nest.js 를 배우기 시작했는데, &lt;code&gt;Controller&lt;/code&gt; &lt;code&gt;Service&lt;/code&gt; 등등.. 유명한 계층은 내가 아는 일들을 그대로 수행하고 있어서 배우는데 문제가 없었다.&lt;/p&gt;
&lt;p&gt;그런데, 왜 &lt;code&gt;@Module&lt;/code&gt; 데코레이터라는 계층이 있는 걸까? 궁금해져서 조금 알아보았다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Nest.js] Nest.js 에서의 DTO</title>
      <link>https://blog.blu3fishez.org/posts/2024/2024-10-23-nestjs-nestjs-%EC%97%90%EC%84%9C%EC%9D%98-dto/</link>
      <pubDate>Wed, 23 Oct 2024 18:46:23 +0900</pubDate>
      <guid>https://blog.blu3fishez.org/posts/2024/2024-10-23-nestjs-nestjs-%EC%97%90%EC%84%9C%EC%9D%98-dto/</guid>
      <description>&lt;h2 id=&#34;dto-란&#34;&gt;DTO 란?&lt;/h2&gt;
&lt;p&gt;이전에 계층 간 데이터 교환을 위한 객체라고 배웠다.&lt;/p&gt;
&lt;p&gt;여기에 더 나아가서, &lt;code&gt;DTO&lt;/code&gt;란, &lt;code&gt;네트워크&lt;/code&gt; 를 통해 전송되는 방법 또한 정의할 수 있다.&lt;/p&gt;
&lt;p&gt;말 그대로 데이터 전송 객체이다.&lt;/p&gt;
&lt;h3 id=&#34;nestjs-에서의-dto&#34;&gt;Nest.js 에서의 DTO&lt;/h3&gt;
&lt;p&gt;Nest.js 에서는 &lt;code&gt;Class&lt;/code&gt; 를 이용하여 정의하는 것을 추천하고 있으며, &lt;code&gt;interface&lt;/code&gt; 로도 가능하다.&lt;/p&gt;
&lt;p&gt;그 이유는 &lt;code&gt;class&lt;/code&gt; 는 &lt;code&gt;interface&lt;/code&gt; 와 달리, 런타임 내에 정의 되어 있기 때문에 &lt;code&gt;pipe&lt;/code&gt; 등의 기능도 활용 가능하다고 한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이는 &lt;strong&gt;반대로 얘기하면, 굳이 상태를 보존할 이유가 없다면 인터페이스를 쓰는게 낫다는 뜻으로도 해석할 수 있겠다.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
