[{"content":"2025학년도 1학기를 보내면서 글을 쓸 기회가 많이 없어졌었습니다. 사실 자잘하게 글을 쓰고 문서를 하는 일은 많이 했으나, 실제로 완벽한 블로그 글을 작성해야한다. 라는 머릿속의 집착 때문에 글을 쓰는 것이 두려워 진것도 사실입니다.\n더군다나 불편한 점도 많이 느끼고 있었는데, 이에 블로그 작성 방법을 개선해서 프로젝트(끝이 나는 작업)이 끝나게 되면 자연스럽게 블로그 글도 쓸 수 있도록 환경을 조성하려고 하였고, 그러다보니 블로그 구조를 개선하게 되었습니다.\n블로그 개선 이유 1. 블로그 빌드 속도 개선 Ruby 언어로 만들어진 지킬은 Go 언어로 만들어졌습니다. 그러다보니 Ruby 를 위한 의존성 설치와 세팅 시간이 많이 잡아먹게 되고, 최종적으로 빌드 시 1분이 걸리는 불상사가 일어납니다.\n그래서 문제를 해결하기 위해 검색하던 중, 검색 결과 node_modules 의 문제가 있었음을 알았습니다.\n실제로 제 블로그 github workflow 로그를 확인하면, 루비 세팅 시간이 많이 걸리는 것을 확인할 수 있었습니다.\n![[새로운 블로그 리뉴얼을 환영해주세요!-1756027776764.webp]]\n문제는 이 결과가 사실은 루비 빌드 시 node_modules 를 포함한 여러 디렉토리를 제외한 값이라는 것입니다…\n실제로 로컬환경에서 루비를 세팅하고 버전 관리하는 것부터 너무나도 복잡했습니다.\n![[새로운 블로그 리뉴얼을 환영해주세요!-1756027851593.webp]]\n실제로 제 블로그 프로젝트에서 빌드 시 exclude 할 폴더에 노드 모듈이 포함되어 있습니다.\nGo 에 관심이 많기도 했고, 후술할 이유로 조금 더 개선을 위해 다른 테마를 찾으려고 했습니다.\n2. 블로그 디자인 단순화 이유라기 보다는 변경점에 가깝습니다.\n사실 양쪽에 프로필 / ToC / 최근 업데이트 문서 등 불필요한 정보가 너무나도 많다고 생각이 들었습니다.\n이번에 블로그를 개선하면서 오로지 문서에 집중해보고 싶었습니다. 그리고 배경은 이쁘다고 생각해서 넣었는데 오히려 불호에 가까운 피드백을 받았습니다.. 계속 보니 가독성 자체에는 좋지 않다고 보이더라고요.\n이전 블로그의 디자인을 그대로 가져오기 위해 시간 투자를 하기에는 아깝다고 생각이 들어 어쩔 수 없지만 간단하게 디자인을 변경하였습니다.\n![[새로운 블로그 리뉴얼을 환영해주세요!-1756026623283.webp]]\n이전 디자인은 이랬는데, 조금 어두운 면도 있고, 글자 색상도 어두워서 가독성이 떨어진다고 생각하였고, 이런 부분을 개선했습니다.\n무엇보다 가독성에 집중하도록 노력했습니다.\n다른 테마를 사용하면 어떨지 모르겠는데, 이미 chirpy 테마에 고착화되어서 새롭게 블로그를 리뉴얼 해보는 것도 나쁘지 않다고 판단했습니다.\n또한, 가독성에 집중하기 위해 word-break: keep-all; 옵션을 넣어주었습니다.\n띄어쓰기가 있는 한글 특성상 단어를 잘라서 줄바꿈을 하지 않고, 단어 단위로 줄바꿈을 해주는 keep-all 특성이 좋다고 판단하여 적용해보았습니다.\n.post-single p { word-break: keep-all; } 3. 옵시디언 통합 이전까지는 옵시디언 볼트(프로젝트)를 블로그용, 나누고 있었습니다. 그렇기 때문에 더더욱 블로그 글을 안쓴 것도 있는 것 같습니다.\n문서화 와 블로그 글 작성 사이에서 조금 괴리감을 느끼고 있었던 것도 있었습니다. 더더욱 블로그 글은 완벽하게 써야한다고 생각하게 돼서 잘 안쓰게 됐고, 더욱이나 접근성도 안좋아지니 블로그 작성 자체에 눈을 들이게 되는 일이 많이 줄었습니다.\n![[새로운 블로그 리뉴얼을 환영해주세요!-1756026537606.webp|200]]\n그래서 보시는 것처럼 실제로 PARA 노트 기법으로 작성중인 제 옵시디언 볼트 입니다. 이 부분에 리소스(혹은 아카이브) 부분에 블로그 탭을 추가하여 버전관리를 하기로 했습니다.\n그렇다면 이제 문제가 생깁니다.\n버전관리는 어떻게 할 것인가?\n실제로 제 볼트 내에서는 깃허브로 공유해서는 안되는 중요자료들이 많습니다.\n이 부분에 있어서 고민이 많이 되었는데, 결국 블로그 .git 프로젝트 자체를 icloud 내에 전부 넣었습니다. (…)\nicloud 자체가 기본이 5GB라서 프로젝트 하나를 넣어두기엔 충분하다고 생각하고, 최근에 볼트에서 webp 포맷으로 변경하여 이미지 크기를 최적화했기 때문에.. 상관없다고 판단했다.\nmodule: mounts: - source: content target: content - source: \u0026#34;../99. Images\u0026#34; target: \u0026#34;assets\u0026#34; - source: \u0026#34;../03. Resources/BlogPosts\u0026#34; target: \u0026#34;content/posts\u0026#34; 그리고 실제로 내가 쓰는 옵시디언 볼트에서는 03. Resources 폴더에 자주 보는 자료들은 이곳에 넣는다.\n블로그로 공개할 문서들은 BlogPosts 에 넣고 CLI에서 커밋을 날리면 자연스럽게 블로그 포스트도 가능하도록 만들어주었다!\n옵시디언 이미지 문법 인식을 위한 hugo 플러그인 생성 이전에 chirpy 테마로 넘어오면서 대부분의 프론트매터는 수정해주었지만, 이번엔 그럴필요 없도록 했다.\n무언가 마이그레이션한다면 기존 리소스는 최대한 수정할 일이 없어야한다고 생각하기 때문에 최대한 노력해보았다.\n이번에도 그래서 최대한 프론트매터를 호환되게 만들었고, 특히 이미지처리할 때 별도의 플러그인을 휴고 문법에 맞게 만들었다. (이부분은 내가 문법을 몰라서 제미니한테 물어보면서 코드를 짰다.)\n혹시 필요할 일이 있을까봐 코드를 공유한다.\n이 코드는 layouts/_default/_markup/render-image.html 파일인데, assets 폴더에서 이미지 파일을 찾아오는 플러그인이다.\n{{- $alt := .Text -}} {{- $destination := .Destination -}} {{- $isExternal := strings.HasPrefix $destination \u0026#34;http\u0026#34; -}} {{- if not $isExternal -}} {{/* target이 \u0026#34;assets\u0026#34;이므로 바로 파일명을 찾습니다. */}} {{- $image := resources.Get (strings.TrimPrefix \u0026#34;/\u0026#34; $destination) -}} {{- if $image -}} \u0026lt;img src=\u0026#34;{{ $image.RelPermalink }}\u0026#34; alt=\u0026#34;{{ $alt }}\u0026#34; loading=\u0026#34;lazy\u0026#34;\u0026gt; {{- else -}} \u0026lt;p style=\u0026#34;color: red;\u0026#34;\u0026gt;Asset not found: {{ $destination }}\u0026lt;/p\u0026gt; {{- end -}} {{- else -}} \u0026lt;img src=\u0026#34;{{ $destination | safeURL }}\u0026#34; alt=\u0026#34;{{ $alt }}\u0026#34; loading=\u0026#34;lazy\u0026#34;\u0026gt; {{- end -}} 두번째로 layouts/_default/single.html 이다. 포스트 페이지를 구성하는 코드인데, PaperMod 라는 테마를 사용하면서 그대로 긁어와서 Content 부분만 수정해주었다.\n![[]] 같은 위키링크 형태로 옵시디언에서는 이미지를 링킹을 하는데, 공식 마크다운 이미지 문법인 ![]() 을 쓰지 않은 이유로는 이미 만들어진 문서들이 대부분 위키링크 형태이기 때문이다.\n{{- define \u0026#34;main\u0026#34; }} \u0026lt;article class=\u0026#34;post-single\u0026#34;\u0026gt; \u0026lt;header class=\u0026#34;post-header\u0026#34;\u0026gt; {{ partial \u0026#34;breadcrumbs.html\u0026#34; . }} \u0026lt;h1 class=\u0026#34;post-title entry-hint-parent\u0026#34;\u0026gt; {{ .Title }} {{- if .Draft }} \u0026lt;span class=\u0026#34;entry-hint\u0026#34; title=\u0026#34;Draft\u0026#34;\u0026gt; \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; height=\u0026#34;35\u0026#34; viewBox=\u0026#34;0 -960 960 960\u0026#34; fill=\u0026#34;currentColor\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M160-410v-60h300v60H160Zm0-165v-60h470v60H160Zm0-165v-60h470v60H160Zm360 580v-123l221-220q9-9 20-13t22-4q12 0 23 4.5t20 13.5l37 37q9 9 13 20t4 22q0 11-4.5 22.5T862.09-380L643-160H520Zm300-263-37-37 37 37ZM580-220h38l121-122-18-19-19-18-122 121v38Zm141-141-19-18 37 37-18-19Z\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/span\u0026gt; {{- end }} \u0026lt;/h1\u0026gt; {{- if .Description }} \u0026lt;div class=\u0026#34;post-description\u0026#34;\u0026gt; {{ .Description }} \u0026lt;/div\u0026gt; {{- end }} {{- if not (.Param \u0026#34;hideMeta\u0026#34;) }} \u0026lt;div class=\u0026#34;post-meta\u0026#34;\u0026gt; {{- partial \u0026#34;post_meta.html\u0026#34; . -}} {{- partial \u0026#34;translation_list.html\u0026#34; . -}} {{- partial \u0026#34;edit_post.html\u0026#34; . -}} {{- partial \u0026#34;post_canonical.html\u0026#34; . -}} \u0026lt;/div\u0026gt; {{- end }} \u0026lt;/header\u0026gt; {{- $isHidden := (.Param \u0026#34;cover.hiddenInSingle\u0026#34;) | default (.Param \u0026#34;cover.hidden\u0026#34;) | default false }} {{- partial \u0026#34;cover.html\u0026#34; (dict \u0026#34;cxt\u0026#34; . \u0026#34;IsSingle\u0026#34; true \u0026#34;isHidden\u0026#34; $isHidden) }} {{- if (.Param \u0026#34;ShowToc\u0026#34;) }} {{- partial \u0026#34;toc.html\u0026#34; . }} {{- end }} {{- if .Content }} {{- $content := .RawContent -}} {{- $find := \u0026#34;!\\\\[\\\\[(.*?)\\\\]\\\\]\u0026#34; -}} {{- $matches := findRE $find $content -}} {{- range $matches -}} {{- $originalMatch := . -}} {{- $pathAndWidth := replaceRE $find \u0026#34;$1\u0026#34; $originalMatch -}} {{- $path := $pathAndWidth -}} {{- $width := \u0026#34;\u0026#34; -}} {{- if strings.Contains $pathAndWidth \u0026#34;|\u0026#34; -}} {{- $parts := split $pathAndWidth \u0026#34;|\u0026#34; -}} {{- $path = index $parts 0 -}} {{- $width = index $parts 1 -}} {{- end -}} {{- $image := resources.Get $path -}} {{- if $image -}} {{- $imgTag := printf \u0026#34;\u0026lt;img src=\\\u0026#34;%s\\\u0026#34; alt=\\\u0026#34;%s\\\u0026#34; loading=\\\u0026#34;lazy\\\u0026#34;\u0026#34; $image.RelPermalink (strings.TrimSuffix \u0026#34;.webp\u0026#34; (strings.TrimSuffix \u0026#34;.png\u0026#34; (strings.TrimSuffix \u0026#34;.jpg\u0026#34; $path))) -}} {{- if $width -}} {{- $imgTag = printf \u0026#34;%s style=\\\u0026#34;width: %spx;\\\u0026#34;\u0026gt;\u0026#34; $imgTag $width -}} {{- else -}} {{- $imgTag = printf \u0026#34;%s\u0026gt;\u0026#34; $imgTag -}} {{- end -}} {{- $content = replace $content $originalMatch $imgTag -}} {{- end -}} {{- end -}} {{- $finalContent := $content | .RenderString -}} \u0026lt;div class=\u0026#34;post-content\u0026#34;\u0026gt; {{- if not (.Param \u0026#34;disableAnchoredHeadings\u0026#34;) }} {{- partial \u0026#34;anchored_headings.html\u0026#34; $finalContent -}} {{- else }} {{- $finalContent | safeHTML -}} {{- end }} \u0026lt;/div\u0026gt; {{- end }} \u0026lt;footer class=\u0026#34;post-footer\u0026#34;\u0026gt; {{- $tags := .Language.Params.Taxonomies.tag | default \u0026#34;tags\u0026#34; }} \u0026lt;ul class=\u0026#34;post-tags\u0026#34;\u0026gt; {{- range ($.GetTerms $tags) }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{- end }} \u0026lt;/ul\u0026gt; {{- if (.Param \u0026#34;ShowPostNavLinks\u0026#34;) }} {{- partial \u0026#34;post_nav_links.html\u0026#34; . }} {{- end }} {{- if (and site.Params.ShowShareButtons (ne .Params.disableShare true)) }} {{- partial \u0026#34;share_icons.html\u0026#34; . -}} {{- end }} \u0026lt;/footer\u0026gt; {{- if (.Param \u0026#34;comments\u0026#34;) }} {{- partial \u0026#34;comments.html\u0026#34; . }} {{- end }} \u0026lt;/article\u0026gt; {{- end }}{{/* end main */}} 크게 건드렸던 건 이렇게 두개였던 것 같고, 한 4시간 정도 걸렸던 것 같다.\n배포과정 중 생긴 문제해결 과정 그리고 배포를 할 것인데, 그냥 끼얹기보단 새롭게 orphan branch를 만들어서 이 브랜치를 main 브랜치로 바꾸어서 기존 플젝에 업데이트 해보았다.\n우선 공식 hugo 사이트에서 아래 배포 스크립트를 그대로 적용해보았다. TZ만 우리나라 서울로 바꾸어주었고, 그대로 옮겨보았다.\nname: Build and deploy on: push: branches: - main workflow_dispatch: permissions: contents: read pages: write id-token: write concurrency: group: pages cancel-in-progress: false defaults: run: shell: bash jobs: build: runs-on: ubuntu-latest env: DART_SASS_VERSION: 1.90.0 GO_VERSION: 1.24.5 HUGO_VERSION: 0.148.2 NODE_VERSION: 22.18.0 TZ: Europe/Oslo steps: - name: Checkout uses: actions/checkout@v5 with: submodules: recursive fetch-depth: 0 - name: Setup Go uses: actions/setup-go@v5 with: go-version: ${{ env.GO_VERSION }} cache: false - name: Setup Node.js uses: actions/setup-node@v4 with: node-version: ${{ env.NODE_VERSION }} - name: Setup Pages id: pages uses: actions/configure-pages@v5 - name: Create directory for user-specific executable files run: | mkdir -p \u0026#34;${HOME}/.local\u0026#34; - name: Install Dart Sass run: | curl -sLJO \u0026#34;https://github.com/sass/dart-sass/releases/download/${DART_SASS_VERSION}/dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz\u0026#34; tar -C \u0026#34;${HOME}/.local\u0026#34; -xf \u0026#34;dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz\u0026#34; rm \u0026#34;dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz\u0026#34; echo \u0026#34;${HOME}/.local/dart-sass\u0026#34; \u0026gt;\u0026gt; \u0026#34;${GITHUB_PATH}\u0026#34; - name: Install Hugo run: | curl -sLJO \u0026#34;https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz\u0026#34; mkdir \u0026#34;${HOME}/.local/hugo\u0026#34; tar -C \u0026#34;${HOME}/.local/hugo\u0026#34; -xf \u0026#34;hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz\u0026#34; rm \u0026#34;hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz\u0026#34; echo \u0026#34;${HOME}/.local/hugo\u0026#34; \u0026gt;\u0026gt; \u0026#34;${GITHUB_PATH}\u0026#34; - name: Verify installations run: | echo \u0026#34;Dart Sass: $(sass --version)\u0026#34; echo \u0026#34;Go: $(go version)\u0026#34; echo \u0026#34;Hugo: $(hugo version)\u0026#34; echo \u0026#34;Node.js: $(node --version)\u0026#34; - name: Install Node.js dependencies run: | [[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true - name: Configure Git run: | git config core.quotepath false - name: Cache restore id: cache-restore uses: actions/cache/restore@v4 with: path: ${{ runner.temp }}/hugo_cache key: hugo-${{ github.run_id }} restore-keys: hugo- - name: Build the site run: | hugo \\ --gc \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; \\ --cacheDir \u0026#34;${{ runner.temp }}/hugo_cache\u0026#34; - name: Cache save id: cache-save uses: actions/cache/save@v4 with: path: ${{ runner.temp }}/hugo_cache key: ${{ steps.cache-restore.outputs.cache-primary-key }} - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 ![[새로운 블로그 리뉴얼을 환영해주세요-1756097756323.webp]]\n기존 방식보다 무려 40초나 줄었고, 엄청 빠르게 빌드되는 걸 확인할 수 있다.\n이 빌드가 그냥 처음부터 Go 를 다 깔고 하는 걸 생각하면 엄청 빠르단걸 확인할 수 있다.\n![[새로운 블로그 리뉴얼을 환영해주세요-1756098002261.webp]]\n이렇게 이제 블로그 배포가 잘 되는 걸 확인할 수 있다.\n하지만 보는 것처럼 글이 하나도 없다. 이건 당연하다. 왜냐하면 위에서 봤던 것처럼 내 개인 옵시디언 볼트에서 끌어와서 빌드하는 방식이니, 볼트 자체를 깃허브에 업로드하는게 아니니까 그렇다.\n여기서 내가 생각해본게 두가진데,,\nsymlink 같은걸 도입해서 내 볼트에 있는 블로그 포스트도 git이 인식해서 올려줄 수 있도록 하거나 처음부터 블로그 포스트(.md) 들을 git에 업로드하도록 만들기 내가 옵시디언과의 연동성을 생각해볼때 2번은 절대 싫었다. 왜냐하면 내 옵시디언 저장소는 icloud에서 관리되기 때문이다.\n결국엔 symlink 같은걸 도입하거나, 업로드 스크립트를 만들거나 해야할 것 같았다.\n1. 배포를 위해서 심링크를 쓰기 우선, 진짜 symlink가 git에서 진짜 되는지 한번 해볼 필요가 있다. 당시에 git 이 심볼릭 링크를 어떻게 다루는지 몰라서 일단 직접 만들어보았다.\n일단은 컨텐츠를 휴고에서 옮기는 mount 를 삭제하고 심링크를 추가해보았다.\n심링크 추가까지는 너무 잘되었다. 휴고 블로그 서버도 잘 작동되었다. vscode 에서도 단순히 폴더로 인식됐다.\n![[새로운 블로그 리뉴얼을 환영해주세요-1756098346361.webp]]\n하지만 깃에서 추가할 때는 문제가 되었는데, 그 이유는 깃에서는 심링크 자체에서 링크 정보만을 커밋한다.\n그래서 깃허브에서는 \u0026ldquo;링크되는 정보\u0026rdquo; 자체만을 저장해서 버전 관리되기 때문에 하드 링크로 바꾸어보려고 했는데.. 이게 어쩌나, 디렉토리는 하드링크를 할 수 없다! 왜냐하면 무한루프가 생길 수 있기 때문이다.\n2. 셸 스크립트 사용 그래서 결국 스크립트를 사용해서 배포용 스크립트를 만들기로 했다. 구글링을 직접 하면서 어떤 방법이 있나 찾아보았다.\n다행히, 옵시디언을 좋아하는 한 개발자분께서 shell commands 라는 옵시디언 플러그인을 만들어두셨다.\nhttps://publish.obsidian.md/shellcommands/Index\n옵시디언 볼트에서 직접 터미널을 통해 셸 스크립트를 실행할 수 있는 플러그인이다.\n그래서 아래처럼 직접 내 블로그 포스트 디렉토리를 찾아 사이트를 빌드해서 그냥 이대로 올렸다.\n어차피 로컬에서 올려야한다면, github action 을 통해서 빌드를 하고 올리는게 낫다고 생각했다.\nrsync 명령어 그런데, mv 를 통해 빌드 파일을 버전관리하는 디렉토리로 옮기던 중 애로 사항이 있었다.\nmv: rename public/archives to public-git/archives: Directory not empty mv: rename public/assets to public-git/assets: Directory not empty mv: rename public/categories to public-git/categories: Directory not empty mv: rename public/page to public-git/page: Directory not empty mv: rename public/posts to public-git/posts: Directory not empty mv: rename public/search to public-git/search: Directory not empty mv: rename public/tags to public-git/tags: Directory not empty To https://github.com/moozeh/blog-static.git e499e5e..5e605e7 main -\u0026gt; main 위처럼 Directory not empty 와 같은 문제가 있었다.\n그래서 어차피 복사할 거 그냥 rsync 명령어를 사용했다.\nrsync 같은 경우 대상을 완벽하게 동일하게 복사해주므로 딱 나에게 필요한 명령어였다.\n이 명령어가 보통 백업할 때 쓰이는 듯하다. 실제로 나중에 백업 프로그램을 만들 일이 생긴다면 이 명령어를 참고해보는 것도 좋을 것 같다.\nrsync -ah [SORCE_DIR] [TARGET_DIR] 위와 같이 사용하여 복사할 수 있다. 그밖의 옵션에 관해선 이렇다.\n-a 옵션 : 아카이브 모드. 권한, 시간, 심볼릭 링크 등 세세한 정보까지 복사해준다. -v 옵션 : verbose. 스크립트를 사용할 때 아는 그것. 디버깅에 용이하다. -h 옵션 : human readable. 복사할 때 출력시 결과를 KB, MB 등 사람이 보기 편하게 나타내게해준다. 나는 실제로 출력 결과를 통해 디버깅해야하는데, 셸 스크립트이기 때문에 -v 옵션은 필요 없어서 사용하진 않았다.\n최종 결과는 이렇게 나왔다. 블로그를 전부 쓰고 cmd + p 를 눌러 스크립트를 실행해주면 된다.\n이전과 달리 옵시디언 볼트는 하나만 사용하고, 버전 관리는 빌드 결과만 해주면 된다!!! 너무 좋다 ^^\n#!/bin/bash export PATH=\u0026#34;$PATH:/opt/homebrew/bin\u0026#34;; echo \u0026#34;Building static site...\u0026#34; cd blog hugo build if [ $? -ne 0 ]; then echo \u0026#34;Failed to build hugo project. Aborted.\u0026#34; return -1 fi echo \u0026#34;Uploading static website files to a github repository.\u0026#34; rsync -ah public/* public-git cd public-git git pull git add . git commit -m \u0026#34;Uploaded post via obsidian shell script\u0026#34; if [ $? -ne 0 ]; then echo \u0026#34;failed to commit to a remote repository. Aborted.\u0026#34; return -1 fi git push if [ $? -ne 0 ]; then git reset --hard HEAD~1 echo \u0026#34;failed to push. soft reseting data.\u0026#34; return -1 fi 앞으로의 방침 앞으로 블로그글을 쓸 때는 그냥 타인에게 공유할 일이 잦을 문서, 고민하는 과정을 쓰는 문서 로 나누어서 쓸 것 같다.\n문제해결을 좋아하는 친구와 얘기해봤는데, 뭔가 거창한 이력을 적는 것보다, 내가 하고 싶은 프로젝트에서 생긴 문제 해결 과정을 까먹지 않게만 기록해도 충분할 듯하다.\n그리고, 그야 그도 그럴게, 문제 해결을 어떻게 한번에 하겠나? 한번에 해결이 되면 나 혼자 이미 회사를 차렸지.. 계속 고민해서 끊임없이 완벽보단 완주를 노려봐야할 것 같다.\n실제로 부스트캠프를 하면서도 내 고민과정을 제대로 기록하지 못한 것에 후회를 많이 했었는데 아직 좀 더 고쳐야할 것 같아서 내적으로 많이 고민이 되긴 한다.\n내가 완벽하다고 생각하기 보단 계속 이렇게 달려야 좋은 사람이고 발전하는 사람이 아닐까 생각한다. 다시 한번 잘 노력해보자!\n","permalink":"https://blog.moozeh.org/posts/%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A6%AC%EB%89%B4%EC%96%BC%EC%9D%84-%ED%99%98%EC%98%81%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/","summary":"\u003cp\u003e2025학년도 1학기를 보내면서 글을 쓸 기회가 많이 없어졌었습니다. 사실 자잘하게 글을 쓰고 문서를 하는 일은 많이 했으나, 실제로 \u003ccode\u003e완벽한 블로그 글을 작성해야한다.\u003c/code\u003e 라는 머릿속의 집착 때문에 글을 쓰는 것이 두려워 진것도 사실입니다.\u003c/p\u003e\n\u003cp\u003e더군다나 불편한 점도 많이 느끼고 있었는데, 이에 블로그 작성 방법을 개선해서 프로젝트(끝이 나는 작업)이 끝나게 되면 자연스럽게 블로그 글도 쓸 수 있도록 환경을 조성하려고 하였고, 그러다보니 블로그 구조를 개선하게 되었습니다.\u003c/p\u003e\n\u003ch2 id=\"블로그-개선-이유\"\u003e블로그 개선 이유\u003c/h2\u003e\n\u003ch3 id=\"1-블로그-빌드-속도-개선\"\u003e1. 블로그 빌드 속도 개선\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eRuby\u003c/code\u003e 언어로 만들어진 지킬은 \u003ccode\u003eGo\u003c/code\u003e 언어로 만들어졌습니다. 그러다보니 \u003ccode\u003eRuby\u003c/code\u003e 를 위한 의존성 설치와 세팅 시간이 많이 잡아먹게 되고, 최종적으로 빌드 시 1분이 걸리는 불상사가 일어납니다.\u003c/p\u003e","title":"[블로그 개선] Hugo 블로그를 만들어보았습니다"},{"content":"Porring 프로젝트를 하면서 다대다 관계를 만들 때 관계에 대한 엔티티를 만들지 말지를 고민했는데, 결국엔 만들었다.\n왜냐하면, 관계 자체를 검색할 일이 많았으니까 관계가 주를 이룬다고 생각했기 때문에 그렇게 생각했다.\n하지만 다대다 관계에서는 만들 수도 있고, 만들지 않을 수도 있다. @ManyToMany 어노테이션을 사용하면 만들 수 있다고 들었다.\n하지만, 실무에서는 왠만해선 사용하지 말라는 의견이 많은데 그 이유를 알아보자.\n물론! 이 부분은 JPA 에 준하는 이야기다. 왜냐하면 JPA 의 엔티티의 영속성 컨텍스트를 살펴봐야하기 때문이다.\n경우에 따라 관계 자체를 엔티티로 설정해야할 수도 있겠지만 (추가 정보가 있거나) 대부분의 경우 CascadeType 옵션으로 유연하게 풀어나갈 수 있다.\n오늘은 ERD 및 관계형 데이터베이스의 관계에 대해 이야기할 것이므로 데이터베이스 설계와도 밀접한 연관이 있다.\nJPA 의 Cascade 관계 일단, 관계 테이블을 정의하는 것 자체에 대해서 고찰을 해볼 예정이다.\nJPA 에서는 관계 테이블을 어떻게 가져올까를 먼저 생각해봐야한다.\n당연히, @OneToMany, @ManyToMany 등의 어노테이션과 이와 연계된 엔티티를 정의하여 풀어낼 수 있을 것이다.\n결론부터 말하자면 일반적인 경우 왠만해선 추가적인 정보가 없다면, 굳이 풀어낼 필요가 없다. 추후에 실무적인 관점에서 다시 접근하기 때문에 일차적으로는 이렇게 적었다.\n왜냐하면 Cascade 옵션을 조절하여 특정 테이블 내의 엔티티 정보만 가져올 수 있다. 이 정보는 JPA 스펙에 정의되어 있다.\n이곳에 잠깐 들어가보자. 얼마 안걸린다. 이곳에서 JPA 에 정의되어있는 CascadeType 들을 살펴볼 수 있으며, 이를 통해서 우리는 불필요한 엔티티를 만들 필요가 없게 할 수 있다.\n![[2025-03-07-spring-jpa-nm-관계-풀어내기-1-엔티티에-걸린-관계-테이블을-풀어내기-20250308105324635.webp]]\n잠깐, Cascade 란? 아까부터 Cascade 라는 용어를 사용하고 있었는데, Cascade 란 뭘까?\n일단 영어 단어의 정의부터 살펴보자.\nCascade : 종속, 작은 폭포\n![[2025-03-07-spring-jpa-nm-관계-풀어내기-1-엔티티에-걸린-관계-테이블을-풀어내기-20250308105649458.webp|242]]\n우리가 흔히 CSS 문서(정확히는 스타일 시트 언어) 에서 정의되는 Cascading 의 의미와 동일하다. 즉, 폭포처럼 위에서부터 내려가는 구조를 뜻하는 의미라고 한다.\nCascade 옵션을 사용하면 폭포처럼 특정 엔티티와 연관된 엔티티들의 작업이 어디까지 영향이 미치게 할지 정할 수 있다. 다시 말해서, 백엔드에서는 엔티티 간 연관관계로 이어진 관계에서 전파되는 개념을 뜻한다.\n이 옵션들은 같이 정의되어있는 영속성 컨텍스트와 밀접한 관련이 있으며, 실제로 아래 해당되는 CascadeType 은 엔티티의 생명주기 단계와 유사하게 대응된다. (완전한 대응 X)\nCascadeType 해당 작업을 할 때 전파가 됨을 의미한다.\n쉽게 풀어 말하자면, 특정 엔티티 (부모) 에서 한 작업이 연관된 엔티티 (자식) 으로 전파되는 기준을 정의한다.\n엔티티가 영속성 컨텍스트에서 관리되는 만큼, 생명주기와도 관련 있는 것이다.\nAll : 모든 작업이 전파 Detach : 분리 작업\u0026rsquo;만\u0026rsquo; 전파 Merge : 병합 작업\u0026rsquo;만\u0026rsquo; 전파 Persist : 저장 작업\u0026rsquo;만\u0026rsquo; 전파 Refresh : 새로고침 작업\u0026rsquo;만\u0026rsquo; 전파 Remove : 삭제 작업\u0026rsquo;만\u0026rsquo; 전파 완전히 대응되지는 않는 이유로 FetchType 이 있다. 이를 이용하여 엔티티 조회 시에 전파를 할 수 있다. 엔티티의 로딩 작업은 이를 이용해야할 것이다.\n다대다 관계 풀어내기 0 - 정의 다시 짚어가기 일단은 다대다 관계를 해결하기 전에, 한가지 명확하게 짚고 넘어가야한다.\n이 부분은 원래 포함하지 않으려고 했지만, 글을 쓰다보니 헷갈려서 쓰게 됐다.\n1:N, N:1, N:M 의 기준은 정확히 어떻게 되는 걸까?\n이 질문에 대해서 다시 생각을 해보고 기록을 하려고 한다.\n일대다, 다대일의 관계는 간단하다. 일에 해당하는 엔티티 객체가 하나면, 이 하나의 객체 (레코드)와 관계된 다에 해당 되는 엔티티는 여러개 일 것이다. 라는 게 일반적인 생각이다.\n하지만, 관계 엔티티 자체가 정의되면 이런 생각이 헷갈리기 쉬울 수 있다.\n@Entity public class BoardTag { @Id @GeneratedValue private Long id; // 또는 복합 키 사용 @ManyToOne @JoinColumn(name = \u0026#34;board_id\u0026#34;) private Board board; @ManyToOne @JoinColumn(name = \u0026#34;tag_id\u0026#34;) private Tag tag; // 추가 필드들... } 위 엔티티 코드를 보자. 위 엔티티는 Board 와 Tag 를 이어주는 관계 엔티티이다.\n하나의 게시물이 여러개의 태그를 달 수 있고, 여러 게시물에서 동일한 태그를 달 수 있다 (다대다 관계) 라고 해보자.\n그렇다면, BoardTag 엔티티에서 왜 ManyToOne 일까 에 대해서 한번 생각해봤을 때 헷갈리는가? 헷갈리지 않는다면 당신만의 정확한 기준이 있을 것이고, 헷갈린다면 나와 같은 상황이라고 볼 수 있을 것이다.\n관계 자체를 의미하는 엔티티는 하나다.\n이 관계 엔티티 하나는 각각 하나의 Board 와 Tag 를 참조 하니까, 저기서는 OneToOne이라고 적어야하는게 아닐까?\n이 관계가 왜 다대일 인지 생각해보았을 때, 관계의 정의에 대해서 생각해봐야한다.\n데이터베이스 관계는 IP와 같은 연결 정보이다. 1:N 관계라고 할 때, 관계의 1 과 N 을 따로 떼서 각각의 엔티티에 대입해서 봐야하는게 아니고, 관계 자체가 두 엔티티 간의 연결 정보라고 생각해야한다. 마치 네트워크에서 IP 의 개념이라고 봐야하듯이 말이다.\nIP 는 컴퓨터의 정보가 아니라, 두 노드 간의 연결 정보를 담는다.\n이와 같이, BoardTag 의 입장이 아니라, Board 와 Tag 에서 어떻게 이어질지를 생각해봐야한다는 의미이다.\n즉, Board 에서는 BoardTag 를 여러개 가질 수 있으므로, BoardTag 에서의 Board 프로퍼티는 @ManyToOne 이 되는 것이다.\n동일하게, @OneToOne 은 양 쪽 모두에서 하나만 가질 수 있을 때 사용해야한다.\n다대다 관계 풀어내기 1 - @ManyToMany 의 존재 의의 그렇다면 우리는 다대다 관계에서 테이블을 굳이 쓰지 않는 이유는 무엇일까?\n관계 테이블을 따로 설정하지 않는 이유로 영속성 컨텍스트의 캐시기능에 의의가 있다.\n예를 들어 게시판에 태그를 다는 기능이 필요하다고 하자.\n이때, 게시판 엔티티 Board 혹은 태그 엔티티 Tag에서 상대방을 관계로 가져올때, OneToMany 어노테이션으로, 그리고 그 속성 중 Casecade를 이용하면 상대 엔티티 작업을 언제 할지를 고를 수 있다.\n또한, 이때 @JoinTable 을 이용하면 실제 물리적인 관계는 유지하면서, 다대다 관계를 엔티티만으로 유지할 수 있게 된다. 즉, 다대다 관계를 우리가 다루고자하는 객체만으로 풀어낼 수 있다. (관계를 위한 객체에 대한 관심을 없앨 수 있다.)\n@Entity public class Board { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; // joinTable을 통해 데이터베이스의 물리적 구현에 대한 관심분리가 이루어진다. @ManyToMany(cascade = CascadeType.ALL) @JoinTable( name = \u0026#34;board_tag\u0026#34;, joinColumns = @JoinColumn(name = \u0026#34;board_id\u0026#34;), inverseJoinColumns = @JoinColumn(name = \u0026#34;tag_id\u0026#34;) ) private Set\u0026lt;Tag\u0026gt; tags = new HashSet\u0026lt;\u0026gt;(); // getter, setter 등 } 그래서 추가적인 정보가 없다면 엔티티를 만들 필요가 없는 것이다. 실제 데이터베이스의 구현을 신경쓰지 않도록 하는 ORM 의 목적에 부합하는 아주 좋은 예시인 것이다!\n지금까지의 정보대로라면, 새로 생성하는 것과 불러오는 것 (CRUD 의 CR) 정도는 간단히 할 수 있을 것이다. 그야 Cascade 속성과 @JoinTable을 이용하여 관계 테이블과 상대 엔티티까지 생성 정보를 전파시키면 되기 때문이다.\n다대다에서 엔티티를 굳이 만들 필요가 없는 상황에서, 이 관계를 갱신 (Update / Delete) 하기 위한 좋은 방법은 무엇일까? 나는 이것이 되지 않아서 직접 관계 엔티티를 만들어서 직접 삭제를 해주려고 했었다.\n업데이트 또한, 기본적인 방법은 쉽다. JPA 에서 갱신을 하기 위해서는 단순히 Set.clear() 과 Set.addAll() 메서드를 활용하면 된다.\n앞서 언급된 예시의 코드를 살펴보자. 아래 코드는 Set 컬렉션으로 관계를 표현하여 데이터베이스 관계를 자바 객체로써 사용할 수 있도록 해준다.\n@Entity public class Board { @Id @GeneratedValue private Long id; @ManyToMany(cascade = CascadeType.ALL) @JoinTable( name = \u0026#34;board_tag\u0026#34;, joinColumns = @JoinColumn(name = \u0026#34;board_id\u0026#34;), inverseJoinColumns = @JoinColumn(name = \u0026#34;tag_id\u0026#34;) ) private Set\u0026lt;Tag\u0026gt; tags = new HashSet\u0026lt;\u0026gt;(); } @Transactional public void updateBoardTags(Long boardId, Set\u0026lt;Tag\u0026gt; newTags) { Board board = boardRepository.findById(boardId).orElseThrow(); // 1. board_tag 테이블에서 해당 board_id를 가진 모든 레코드 삭제 board.getTags().clear(); // 2. 새로운 태그 컬렉션의 각 태그마다 board_tag 테이블에 레코드 추가 board.getTags().addAll(newTags); } 다대다 관계 풀어내기 2 - 실무적인 접근 자, 이제 본론으로 돌아와보자. 과연 이게 실제로 필요한 내용일지 생각해보자는 것이다. 원래 나는 그냥 간단한 경우 이렇게만 구현해도 된다고 생각했지만, 요구사항이 바뀔 수도 있는 실무 환경에서는 다르게 접근해야한다는 입장이 대다수였다.\n우리는 확장성에 염두에 두고 백엔드 코드를 작성해야 유지보수하기가 쉽다. 위 방식이 유지보수의 관점에서는 좋은 방식일까를 생각해보면 처음에 작성하는 것이 귀찮긴 해도 후처리의 입장에선 이 방식이 관리하기 편하다.\n추가적인 정보를 추가할 때 귀찮아짐(유지보수 어려움) 당장 위의 Tag 의 예시만 보아도, 태그가 추가된 날짜, 연관된 태그 목록 등과 같은 추가적인 필드를 추가하려면 결국엔 관계 엔티티를 추가해야한다는 입장이다.\npackage com.kolown.porring.account.entity; import jakarta.persistence.Column; import jakarta.persistence.Entity; import jakarta.persistence.FetchType; import jakarta.persistence.GeneratedValue; import jakarta.persistence.GenerationType; import jakarta.persistence.Id; import jakarta.persistence.JoinColumn; import jakarta.persistence.ManyToOne; import jakarta.persistence.Table; import lombok.AccessLevel; import lombok.Getter; import lombok.NoArgsConstructor; import org.hibernate.annotations.SoftDelete; import org.hibernate.annotations.SoftDeleteType; @Entity @Table(name = \u0026#34;accounts_follow\u0026#34;) @NoArgsConstructor(access = AccessLevel.PROTECTED) @SoftDelete(columnName = \u0026#34;deleted\u0026#34;, strategy = SoftDeleteType.DELETED) @Getter public class AccountFollow { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = \u0026#34;account_follow_id\u0026#34;, nullable = false) private Long id; @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name = \u0026#34;follower_id\u0026#34;, referencedColumnName = \u0026#34;account_id\u0026#34;, nullable = false) private Account follower; @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name = \u0026#34;followee_id\u0026#34;, referencedColumnName = \u0026#34;account_id\u0026#34;, nullable = false) private Account followee; @Column(name = \u0026#34;nickname\u0026#34;, columnDefinition = \u0026#34;VARCHAR(255)\u0026#34;) private String nickname; public AccountFollow(Account follower, Account followee, String nickname) { this.follower = follower; this.followee = followee; this.nickname = nickname; } public void updateNickname(String nickname) { this.nickname = nickname; } } 위 코드는 Porring 프로젝트에서 실제로 사용 중인 Account 엔티티의 관계 테이블에 대한 엔티티이다.\n이름이 Follow 지만, Account 간의 관계 테이블 역할을 하면서, 동시에 관계 자체에 대한 의미를 지니는 엔티티이다.\n현재 MVP 개발 단계에서 실제로 관계 자체에 대한 유즈 케이스가 늘어날 수록 이 엔티티를 확장하기만 하면 되므로 기능 확장하기가 편했다.\nMVP 이후 운영 단계에서 컬럼이 추가(되면 안되겠지만,,?!)해줬으면 하는 일이 생긴다면 아예 관계 테이블을 만드는 것보다, 이렇게 엔티티를 확장하는 것이 오류가 일어날 확률은 확실히 적으리라 생각한다!\n중간 테이블에 대한 쿼리 제어 가능 또한 중간 테이블에 대한 쿼리 제어가 된다.\n얼마전 학교 친구와의 이야기에서 Cascade.REMOVAL 의 치명적인 오류를 알게 됐다.\nN 대 다 (N = 1 혹은 다) 에서 Cascade.REMOVAL 로 자식 엔티티를 지우게 되면 직접 조회하며 지우게 된다. 이때 조회/삭제 쿼리를 N번 반복하게 되어 N+1 문제가 생긴다는 주제였다.\n관계 테이블을 조절하는 것이 온전히 JPA 에게로 넘어가니까 이런 일에 대한 비효율이 생겨도 어찌할 수가 없는 경우가 생긴다.\n중간테이블이 생긴다면, 이 관계 자체에 대한 직접적인 조작이 필요할 경우 유즈케이스에 따라 내가 원하는 쿼리를 수행시킬 수 있는 장점이 있다.\norphanRemoval 사용이 불가능해짐 @ManyToMany 에서는 orphanRemoval 옵션이 지원되지 않는다.\n이 옵션은 기본적으로 부모 엔티티와 연관관계가 끊어진 자식 엔티티의 관계를 알아서 삭제할 수 있도록 해준다.\n// orphanRemoval에 대한 예시 // Board 엔티티에서 orphanRemoval 설정 @Entity public class Board { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; private String title; // orphanRemoval = true 설정으로 관계가 끊어지면 BoardTag 엔티티도 함께 삭제됨 @OneToMany(mappedBy = \u0026#34;board\u0026#34;, cascade = CascadeType.ALL, orphanRemoval = true) private Set\u0026lt;BoardTag\u0026gt; boardTags = new HashSet\u0026lt;\u0026gt;(); // 게시글의 모든 태그 관계를 제거하는 메서드 public void clearTags() { // 이 메서드 호출로 모든 관계가 제거되면 orphanRemoval에 의해 // 연관된 BoardTag 엔티티들도 DB에서 자동으로 삭제됨 boardTags.clear(); } } // 사용 예시 (서비스에서) @Transactional public void removeAllTagsFromBoard(Long boardId) { Board board = boardRepository.findById(boardId).orElseThrow(); // boardTags 컬렉션만 비워도 orphanRemoval 설정으로 인해 // DB의 board_tag 테이블에서 해당 board_id의 레코드들이 모두 삭제됨 board.clearTags(); } @OneToMany 로 Board 혹은 Tag 에서 연관된 관계만을 삭제하는 방식으로 조절하면 데이터 무결성을 지킬 수 있다.\n여기서 내가 이야기하는 데이터 무결성이란 원자성에 가깝다. 서비스 코드를 작성할 때, 내가 무심코 Tag 엔티티를 담는 컬렉션만 초기화하고, 실제 관계 테이블의 관계는 삭제하지 않게 되는 경우가 있을 수 있을 것이다.\n이는 내가 말하는 데이터 무결성이 지켜지지 않는 상황이고, 이런 오류는 대부분 하나의 작업을 할 때 하나의 서브 작업만 하고 이와 관련된 나머지 작업을 수행하지 않아서 일어나는 일이다.\n그렇다고 해서 다른 Cascade.REMOVAL 등의 옵션을 사용한다고 해도 이는 Set\u0026lt;Tag\u0026gt; 이기 때문에 Tag 엔티티를 삭제하게되는 오류가 있을 수 있다. 이 Board 에 연관된 Tag의 관계를 삭제하시오 가 아니라 이 Board에 연결된 태그 자체를 삭제하시오. 라고 되면 곤란하기 때문이다.\n그래서 보통은 관계 자체를 관리하기 위해서 OneToMany 를 이용해서 관계 엔티티를 참조하도록 하고, orphanRemoval = true 설정을 주어 관계 자체를 관리할 수 있도록 한다.\n총 정리 : 다대다 관계 코드 예시 모든 정보를 취합하여 아래와 같이 구성할 수 있다.\n아래는 클로드 예시이며, 다른 방식으로 구성될 수도 있음을 참고하자!\n// 게시판 엔티티 @Entity public class Board { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; private String title; private String content; // BoardTag 관계 엔티티를 통한 Tag 접근 // orphanRemoval을 true로 설정하여 관계가 끊어지면 BoardTag도 삭제되도록 함 @OneToMany(mappedBy = \u0026#34;board\u0026#34;, cascade = CascadeType.ALL, orphanRemoval = true) private Set\u0026lt;BoardTag\u0026gt; boardTags = new HashSet\u0026lt;\u0026gt;(); // 편의 메서드: 태그 추가 public void addTag(Tag tag) { BoardTag boardTag = new BoardTag(this, tag); boardTags.add(boardTag); } // 편의 메서드: 태그 제거 public void removeTag(Tag tag) { boardTags.removeIf(boardTag -\u0026gt; boardTag.getTag().equals(tag)); } // 편의 메서드: 모든 태그 갱신 public void updateTags(Set\u0026lt;Tag\u0026gt; newTags) { // 기존 태그 관계를 모두 제거 boardTags.clear(); // 새로운 태그 관계 추가 for (Tag tag : newTags) { addTag(tag); } } // 편의 메서드: 현재 게시판에 연결된 태그 목록 조회 public Set\u0026lt;Tag\u0026gt; getTags() { return boardTags.stream() .map(BoardTag::getTag) .collect(Collectors.toSet()); } } // 태그 엔티티 @Entity public class Tag { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; @Column(unique = true) private String name; // 양방향 관계를 위한 BoardTag 참조 @OneToMany(mappedBy = \u0026#34;tag\u0026#34;) private Set\u0026lt;BoardTag\u0026gt; boardTags = new HashSet\u0026lt;\u0026gt;(); // 이 태그가 사용된 게시판 목록 조회 public Set\u0026lt;Board\u0026gt; getBoards() { return boardTags.stream() .map(BoardTag::getBoard) .collect(Collectors.toSet()); } } // 관계 엔티티 (중간 테이블 역할) @Entity @Table(name = \u0026#34;board_tag\u0026#34;) public class BoardTag { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name = \u0026#34;board_id\u0026#34;) private Board board; @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name = \u0026#34;tag_id\u0026#34;) private Tag tag; // 관계에 추가적인 정보를 저장할 수 있음 private LocalDateTime taggedAt; // 관계에 대한 메타데이터 (예: 누가 태그했는지) private String taggedBy; protected BoardTag() {} public BoardTag(Board board, Tag tag) { this.board = board; this.tag = tag; this.taggedAt = LocalDateTime.now(); } public BoardTag(Board board, Tag tag, String taggedBy) { this(board, tag); this.taggedBy = taggedBy; } // Getter 메서드 public Board getBoard() { return board; } public Tag getTag() { return tag; } public LocalDateTime getTaggedAt() { return taggedAt; } public String getTaggedBy() { return taggedBy; } // 태그 메타데이터 업데이트 public void updateTaggedBy(String taggedBy) { this.taggedBy = taggedBy; } // equals \u0026amp; hashCode 구현 @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; BoardTag boardTag = (BoardTag) o; return Objects.equals(board.getId(), boardTag.board.getId()) \u0026amp;\u0026amp; Objects.equals(tag.getId(), boardTag.tag.getId()); } @Override public int hashCode() { return Objects.hash(board.getId(), tag.getId()); } } // 서비스 계층에서의 CRUD 예시 @Service @Transactional public class BoardService { private final BoardRepository boardRepository; private final TagRepository tagRepository; private final BoardTagRepository boardTagRepository; // 생성자 주입 public BoardService(BoardRepository boardRepository, TagRepository tagRepository, BoardTagRepository boardTagRepository) { this.boardRepository = boardRepository; this.tagRepository = tagRepository; this.boardTagRepository = boardTagRepository; } // 게시글 생성 및 태그 추가 public Board createBoard(String title, String content, List\u0026lt;String\u0026gt; tagNames, String username) { Board board = new Board(); board.setTitle(title); board.setContent(content); // 게시글 저장 board = boardRepository.save(board); // 태그 처리 for (String tagName : tagNames) { // 기존 태그가 있으면 사용, 없으면 생성 Tag tag = tagRepository.findByName(tagName) .orElseGet(() -\u0026gt; { Tag newTag = new Tag(); newTag.setName(tagName); return tagRepository.save(newTag); }); // 중간 엔티티를 통한 관계 설정 BoardTag boardTag = new BoardTag(board, tag, username); board.getBoardTags().add(boardTag); } return boardRepository.save(board); } // 게시글의 태그 목록 업데이트 public Board updateBoardTags(Long boardId, List\u0026lt;String\u0026gt; tagNames, String username) { Board board = boardRepository.findById(boardId) .orElseThrow(() -\u0026gt; new EntityNotFoundException(\u0026#34;Board not found\u0026#34;)); // 기존 태그 관계 모두 삭제 (orphanRemoval=true로 설정했으므로 자동으로 DB에서도 삭제됨) board.getBoardTags().clear(); // 새 태그 추가 for (String tagName : tagNames) { Tag tag = tagRepository.findByName(tagName) .orElseGet(() -\u0026gt; { Tag newTag = new Tag(); newTag.setName(tagName); return tagRepository.save(newTag); }); BoardTag boardTag = new BoardTag(board, tag, username); board.getBoardTags().add(boardTag); } return boardRepository.save(board); } // 특정 태그가 달린 게시글 목록 조회 public List\u0026lt;Board\u0026gt; getBoardsByTag(String tagName) { Tag tag = tagRepository.findByName(tagName) .orElseThrow(() -\u0026gt; new EntityNotFoundException(\u0026#34;Tag not found\u0026#34;)); // 태그의 BoardTag 관계를 통해 Board 목록 조회 return tag.getBoardTags().stream() .map(BoardTag::getBoard) .collect(Collectors.toList()); } // 특정 시간 이후에 태그된 게시글 목록 조회 (관계 엔티티의 추가 필드 활용) public List\u0026lt;Board\u0026gt; getBoardsTaggedAfter(String tagName, LocalDateTime dateTime) { return boardTagRepository.findByTag_NameAndTaggedAtAfter(tagName, dateTime) .stream() .map(BoardTag::getBoard) .collect(Collectors.toList()); } // 특정 사용자가 태그한 게시글 목록 조회 (관계 엔티티의 추가 필드 활용) public List\u0026lt;Board\u0026gt; getBoardsTaggedBy(String username) { return boardTagRepository.findByTaggedBy(username) .stream() .map(BoardTag::getBoard) .collect(Collectors.toList()); } // 게시글 삭제 (관련 태그 관계도 함께 삭제됨 - orphanRemoval) public void deleteBoard(Long boardId) { boardRepository.deleteById(boardId); } } // 관계 엔티티를 위한 Repository @Repository public interface BoardTagRepository extends JpaRepository\u0026lt;BoardTag, Long\u0026gt; { List\u0026lt;BoardTag\u0026gt; findByTag_NameAndTaggedAtAfter(String tagName, LocalDateTime dateTime); List\u0026lt;BoardTag\u0026gt; findByTaggedBy(String taggedBy); // 특정 Board와 Tag의 관계 조회 Optional\u0026lt;BoardTag\u0026gt; findByBoardIdAndTagId(Long boardId, Long tagId); // 특정 Board의 모든 태그 관계 조회 List\u0026lt;BoardTag\u0026gt; findByBoardId(Long boardId); // 특정 Tag가 사용된 모든 게시글 관계 조회 List\u0026lt;BoardTag\u0026gt; findByTagId(Long tagId); // 특정 태그명으로 관계 조회 List\u0026lt;BoardTag\u0026gt; findByTag_Name(String tagName); } ","permalink":"https://blog.moozeh.org/posts/2025-03-07-spring-jpa-nm-%EA%B4%80%EA%B3%84-%ED%92%80%EC%96%B4%EB%82%B4%EA%B8%B0-1-%EC%97%94%ED%8B%B0%ED%8B%B0%EC%97%90-%EA%B1%B8%EB%A6%B0-%EA%B4%80%EA%B3%84-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%ED%92%80%EC%96%B4%EB%82%B4%EA%B8%B0/","summary":"\u003cp\u003e\u003ccode\u003ePorring\u003c/code\u003e 프로젝트를 하면서 다대다 관계를 만들 때 관계에 대한 엔티티를 만들지 말지를 고민했는데, 결국엔 만들었다.\u003c/p\u003e\n\u003cp\u003e왜냐하면, 관계 자체를 검색할 일이 많았으니까 관계가 주를 이룬다고 생각했기 때문에 그렇게 생각했다.\u003c/p\u003e\n\u003cp\u003e하지만 다대다 관계에서는 만들 수도 있고, 만들지 않을 수도 있다. \u003ccode\u003e@ManyToMany\u003c/code\u003e  어노테이션을 사용하면 만들 수 있다고 들었다.\u003c/p\u003e\n\u003cp\u003e하지만, 실무에서는 왠만해선 사용하지 말라는 의견이 많은데 그 이유를 알아보자.\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003cp\u003e물론! 이 부분은 \u003ccode\u003eJPA\u003c/code\u003e 에 준하는 이야기다. 왜냐하면 \u003ccode\u003eJPA\u003c/code\u003e 의 엔티티의 영속성 컨텍스트를 살펴봐야하기 때문이다.\u003c/p\u003e","title":"[Spring JPA] 영속성 컨텍스트 시리즈 (2) - N:M 관계 엔티티로 풀어내기"},{"content":" JOINED 를 이용해 상속받은 JPA Entity 는 어떻게 저장될까라는 궁금증으로 시작했다.\nRepository 에서 저장 될 때 기본적인 엔티티가 어떻게 저장되는지가 궁금했고, 이왕 알아보는 김에 Hibernate 에서 정확하게 어떻게 구현이 되었는지 살펴보는 것까지 목표로 한다.\n서론 ![[2025-02-22-spring-jpa-상속받은-엔티티는-어떻게-저장될까-20250222165542877.webp]]\n결국 문제는 단순 휴먼 에러였다. 왜냐하면, 보이는 것처럼 추측되는 Account 엔티티를 저장하지 않은 채로, AUTO INCREMENT 값을 불러오지 않은채 바로 다른 곳에 사용했기 때문에 일어난 일이었다.\n하지만, 이런 정보를 공부하면서, 데이터베이스 상속과 JPA의 잘못된 사용에 따른 문제인지, 아니면 JpaRepository.save() 함수를 잘못사용한 문제인지를 스스로 알아내지 못한 점은 분명히 내가 영속성 컨텍스트를 알지 못하기 때문에 일어난 일이다\n이에 나는 이번 기회에 영속성 컨텍스트에 대해 자세히 살펴보기로 했다.\n영속성 컨텍스트 이론 살펴보기 사실 이번에 JPA 구현체를 찾아보면서 느낀건데, 단순히 검색했을 땐 제대로 된 공식 문서가 존재하지 않았다. 오히려 구현 스펙에 대한 사이트만 찾을 수 있었고, 이게 무엇인지에 대해서 제대로 설명해주지 않아서 찾는데 복잡했다.\n그래서 이번에 AI 검색을 활용했고, 관련된 유용한 공식 문서를 찾을 수 있게 되었다.\n글 하나로 이론적인 부분을 모두 담을 수 없는 점을 고려하여 더욱 흥미롭게 느껴진다면 아래 글들을 읽어보면 좋을 것이다.\nJava EE 5 공식문서 영속성 항목 Hibernate 영속성 컨텍스트 공식문서\n정의 영속성 컨텍스트란 애플리케이션과 데이터베이스 사이에서 엔티티와 레코드 간 동기화를 도와주며, 엔티티 객체를 보관하는 기능을 가진 객체이다.\n이때, 엔티티가 영속성 컨텍스트로 들어오게 되면 해당 엔티티는 영속 객체 PersistObject 라고 부르게 된다.\nSpring Data JPA 가 아닌 일반 JPA 레포지토리 코드에서 사용하는 entityManager 는 영속성 컨텍스트에 접근하기 위한 수단이다.\n![[2025-02-22-spring-jpa-엔티티는-어떻게-저장될까-1-20250224221047678.webp]]\n실제 Java EE 5 Persist API 의 문서 내용이다.\n엔티티 인스턴스를 보존하기 위해서는 실제로 위의 언급처럼, entityManager 에서 persist 가 호출될때 트랜잭션이 완료 된 후 엔티티를 저장하게 된다.\n영속성 컨텍스트의 4개의 생명주기 Java EE 5 에서는 영속성 컨텍스트와 연관된 엔티티의 4가지의 생명주기를 정의한다.\n![[2025-02-22-spring-jpa-엔티티는-어떻게-저장될까-1-20250224223910404.webp]]\nNew entity 식별이 되지 않은 엔티티를 의미하며, 영속성 컨텍스트와 연관이 아직 없는 상태이다.\nManaged entity 식별이 되고 있는 엔티티이며 영속성 컨텍스트와 연결되어있는 상태이다.\nDetached entity 영속적으로 식별이 되고 있는 엔티티 이지만, 현재 영속성 컨텍스트와 연결되지 않는 상태를 의미한다.\nRemoved entity 영속적으로 식별이 되며, 영속성 컨텍스트와 연결이 되어있다. 하지만, data store(데이터 소스) 등에 의해서 삭제가 예정되어있는 상태를 뜻한다.\n의의 이러한 영속성 컨텍스트를 사용함으로써 얻는 이점은 뭘까?\n엔티티와 데이터베이스의 객체 지향적 연결 우리는 흔히 JPA 를 ORM 이라고 부른다. Object Relational Mapping 이라고 부르며, 객체와 관계간의 매핑을 뜻한다.\n![[2025-02-22-spring-jpa-엔티티는-어떻게-저장될까-1-20250224221320366.webp]] Java EE 5 Persist API 의 문서 내용\n실제로 위 문서 내용을 보면, 엔티티 데이터와 데이터 베이스의 동기화를 목표로 하고 있는 만큼, 영속성 컨텍스트는 자바 객체(엔티티)와 데이터 베이스의 중간다리 역할을 함으로써, 보다 객체지향적인 관점으로 데이터베이스를 관리할 수 있게 끔 도와준다.\n1차 캐시 영속성 컨텍스트는 우리가 흔히 부르는 1차 캐시 로써의 역할을 한다. 하지만 이 단어에 대해 의문을 가져본 사람은 있는가? 대부분의 백엔드 개발자라면 의문을 가지고 그 이유를 알 것이지만, 나는 백엔드에 입문한지 얼마 되지 않았으므로 해당 단어가 엄청 생소하게 다가왔다.\n도대체 왜 1차일까?\nCPU의 관점을 보자. 이름을 1차, 2차로 나누는 것에 대해서 나는 도저히 이해가 안갔다. 하지만, 컴퓨터 지식 에서 해당 언어와 아주 밀접한 관련이 있는 도메인이 있다. 바로 CPU이다.\nCPU 에는 L1, L2, L3 캐시가 존재한다. 이와 같은 레벨에서 따온건 아닐까 하는 추측이다. 결론적으론 틀렸지만, 우리는 여기서 생각해볼 수 있는 점이 하나 있다.\nCPU 에서 1차 캐시는 어떤 것인가? CPU 와 가장 가까운 캐시를 뜻한다. 이 뜻은 사실은 가장 자주 참조되는 가장 중요한 캐시라는 뜻이다. 따라서 실제로 2차 캐시로 불리는 것들은 해당 1차 캐시, 즉 영속성 컨텍스트보다는 덜 중요한 개념이 된다.\n쉽게 말해, 영속성 컨텍스트는 애플리케이션의 사실상 CPU인 비즈니스 로직과 가장 가까운 위치에 존재하는 캐시 역할을 하고 있다고도 볼 수 있다.\n이가 실제로 일어나는 원리에 빗대어 설명하면 어떻게 될까.\n우리가 실질적으로 데이터베이스에 persist, 즉, 영속 상태로 전환하여 데이터베이스에 등록하지 않는한 우리가 설정한 엔티티는 바뀌지 않는다. 다시 말해, 우리가 영속하지 않는 한 애플리케이션 레벨 내에서 대부분의 작업이 이루어지고 DB에 영향이 가지 않는다. 즉, 캐싱이다!\nApplication Logic \u0026lt;-\u0026gt; First Level Cache (영속성 컨텍스트) -- 가장 기본적으로 참조되는 캐시로써의 역할이 됨 \u0026lt;-\u0026gt; Second Level Cache -- 영속성 컨텍스트 내에 캐시가 존재하지 않으면 부가적으로 필요할 경우 애플리케이션 전체레벨에서 캐싱이 됨 \u0026lt;-\u0026gt; Database -- 그래도 캐싱이 의미없는 상황이라는 의미에서 DB가 가장 마지막으로 참조될 수 있다는 것 2차 캐시와 구별하기 위함이다. 그렇다면 2차 캐시는 무엇일까?\nJakarta EE 공식문서에서 간단하게나마 살펴볼 수 있다.\n2차 캐시는 엔티티를 아우르는 전체적인 애플리케이션 레벨에서 캐싱하는 캐시이다. JPA 2.0 부터 공식적으로 API 에 추가 되었다. 즉, 애플리케이션 전역에서 엔티티 데이터를 공유하여 데이터베이스 접근을 최소화하는 캐시 계층이라고 볼 수 있는데..\n@Cachable(true) 등으로 캐싱을 시킬 수 있으며, Cache 에 관해서는 인터페이스를 개발자가 구현하여 캐시 구현을 각자에게 맡길 수도 있다. 이 구현 또한 Hibernate 가 해주며, JPA 공식 표준 (Jakarta EE) 에 등재되어 있다.\n또 다른 Jakarta EE 공식문서 에 의하면 애플리케이션 단 개발자는 캐시 사용을 하는 지 모른채 엔티티 매니저에 저장하는 식으로 자연스럽게 캐싱을 구현할 수 있도록 도와주는 스펙이라는 의미이다.\n즉, 영속성 컨텍스트에서 저장하는 그 이후까지의 단계를 바라보기 위한 캐시이므로, 구별이 되어야한다. 1차적으로 영속성 컨텍스트에서 영속 명령 (persist) 를 한 이후 상황의 캐싱을 바라보기때문의 2차적인 캐시라고 부르는 것이 아닐까 추측하게 됐다.\n트랜잭션 범위 내에서 유효하기 때문이다. 이게 가장 큰 차이점인데, 2차 캐시의 경우 모든 영속성 컨텍스트에서 공유되는 캐시이므로, 단계 자체가 다르다.\n우리가 일반적으로 애플리케이션 비즈니스 로직에서 사용하는 캐시라고 생각하면 되는데, 영속성 컨텍스트만으로는 이런 문제를 해결하기에는 어렵기 때문이다.\n위에서 언급한대로 영속 명령 이후의 상황을 보기 때문에 트랜잭션 단계 외부적으로 캐싱을 진행하고 있다.\n이 의미는 2차 캐시에 비해 1차적인 단계의 단순 캐싱을 의미하기 때문에 구별의 필요성이 있다.\n","permalink":"https://blog.moozeh.org/posts/2025-02-22-spring-jpa-%EC%97%94%ED%8B%B0%ED%8B%B0%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A0%80%EC%9E%A5%EB%90%A0%EA%B9%8C-1/","summary":"\u003c!-- draft 값을 false 혹은 제거해야 게시됩니다!!! --\u003e\n\u003cp\u003e\u003ccode\u003eJOINED\u003c/code\u003e 를 이용해 상속받은 \u003ccode\u003eJPA Entity\u003c/code\u003e 는 어떻게 저장될까라는 궁금증으로 시작했다.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRepository\u003c/code\u003e 에서 저장 될 때 기본적인 엔티티가 어떻게 저장되는지가 궁금했고, 이왕 알아보는 김에 \u003ccode\u003eHibernate\u003c/code\u003e 에서 정확하게 어떻게 구현이 되었는지 살펴보는 것까지 목표로 한다.\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"서론\"\u003e서론\u003c/h2\u003e\n\u003cp\u003e![[2025-02-22-spring-jpa-상속받은-엔티티는-어떻게-저장될까-20250222165542877.webp]]\u003c/p\u003e\n\u003cp\u003e결국 문제는 단순 휴먼 에러였다. 왜냐하면, 보이는 것처럼 추측되는 \u003ccode\u003eAccount\u003c/code\u003e 엔티티를 저장하지 않은 채로,  \u003ccode\u003eAUTO INCREMENT\u003c/code\u003e 값을 불러오지 않은채 바로 다른 곳에 사용했기 때문에 일어난 일이었다.\u003c/p\u003e","title":"[Spring JPA] 영속성 컨텍스트 시리즈 (1) - 영속성 컨텍스트와 1차 캐시"},{"content":"Porring 프로젝트를 진행하면서 엔티티 설정을 마치고, 복합키에 관한 지적을 받았다.\nAI를 이용해서 만든 코드인데, 미처 검증하지 못한 부분에 대해서 다시 생각해보게 되었고, 복합 PK 키를 JPA 에서 어떻게 설정하는지 한번 알아보려고 한다.\n먼저, 복합 키란? 복합키는 말 그대로 여러 개의 컬럼들을 하나로 묶어서 키로 정의한 것을 복합키라고 한다.\n기본적으로 복합 인덱스 라고 하면, 여러 컬럼에 대한 인덱스를 뜻할 것이고, 복합 키라고 하면, 외래 키 혹은 기본 키(PK) 에 대해서 복합적인 컬럼이 그 기준이 되는 것을 뜻한다.\nSpring 에서 복합 PK를 설정하는 방법 일단 두가지 방식으로 접근할 수 있다.\n@IdClass 사용하기 @EmbeddedId 사용하기 주의할 점으로는 두 어노테이션 모두 JPA 1.0(JSR-220)부터 존재했다고 하며, 어느 쪽이 더 좋은 쪽은 아니다! 따라서 저마다의 방식이 있기 때문에 장단점을 살펴볼 필요가 있다.\n그럼 각각에 대한 차이를 알아보자.\n@IdClass 백문이불여일견, 해당 예시 코드부터 보자.\n// ID 클래스 정의 public class OrderItemId implements Serializable { private Long orderId; private Long itemId; // 기본 생성자, equals(), hashCode() 구현 필요 } // 엔티티 클래스 @Entity @IdClass(OrderItemId.class) public class OrderItem { @Id private Long orderId; @Id private Long itemId; // 다른 필드들... } 기본적으로 ID 에 해당되는 클래스를 정의하고, @IdClass, 즉 이 키의 기본키는 이렇게 될 것이다. 라고 정의해주는 것이다.\n@IdClass 의 가장 큰 특징은 엔티티 구현 내부에서 데이터베이스 기본키 필드를 한눈에 확인할 수 있다는 점이다.\n사실상 우리가 ERD 로부터 그대로 구현해야하는 상황일 경우 이런 방식이 도움이 될 것이다.\n하지만 단점으로는, Id 클래스를 만들어정해주어야하는 점, 그로 인해 필드 정의가 중복된다는 점이 있다. 다시말해, 내부구현을 바꾸게되면 동일하게 바꿔줘야한다.\n필드 접근 (조작) 하지만 아래 코드처럼, 직접 필드 접근이 가능하여 데이터베이스에 가까운 조작이 필요할 경우 해당 방식이 유리할지 모른다.\nOrderItem orderItem = new OrderItem(); orderItem.setOrderId(1L); // 직접 필드 접근 orderItem.setItemId(2L); // 직접 필드 접근 조회 일반적인 entityManager를 통한 조회는 아래와 같이 할 수 있다.\n@IdClass 를 통해 Id 값이 클래스를 통해 매핑되었기 때문에, 조회역시 동일한 IdClass 로 해주어야한다.\n// 조회 시 OrderItemId id = new OrderItemId(1L, 2L); OrderItem item = em.find(OrderItem.class, id); 하지만 나는 결국 직접 클래스에 필드를 두번 주입해야한다는 점, 직접 필드 접근을 통해 조작에 예상할 수 없는 부작용이 있는 점 등으로 인해 마음에 들지 않았고, 몇가지 방법을 찾은 끝에 @EmbeddedId 라는 어노테이션이 있음을 알게 됐다.\n@EmbeddedId 이번에도 일단 해당 예시부터 보자.\n// 복합키 클래스 @Embeddable public class OrderItemId implements Serializable { private Long orderId; private Long itemId; // 기본 생성자, equals(), hashCode() 구현 필요 } // 엔티티 클래스 @Entity public class OrderItem { @EmbeddedId private OrderItemId id; // 다른 필드들... } 해당 방식의 가장 큰 특징은 복합 키를 하나의 엔티티로 다룬다는 점이다.\n또한 가장 큰 특징은 내부 필드에 바로 OriderItemId 자체를 삽입한다는 것이다. 그래서 Embeddable 인 것이고, 위 예시의 경우 이렇게 데이터베이스가 매핑된다.\nCREATE TABLE order_item ( order_id BIGINT NOT NULL, -- OrderItemId의 orderId item_id BIGINT NOT NULL, -- OrderItemId의 itemId quantity INTEGER, PRIMARY KEY (order_id, item_id) ); 하지만 실제 JPA로 접근 시에는 해당 키를 사용하는 클래스를 바로 가져와서 Id 필드를 지정해주면 되니, 좀 더 자바 객체에 가까운 설계라고 할 수 있다.\n캡슐화 또한 잘 되어 있어 원하는 구현을 직접 참고할 수 있다.\n또한 실제 내부 쿼리도 하나의 테이블 내에서 같이 이루어지기 때문에 자바 객체로써 객체지향적인 설계를 하면서 동시에 JPA 에게 내부 테이블 접근 방식을 맡길 수 있다. 즉, 굳이 최적화할 필요가 없단 의미이다. (일반적인 의미에선.)\n실제 DB 작업시에는 Id를 담당하는 객체를 분리하여 처리하기 때문이다.\nINSERT INTO order_item (order_id, item_id, quantity) VALUES (1, 2, 10); 필드 접근 (조작) 예를 들면 아래와 같이 각각의 복합키 필드에 따로따로 접근할 필요 없이, IdClass 를 새롭게 정의해야한다. 이로 인해 복합키 클래스는 불변성이 있으면 좋을 것이라 판단한다.\nOrderItemId id = new OrderItemId(1L, 2L); OrderItem orderItem = new OrderItem(); orderItem.setId(id); // 복합키 객체를 통해 접근 조회 조회는 @IdClass 와 동일한 방식으로 접근한다.\n주의 점 별도의 주의점이 있는데 아래와 같다.\n기본 생성자가 있어야 함 equals()와 hashCode() 메서드를 올바르게 구현해야 함 변경 불가능한(immutable) 클래스로 만드는 것을 권장 왜 그렇게 해야할까?\n기본 생성자야 당연히 새롭게 정의한다면 필요할 것이다. Generated 된 변수면 이에 대한 어노테이션을 정의해주면 된다.\n다만, Serializable 인터페이스를 구현해주어야하는데, 왜 직렬화가 가능하도록 만들어야할까?\n식별자 클래스에 직렬화가 필요한 이유 이는 JPA 가 엔티티를 저장 및 조회 시 식별자를 직렬화해서 사용하기 때문이다.\n이 뜻은, 당연히 복합 키에 해당되는 컬럼값들을 직렬화해서 DB에 저장한단 의미가 아니고 JPA 구현체(예: Hibernate)가 내부적으로 엔티티를 관리하는 과정에서 사용한다는 의미이다.\n영속성 컨텍스트를 기준으로 보자.\n간단히 알아보기 : 영속성 컨텍스트란?\n영속성 컨텍스트(Persistence Context)는 JPA가 엔티티를 관리하는 가상의 환경 또는 컨테이너를 뜻한다. 알아서 성능 최적화가 되거나 (1차 캐시) 트랜잭션을 지원한다. 영속성 컨텍스트로 인해 데이터의 영속성이 보장된다. JPA 는 내부적으로 영속성 컨텍스트에서 내부 맵에서 키로 사용된다.\n그렇기 때문에 이것을 직렬화할 필요가 있는 것이다.\n그렇지 않다면 객체로 저장해야하는데, 할당받은 객체의 식별번호값이 실제 데이터베이스 내 해당되는 복합키와 동일성이 보장되지 않기 때문이다.\n그렇기 때문에 Serializable (직렬화 가능한 것) 을 상속받아야하는 것이고, 이는 곧 성능문제 로 이어질 수 있다. 분산 환경 / 캐시 사용에 문제가 될 수 있기 때문이다. 예를 들면 직렬화 불가능하다고 판단될 경우 Mapping 을 못하게 될 것이고 이는 곧 캐시를 쓰지 못하는 결과로 이어질 것이다.\n식별자 클래스에 equals, hashCode가 필요한 이유 그렇다면 equals, hashCode 메서드를 구현해야하는 이유도 동일하게 이해될 것이다.\n이들은 영속성 컨텍스트에서 \b엔티티 간의 동일성 비교를 위해 요구되며, Serializable 과는 독립된 요구사항이다.\n결국 모두 필수사항은 아니나, 성능에 영향이 생길지도 모르기 때문에 되도록이면 구현하도록 하자.\n","permalink":"https://blog.moozeh.org/posts/2025-02-16-spring-jpa-embeddable-%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B3%B5%ED%95%A9-pk-%ED%82%A4-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/","summary":"\u003cp\u003e\u003ca href=\"https://github.com/Kolown-kr/porring-server/pull/9\"\u003ePorring 프로젝트를 진행하면서 엔티티 설정을 마치고,\u003c/a\u003e 복합키에 관한 지적을 받았다.\u003c/p\u003e\n\u003cp\u003eAI를 이용해서 만든 코드인데, 미처 검증하지 못한 부분에 대해서 다시 생각해보게 되었고, 복합 PK 키를 JPA 에서 어떻게 설정하는지 한번 알아보려고 한다.\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"먼저-복합-키란\"\u003e먼저, 복합 키란?\u003c/h2\u003e\n\u003cp\u003e복합키는 말 그대로 여러 개의 컬럼들을 하나로 묶어서 키로 정의한 것을 복합키라고 한다.\u003c/p\u003e\n\u003cp\u003e기본적으로 복합 인덱스 라고 하면, 여러 컬럼에 대한 인덱스를 뜻할 것이고, 복합 키라고 하면, 외래 키 혹은 기본 키(PK) 에 대해서 복합적인 컬럼이 그 기준이 되는 것을 뜻한다.\u003c/p\u003e","title":"[Spring JPA] @Embeddable 을 이용한 복합 PK 키 설정하기"},{"content":"Type 을 정의하는 테이블을 정의해서 매핑하는데, Entity 와 ManyToOne을 쓰면 적절하지 않을 것 같았다.\nENUM 을 쓰면 적절하지 않을 것 같다는 의견을 검색하다가 보았고, 테이블을 정의해서 ENUM 처럼 쓰는게 좋아보일 것이라 판단했는데, Claude 로부터 @Converter 를 써보라는 추천을 받아서 알게 되었고 학습하게 되었다.\n@Converter 란 @Converter 어노테이션은 일종의 컴포넌트형 어노테이션의 일종이다.\n즉, 하나의 클래스에 @Converter 어노테이션에 붙여야하고, 구현해야하는 여러가지의 컨버터 interface 르 가져 각각의 Converter는 여러가지의 종류의 Converter와 느슨하게 결합되어있다.\nAttributeConverter - 가장 일반적, 커스텀 변환 로직 BaseConverter - 기본 타입 변환용 ElementConverter - 컬렉션 요소 변환 EnumConverter - enum ↔ DB 값 변환 일반적인 @Converter 구현 가장 일반적인 AttributeConverter 에 대해 알아보자.\n앞서 언급된 Type 테이블로부터 특정 타입인지 하나의 엔티티에서 바로 조회를 해서 확인하고 싶은 경우가 있다.\n@Enumerated 를 사용할 수도 있겠지만, 데이터베이스 구현 상 별도의 타입을 정의한 테이블에서 관리할 경우, 위와 같이 @Converter 를 사용해서 자연스럽게 매핑할 수도 있다.\n@Entity @Table(name = \u0026#34;reaction_type\u0026#34;) public class ReactionType { @Id @Column(name = \u0026#34;react_code\u0026#34;) private String code; } @Entity @Table(name = \u0026#34;reactions\u0026#34;) public class Reaction { @Id private Long id; @Column(name = \u0026#34;board_id\u0026#34;) private Long boardId; @Column(name = \u0026#34;account_id\u0026#34;) private Long accountId; @Convert(converter = ReactionTypeConverter.class) @Column(name = \u0026#34;react_code\u0026#34;) private ReactionType type; @Column(name = \u0026#34;deleted\u0026#34;) private boolean deleted; } @Converter public class ReactionTypeConverter implements AttributeConverter\u0026lt;ReactionType, String\u0026gt; { @Autowired private ReactionTypeRepository typeRepository; @Override public String convertToDatabaseColumn(ReactionType type) { return type.getCode(); } @Override public TypeEntity convertToEntityAttribute(String code) { return typeRepository.findById(code).orElseThrow(); } } 코드 설명 convertToDatabaseColumn 은 database에 저장할때, convertToEntityAttribute 는 JPA 엔티티로부터 getter 등으로 불러올때 호출되어 리턴되는 값이 반영된다.\nconvertToDatabaseColumn: 엔티티 → DB 저장 시 호출 convertToEntityAttribute: DB → 엔티티 조회 시 호출 (getter 포함) @Converter 의 특징 보통은 일반적인 커스텀 변환 로직이 추가 되기 때문에 엔티티로부터 불러올때 특별한 처리가 필요한 경우에 사용하면 유용하며다.\n하지만, 그런 변환 로직들은 대개 Entity 의 책임 내에서 처리하게 되므로 하나의 Entity의 영역에서 벗어나 공통적인 변환을 위한 변환 계층이 필요할때 사용하게 된다.\n여러 엔티티에서 재사용 가능 특정 타입/값의 일관된 변환 로직 제공 DB 컬럼과 Java 객체 간의 공통 변환 규칙 정의 즉 위와 같은 상황에서만 유용하며, 그 외의 경우에는 다른 방식을 써보는 것을 추천한다.\n왜 써야할까? 그래서 꼭 써야하는 이유에 대한 궁금증이 많았다.\n다른 대안들의 단점 쓸 수 있는 이유로 아래와 같은 대안의 단점이 있었다.\nManyToOne 의 단점\n항상 JOIN이 발생 N+1 문제 가능성 영속성 컨텍스트 관리 필요 Converter 의 장점\nJOIN 없이 직접 값 매핑 단순 코드 참조 시 더 효율적 영속성 컨텍스트 부담 감소 하지만 실제로는 단순한 Type Table 의 경우 ManyToOne이 더 효율적이고 간단하다.\n그래서 실제로 일반적인 대부분의 상황에서는 ManyToOne을 사용한다.\n@Converter 를 사용할 때 : 테이블 캐싱 하지만 ManyToOne 은 매번 조회시 JOIN 이 일어나게 되므로 성능저하가 일어난다.\n따라서, 이런 경우 캐싱을 적용한다. 캐싱은 신이야..\n즉, 타입 테이블을 미리 메모리에 올려서 메모리 내에서 JOIN을 시키는 것이다\u0026hellip;!\n어차피 타입 테이블의 경우 크게 추가되지 않는 경우가 대부분이기 때문에 변화될 일이 적기 때문에 메모리에 올려도 괜찮다고 판단될 경우 올려버릴 수 있는 것이다..!\n@Service public class ReactionTypeCache { private Map\u0026lt;String, ReactionType\u0026gt; cache; @PostConstruct public void init() { cache = reactionTypeRepository.findAll() .stream() .collect(toMap(ReactionType::getCode, type -\u0026gt; type)); } public ReactionType getType(String code) { return cache.get(code); } } 이렇게 별도의 캐시를 두고, 이 Cache 를 Converter 에서 넣어서 사용해볼 수도 있을 것이다!\n그렇게 되면 DB 조회 횟수도 감소되고, 그에 따라 응답시간도 개선될 수 있을 것이다.\n2nd Level cache 이런 종류를 Second Level Cache 라고 부르며, 대개 애플리케이션 수준에서 일어나는 캐싱을 뜻한다.\n왜냐하면 이러한 캐시는 하나의 트랜잭션 범위가 아니기 때문에 영속성 컨텍스트 단위가 아니며, 여러 트랜잭션을 아우르는 정보를 캐싱하기 때문이다.\n결론적으로 캐싱이 필요한 정말로 극한의 상황이 아니라면 자주 쓰진 않을 것 같다\u0026hellip;\n","permalink":"https://blog.moozeh.org/posts/2025-02-07-spring-jpa-converter-%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%8D%A8%EC%95%BC%ED%95%98%EB%8A%94%EA%B0%80/","summary":"\u003cp\u003e\u003ccode\u003eType\u003c/code\u003e 을 정의하는 테이블을 정의해서 매핑하는데, Entity 와 ManyToOne을 쓰면 적절하지 않을 것 같았다.\u003c/p\u003e\n\u003cp\u003eENUM 을 쓰면 적절하지 않을 것 같다는 의견을 검색하다가 보았고, 테이블을 정의해서 ENUM 처럼 쓰는게 좋아보일 것이라 판단했는데, \u003ccode\u003eClaude\u003c/code\u003e 로부터 \u003ccode\u003e@Converter\u003c/code\u003e 를 써보라는 추천을 받아서 알게 되었고 학습하게 되었다.\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"converter-란\"\u003e@Converter 란\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e@Converter\u003c/code\u003e 어노테이션은 일종의 컴포넌트형 어노테이션의 일종이다.\u003c/p\u003e\n\u003cp\u003e즉, 하나의 클래스에 \u003ccode\u003e@Converter\u003c/code\u003e 어노테이션에 붙여야하고, 구현해야하는 여러가지의  컨버터 \u003ccode\u003einterface\u003c/code\u003e 르 가져 각각의 \u003ccode\u003eConverter\u003c/code\u003e는 여러가지의 종류의 Converter와 느슨하게 결합되어있다.\u003c/p\u003e","title":"[Spring JPA] Converter 는 언제 써야하는가"},{"content":"Porring 백엔드를 구현하면서, OAuth 혹은 네이티브 로그인 계정에 대한 ERD 타입을 슈퍼타입과 서브타입으로 정의하였다.\n데이터베이스 상으로만 봤지만, 실제로 어떻게 구현을 해야할까? 단순 쿼리를 한다면 되겠지만, 복잡한 작업이 될 것이며, 쿼리 중간에 예상치 못한 버그가 있을 수 있다. JPA 에서는 어떻게 되는지 알아보자!\n@Inheritance 로 상속하기 다들 알겠지만, ERD 에서 슈퍼타입과 서브타입은 일종의 상속 관계 이다.\nJPA에서의 상속은 @Inheritance 로 구현될 수 있다.\n// SINGLE_TABLE 전략 @Entity @Inheritance(strategy = InheritanceType.SINGLE_TABLE) public abstract class Item { @Id @GeneratedValue private Long id; private String name; } // JOINED 전략 - @DiscriminatorColumn 선택사항 @Entity @Inheritance(strategy = InheritanceType.JOINED) public abstract class Vehicle { @Id @GeneratedValue private Long id; } @Entity public class Car extends Vehicle { private String model; } // TABLE_PER_CLASS 전략 - 자바에서 상속 관계 유지 @Entity @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS) public abstract class Payment { @Id @GeneratedValue private Long id; } @Entity public class CardPayment extends Payment { private String cardNumber; } 일반적인 JoinedColumn 등과의 차이점은, PK 값을 공유한다는 점이다.\n상속을 통해 PK는 공유할 수 있으며, 코드의 중복을 줄일 수 있는 장점이 있다.\n상속 전략 그렇다면, 실제 데이터베이스에서는 어떻게 구현이 될까?\n그것은 @Inheritance 의 상속 전략에 따라 결정된다.\n@Inheritance 어노테이션의 strategy 속성을 아래와 같이 세가지 방식으로 정할 수 있다.\n1. JOINED JOINED 속성은 특정 자식 타입을 부모와 자식 테이블의 JOIN으로 받아오는 전략이다.\n따라서 데이터의 정합성은 해당 방식이 가장 만족시켜줄 수 있다고 볼 수 있다.\n하지만, JOIN 으로 인한 예기치 못한 성능 저하를 고려해야할 것이다.\n// 부모 테이블 package com.kolown.porring.account; import com.kolown.porring.common.BaseTimeEntity; import jakarta.persistence.*; @Entity @Table(name = \u0026#34;accounts\u0026#34;) @Inheritance(strategy = InheritanceType.JOINED) @DiscriminatorColumn(name = \u0026#34;sub_type\u0026#34;) public class Account extends BaseTimeEntity { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long accountId; } // 자식 테이블(서브타입) package com.kolown.porring.account; import jakarta.persistence.*; @Entity @Table(name = \u0026#34;email_accounts\u0026#34;) public class EmailAccount extends Account { private String email; private String password; } 실제 테이블 생성은 아래와 같이 되고, 데이터 조회 시 두 테이블이 JOIN 된다.\nCREATE TABLE accounts ( account_id BIGINT PRIMARY KEY, sub_type VARCHAR(31), created_at TIMESTAMP, -- BASETIME ENTITY 로 인한 생성 updated_at TIMESTAMP ); CREATE TABLE email_accounts ( account_id BIGINT PRIMARY KEY, email VARCHAR(255), password VARCHAR(255), FOREIGN KEY (account_id) REFERENCES accounts(account_id) ); 2. TABLE_PER_CLASS 이 방식은 애초부터 부모타입의 테이블은 없으며, 서브타입별로 테이블을 분리하여 보관하는 전략이다.\n그렇기 때문에 앞서 이야기한 방식과는 달리 정합성을 지키지 않는다.\n하지만, 상속 관계를 유지하는 것은 JPA 에게 있기 때문에 실제로 사용할 때에는 JOINED 방식처럼 사용해도 큰 차이가 없다.\n@Entity @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS) public abstract class Vehicle { @Id @GeneratedValue private Long id; private String name; } @Entity public class Car extends Vehicle { private String model; } @Entity public class Airplane extends Vehicle { private String flightNumber; } -- 애초부터 별도의 테이블로 형성된 모습. 하지만 CREATE TABLE car ( id BIGINT PRIMARY KEY, name VARCHAR(255), -- 부모의 컬럼 model VARCHAR(255) -- Car의 컬럼 ); CREATE TABLE airplane ( id BIGINT PRIMARY KEY, name VARCHAR(255), -- 부모의 컬럼 flight_number VARCHAR(255) -- Airplane의 컬럼 ); 3. SINGLE_TABLE 하나의 테이블에 모든 정보를 다 넣는 전략이다.\n조인이 필요 없어서 조회 성능이 빠르나, 자식 엔티티의 컬럼은 모두 null 을 허용해야한다.\n실제로, 코드만 보면 별 차이가 없음을 느낄 것이다.\n@Entity @Inheritance(strategy = InheritanceType.SINGLE_TABLE) @DiscriminatorColumn(name = \u0026#34;vehicle_type\u0026#34;) public abstract class Vehicle { @Id @GeneratedValue private Long id; private String name; } @Entity @DiscriminatorValue(\u0026#34;CAR\u0026#34;) public class Car extends Vehicle { private String model; } @Entity @DiscriminatorValue(\u0026#34;AIRPLANE\u0026#34;) public class Airplane extends Vehicle { private String flightNumber; } 하지만 실제로는 아래와 같이 정의가 된다. 완전 딴판이다.\nCREATE TABLE vehicle ( id BIGINT PRIMARY KEY, dtype VARCHAR(31), model VARCHAR(255), -- Car의 컬럼 flight_number VARCHAR(255), -- Airplane의 컬럼 ); @DiscriminatorColumn Discriminator 란 한국어로 판별자를 뜻한다. 진위를 가리는 무언가를 뜻한다.\n즉, 그렇다면 이렇게 해석할 수 있겠다.\n진위를 가리는 컬럼\n다시 말해 현재 찾아보는 엔티티가 정확히 어떤 타입인지 판별하는 컬럼을 정의하겠다는 의미이다.\n@DiscriminiatorValue 명시적으로 구분자 컬럼을 정의해준다. 부모 테이블의 컬럼 이름이 다르게 매핑하고 싶을 경우 사용하면 된다.\n자세한 예시는 위 SINGLE_TABLE 예시를 살펴보자.\n@DiscriminatorColumn 은 필수인가? 오늘 코드리뷰를 하다가 위 제목과 같은 얘기가 오갔다.\n결론적으로 꼭 그렇지 않지만, @DiscriminatorColumn 을 사용해서 얻을 수 있는 이점은 아래와 같다.\nSINGLE TABLE 사용 시에는 필수 반정규화를 어쩔 수 없이 해야하는 경우, 하나의 테이블 내에서 구분자를 기준으로 JPA가 값을 받아와야하기 때문에, 반정규화를 할 때에는 필수로 지목해주어야한다.\n그 외에는 필수가 아니지만, 구별자를 위해선 명시해두면 좋다.\n명시적으로 어떤 컬럼값으로 연결되는지 확인할 수 있다. 그 다음은 코드의 가독성이 있을 수 있다.\n사실 어떤 테이블이건 간에 관계 에 대한 문제는 관계 유형에 따라 달라진다.\n상속이라는 문제도 1:1 관계 매핑에 해당되는 문제이기 때문이다.\n그렇기에 실제로 판별자를 매번 매핑할 필욘 없겠지만, 우리가 코드를 읽을 때, 아, 이 컬럼을 바탕으로 두 테이블 사이에는 상속 관계가 있구나! 정도는 확인하고 넘어갈 수 있다.\n구분자 컬럼을 정의할 필요가 없다. 구분자 컬럼을 정의할 필요가 없어서 데이터의 무결성을 지키는 데에 도움이 된다.\n이게 무슨 뜻이냐? 만약에 order_id 라는 구분자로 처리되고, 우리는 이를 JPA 에게 상속을 통해 맡기고 싶은 상황이 된다고 해보자.\n이때, 우리는 @DiscriminatorColumn 으로 구분자 컬럼을 정의해주면, 실제 Entity 필드로 해당 컬럼을 정의할 필요가 없어지게 된다. 컬럼의 이름을 넘겨줌으로써 JPA에게 책임이 넘어가기 때문이다.\n그렇기에 해당 필드변수가 Spring Boot 코드 내에서 조작될 일이 없어지므로 해당 연결에 대한 데이터 무결성은 보장된다.\n결론 테이블 JOIN을 하는 경우와 테이블별로 그냥 따로 만들 때에는 DiscriminatorColumn은 필수가 아니며,\nInheritance를 통해 서로 다른 테이블(TABLE_PER_CLASS)인 경우에도 하위타입인 것처럼 자바 코드에서 사용할 수 있다!\n","permalink":"https://blog.moozeh.org/posts/2025-02-04-spring-jpa-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%81%EC%86%8D%EC%97%90-%EA%B4%80%ED%95%98%EC%97%AC/","summary":"\u003cp\u003e\u003ccode\u003ePorring\u003c/code\u003e 백엔드를 구현하면서, \u003ccode\u003eOAuth\u003c/code\u003e 혹은 네이티브 로그인 계정에 대한 ERD 타입을 \u003ca href=\"https://blog.moozeh.org/posts/erd-%EC%8A%88%ED%8D%BC%ED%83%80%EC%9E%85-%EC%84%9C%EB%B8%8C%ED%83%80%EC%9E%85%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90\"\u003e슈퍼타입과 서브타입\u003c/a\u003e으로 정의하였다.\u003c/p\u003e\n\u003cp\u003e데이터베이스 상으로만 봤지만, 실제로 어떻게 구현을 해야할까? 단순 쿼리를 한다면 되겠지만, 복잡한 작업이 될 것이며, 쿼리 중간에 예상치 못한 버그가 있을 수 있다. \u003ccode\u003eJPA\u003c/code\u003e 에서는 어떻게 되는지 알아보자!\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"inheritance-로-상속하기\"\u003e@Inheritance 로 상속하기\u003c/h2\u003e\n\u003cp\u003e다들 알겠지만, ERD 에서 슈퍼타입과 서브타입은 일종의 \u003ccode\u003e상속 관계\u003c/code\u003e 이다.\u003c/p\u003e\n\u003cp\u003eJPA에서의 상속은 \u003ccode\u003e@Inheritance\u003c/code\u003e 로 구현될 수 있다.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// SINGLE_TABLE 전략\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nd\"\u003e@Entity\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nd\"\u003e@Inheritance\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estrategy\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eInheritanceType\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eSINGLE_TABLE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eItem\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Id\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nd\"\u003e@GeneratedValue\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// JOINED 전략 - @DiscriminatorColumn 선택사항\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nd\"\u003e@Entity\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nd\"\u003e@Inheritance\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estrategy\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eInheritanceType\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eJOINED\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eVehicle\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Id\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nd\"\u003e@GeneratedValue\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nd\"\u003e@Entity\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCar\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eVehicle\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emodel\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// TABLE_PER_CLASS 전략 - 자바에서 상속 관계 유지\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nd\"\u003e@Entity\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nd\"\u003e@Inheritance\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estrategy\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eInheritanceType\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eTABLE_PER_CLASS\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePayment\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Id\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nd\"\u003e@GeneratedValue\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nd\"\u003e@Entity\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCardPayment\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ePayment\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecardNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e일반적인 \u003ccode\u003eJoinedColumn\u003c/code\u003e 등과의 차이점은, \u003ccode\u003ePK\u003c/code\u003e 값을 공유한다는 점이다.\u003c/p\u003e","title":"[Spring JPA] 테이블 상속에 관하여"},{"content":" JPA 에 대해 기본적인 내용을 훑는다. 기본적인 내용을 알고 있다면 무시해도 좋다.\nJPA 를 사용하는 이유 JPA를 사용하는 이유는 쿼리를 수행하는 테이블의 개수가 복잡해질수록 간단하게 코드 구현이 가능하기 때문이다.\nEntity의 정의 JPA를 사용하면, Bean 데이터를 직접 테이블로 매핑할 수 있는데, 이때 이 Bean을 엔티티 라고 부르게 된다. 즉, Entity 는 Bean 이다.\n추가적으로 더 나아가면 Nest.js 에서 엔티티를 어떻게 정의할지 생각해볼 수 있을 것이다. 꼭 Database 코드에 있어야하는 이유가 없고, Bean 을 어떻게 활용할지 생각해보면 엔티티를 사용하는데 있어서 이해가 빠를 것이다.\n기본적으로 나는 Nest.js부터 얕게 공부했기에 Entity 와 DTO 를 어떻게 써야할지 헷갈렸었다.\n이때, Entity는 데이터베이스와 매핑이 되는 Bean 이기 때문에, Primary Key 가 존재해야할 것이다. 이는 @Id 어노테이션으로 명시해줄 수 있다.\n각각의 컬럼과 속성을 연결해주는데 @Column 으로 명시적으로 연결해줄 수 있다. 자동 연결도 지원하니 편하다!\npackage org.moozeh.learn_spring.app16_jpa; import jakarta.persistence.*; /** * jakarta.persistence.Entity 도 있고, org.hibernate.annotations 도 있다. * 이는 결국 구현체가 hibernate 이기 때문이다. * * */ @Entity(name=\u0026#34;courses\u0026#34;) public class Course { @Id private long id; @Column(name=\u0026#34;name\u0026#34;) // 같은 이름으로 매칭된다면 이 값(annotation 전체)은 사실 불필요하다. private String name; // @Column(name=\u0026#34;author\u0026#34;) private String author; public Course() {} public Course(long id, String name, String author) { this.id = id; this.name = name; this.author = author; } public long getId() { return id; } public String getName() { return name; } public String getAuthor() { return author; } @Override public String toString() { return \u0026#34;Course{\u0026#34; + \u0026#34;id=\u0026#34; + id + \u0026#34;, name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, author=\u0026#39;\u0026#34; + author + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#39;}\u0026#39;; } } 이렇게 하여, 테이블 - 엔티티 간 \u0026lsquo;매핑\u0026rsquo;을 이용해서 값을 삽입하고 조작할 수 있게 되는 것이다.\nJPA Repository 정의하기 다음으로 엔티티가 정의되면, 이를 이용해 repository 를 정의할 수 있다.\nJPA에서는 Entity 와 레포지토리를 실제로 매핑시키려면, EntityManager 를 불러오면 된다. Entity 매니저는 말그대로 엔티티와 관련된 작업들이 수많이 정의되어있는 매니징 클래스이다.\n또한, 기본적으로 트랜잭션이 없으면 하면 에러가 생긴다.\n기본적으로 이를 해결하는 방법은 @Transactional 어노테이션을 정의하여 트랜잭션의 범위를 설정해주면 된다.\n즉, 기본적으로 JPA 레포지토리 코드는 트랜잭션을 기반으로 작동해야 함을 의미한다.\npackage org.moozeh.learn_spring.app16_jpa; import jakarta.persistence.EntityManager; import jakarta.persistence.PersistenceContext; import jakarta.transaction.Transactional; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Repository; @Repository @Transactional public class CourseJpaRepository { @PersistenceContext private EntityManager entityManager; /** * Entity 라고 해서, 데이터베이스에서만 만들 필요는 없다. * * 기존 Bean으로 사용하듯이 그냥 사용하면 되는 것이다. * @param course */ public void insert(Course course) { entityManager.merge(course); // 이렇게 하면, 엔티티 내 Bean과 매핑된 데이터베이스에 알아서 저장할 것이다! 정말 편하다. } public Course findById(long id) { return entityManager.find(Course.class, id); // 두번째 인자로 PK가 들어간다. // 그렇다면, PK가 아닌 다른 인덱싱된 레코드로 검색하려면..? } public void deleteById(long id) { Course course = entityManager.find(Course.class, id); entityManager.remove(course); } } setter 가 사라졌다. 하나 중요한 점은 setter 가 필요하지 않게 되었다는 점이다.\n이 뜻은 다시 말해 Bean이 초기화될 때, 값 Setting을 미리 전부 마칠 수 있게 된 것을 의미한다.\nJDBC로 직접할 때에는 setter 가 있어야 jdbcTemplate에서 정보를 받아올 수 있었다.\nJPA를 사용함으로써 Entity 생성 시점이 JPA 내에서 캡슐화되었다고 볼 수 있겠다. 이것이 Spring Data JPA의 특징이다.\n영속성 컨텍스트 단순히 Autowiring 하는 것보다 더 좋은 방식이 있는데, 이것이 Jpa의 바로 그 영속성 컨텍스트 이다.\n이에 관해서는 상세하게 다시 알아볼 예정이다.\n디버깅 수행하기 application.properties 값으로 아래와 같은 값을 추가하면, 생성된 SQL을 확인할 수 있다.\nspring.jpa.show-sql=true 그렇다면, CommandLineRunner 를 이용해서 스프링이 시작되자마자 특정 함수를 실행시켜서 확인해보자.\npackage org.moozeh.learn_spring.app16_jpa; import org.springframework.boot.CommandLineRunner; import org.springframework.stereotype.Component; @Component public class CourseJpaCommandLineRunner implements CommandLineRunner { private final CourseJpaRepository courseJpaRepository; public CourseJpaCommandLineRunner(CourseJpaRepository courseJpaRepository) { this.courseJpaRepository = courseJpaRepository; } @Override public void run(String... args) throws Exception { this.courseJpaRepository.insert(new Course(1, \u0026#34;Learn AWS\u0026#34;, \u0026#34;moozeh\u0026#34;)); this.courseJpaRepository.insert(new Course(2, \u0026#34;Learn DevOps\u0026#34;, \u0026#34;moozeh\u0026#34;)); this.courseJpaRepository.insert(new Course(3, \u0026#34;Learn Spring\u0026#34;, \u0026#34;moozeh\u0026#34;)); this.courseJpaRepository.deleteById(1); System.out.println(this.courseJpaRepository.findById(2)); } } 이렇게, insert 문 3개와 delete 문 1개, 그리고 select 문 1개를 실행시켜봤다. 아래처럼 실행되고 있다.\n이때, show-sql 값이 true 라면, 각각의 실제로 실행되는 쿼리문을 보여준다.\nHibernate: select c1_0.id,c1_0.author,c1_0.name from courses c1_0 where c1_0.id=? Hibernate: insert into courses (author,name,id) values (?,?,?) Hibernate: select c1_0.id,c1_0.author,c1_0.name from courses c1_0 where c1_0.id=? Hibernate: insert into courses (author,name,id) values (?,?,?) Hibernate: select c1_0.id,c1_0.author,c1_0.name from courses c1_0 where c1_0.id=? Hibernate: insert into courses (author,name,id) values (?,?,?) Hibernate: select c1_0.id,c1_0.author,c1_0.name from courses c1_0 where c1_0.id=? Hibernate: delete from courses where id=? Hibernate: select c1_0.id,c1_0.author,c1_0.name from courses c1_0 where c1_0.id=? 또한, 분명 스키마에서는 course 라는 테이블을 정의했는데, c1_0.id 와 같은 테이블에서 찾고 있다.\n이는 테이블의 별칭(alias) 으로, Hibernate 에서 자체적으로 테이블 명을 관리하고 있음을 알 수 있다.\n","permalink":"https://blog.moozeh.org/posts/2025-01-31-spring-jpa%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90/","summary":"\u003c!-- draft 값을 false 혹은 제거해야 게시됩니다!!! --\u003e\n\u003cp\u003eJPA 에 대해 기본적인 내용을 훑는다. 기본적인 내용을 알고 있다면 무시해도 좋다.\u003c/p\u003e\n\u003c!-- more --\u003e \n\u003ch2 id=\"jpa-를-사용하는-이유\"\u003eJPA 를 사용하는 이유\u003c/h2\u003e\n\u003cp\u003eJPA를 사용하는 이유는 쿼리를 수행하는 테이블의 개수가 복잡해질수록 간단하게 코드 구현이 가능하기 때문이다.\u003c/p\u003e\n\u003ch2 id=\"entity의-정의\"\u003eEntity의 정의\u003c/h2\u003e\n\u003cp\u003eJPA를 사용하면, Bean 데이터를 직접 테이블로 매핑할 수 있는데, 이때 이 Bean을 엔티티 라고 부르게 된다. 즉, \u003ccode\u003eEntity\u003c/code\u003e 는 \u003ccode\u003eBean\u003c/code\u003e 이다.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e추가적으로 더 나아가면 Nest.js 에서 엔티티를 어떻게 정의할지 생각해볼 수 있을 것이다.\u003c/strong\u003e  꼭 Database 코드에 있어야하는 이유가 없고, \u003ccode\u003eBean\u003c/code\u003e 을 어떻게 활용할지 생각해보면 엔티티를 사용하는데 있어서 이해가 빠를 것이다.\u003c/p\u003e","title":"[Spring JPA] JPA에 대해 알아보자"},{"content":" 마인크래프트 플러그인을 만들면서 기존 JDBC 를 썼다. 그런데, Spring JDBC 와는 무슨 차이일까. 그 차이점을 알아보자.\nJDBC란 JDBC는 1997년 Sun Microsystems (현재 Oracle) 에서 개발된 데이터베이스 접근 드라이버다.\n사실상 자바 플랫폼의 핵심 API로 시작되어 현재까지 표준 데이터베이스 접근 방식으로 사용되고 있다.\nSpring JDBC란 Spring 개발팀이 Spring Framework 1.0 의 일부로 출시하며 같이 개발된 모듈로, JDBC 의 복잡성을 줄이고 생산성을 높이기 위해 만들어졌다.\n따라서, Spring JDBC 라고 해서 특별한게 있는게 아닌, 기존 JDBC 의 래퍼라고 생각하면 좋다.\nJdbcTemplate 기존 JDBC 에서는 PreparedStatement 로 쿼리문을 준비하여 세팅하는 것과 달리, Spring JDBC 에서는 JdbcTemplate 이라는 클래스를 사용한다.\n이때, Spring JDBC 가 왜 스프링 모듈인지 알 수 있는데, JdbcTemplate 는 Spring Bean 으로부터 받아와서 주입되기 때문이다.\n따라서 Repository 코드를 만들때 아래처럼 만들 수 있다.\n@Repository public class CourseJdbcRepository { private final JdbcTemplate jdbcTemplate; private static String INSERT_QUERY = \u0026#34;\u0026#34;\u0026#34; INSERT INTO course values (?, ?, ?); \u0026#34;\u0026#34;\u0026#34;; public CourseJdbcRepository(JdbcTemplate jdbcTemplate) { this.jdbcTemplate = jdbcTemplate; } public void insert(Course course) { jdbcTemplate.update(INSERT_QUERY, course.getId(), course.getName(), course.getAuthor() ); } } 대표적인 차이점 Connection 을 얻어오는 코드가 추상화되어 개발자로 하여금 신경을 덜 쓰게 만들어준다.\n리소스 해제, 예외 처리를 알아서 해준다.\n또한, ResultSet 을 자동적으로 처리해주어 편리하다.\n// 전통적인 JDBC Connection conn = null; PreparedStatement pstmt = null; try { conn = dataSource.getConnection(); pstmt = conn.prepareStatement(\u0026#34;INSERT INTO users (name, age) VALUES (?, ?)\u0026#34;); pstmt.setString(1, \u0026#34;홍길동\u0026#34;); pstmt.setInt(2, 20); pstmt.executeUpdate(); } finally { if (pstmt != null) pstmt.close(); if (conn != null) conn.close(); } // 스프링 JDBC jdbcTemplate.update(\u0026#34;INSERT INTO users (name, age) VALUES (?, ?)\u0026#34;, \u0026#34;홍길동\u0026#34;, 20); 무엇을 써야할까요? 현대 웹 애플리케이션 개발에서는 스프링 JDBC를 사용하는 것이 좋다.\n다만, 더 높은 추상화를 제공하는 JPA나 MyBatis 같은 ORM/SQL 매퍼를 고려해볼 수도 있겠다.\n어느 쪽이 정답은 아닌데, 그것은 비즈니스 로직이나 데이터베이스 사정에 따라 달라진다.\nJDBC가 좋을 경우 (단순 쿼리가 좋을 경우) SQL을 직접 작성하고 싶을 경우 간단한 CRUD 작업일 경우 (즉, 억지로 JPA를 사용하는건 손해일 수도 있다.) 레거시 시스템과의 통합 (거의 적음) JPA/MyBatis 가 좋을 경우 객체 지향적인 도메인 모델링이 될 경우 복잡한 객체 관계를 다룰 경우 SQL 작성이 싫을 때 ","permalink":"https://blog.moozeh.org/posts/2025-01-29-spring-jdbc%EC%9D%98-%ED%8A%B9%EC%A7%95/","summary":"\u003c!-- truncate --\u003e\n\u003cp\u003e마인크래프트 플러그인을 만들면서 기존 \u003ccode\u003eJDBC\u003c/code\u003e 를 썼다. 그런데, \u003ccode\u003eSpring JDBC\u003c/code\u003e 와는 무슨 차이일까. 그 차이점을 알아보자.\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"jdbc란\"\u003eJDBC란\u003c/h2\u003e\n\u003cp\u003eJDBC는 1997년 Sun Microsystems (현재 Oracle) 에서 개발된 데이터베이스 접근 드라이버다.\u003c/p\u003e\n\u003cp\u003e사실상 자바 플랫폼의 핵심 API로 시작되어 현재까지 표준 데이터베이스 접근 방식으로 사용되고 있다.\u003c/p\u003e\n\u003ch2 id=\"spring-jdbc란\"\u003eSpring JDBC란\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eSpring\u003c/code\u003e 개발팀이 \u003ccode\u003eSpring Framework 1.0\u003c/code\u003e 의 일부로 출시하며 같이 개발된 모듈로, \u003ccode\u003eJDBC\u003c/code\u003e 의 복잡성을 줄이고 생산성을 높이기 위해 만들어졌다.\u003c/p\u003e\n\u003cp\u003e따라서, \u003ccode\u003eSpring JDBC\u003c/code\u003e 라고 해서 특별한게 있는게 아닌, \u003cstrong\u003e기존 \u003ccode\u003eJDBC\u003c/code\u003e 의 래퍼\u003c/strong\u003e라고 생각하면 좋다.\u003c/p\u003e","title":"[Spring] Spring JDBC의 특징"},{"content":"스프링에서 사용하는 로깅 레벨에 대해서 간략히 알아보자.\n각 로그 단계 각 로그 단계는 아래와 같이 구성되어 있다.\ntrace debug info warning error off 위에서부터 출력을 많이하고, 가장 아래가 출력을 적게한다고 생각하면 쉽다.\n스프링에서는 해당 로그 단계를 출력 설정하려면, application.properties 에 아래와 같이 설정값을 추가한다.\nlogging.level.org.springframework=trace trace 모든 로그를 출력한다.\n따라서, 어떤 시나리오의 전체 로깅을 보고 싶다면, trace 레벨로 설정하자.\n하지만, trace는 애플리케이션의 가장 낮은 수준의 로그까지 출력하기에 성능에 영향을 줄 수 있음을 인지하자.\n프로덕트를 개발하는데 있어서 구체적인 문제해결이 필요할 경우 사용하자.\ndebug debug 단계의 로그와 아래 info, warning, error 단계의 에러의 차이점은 무엇인가?\ndebug는 오류가 없더라도, 상세한 내부동작을 추적하고 문제를 해결하기 위해 출력되는 로그 정보들을 해당 레벨로 출력하게 한다.\n따라서, debug 단계의 로깅 레벨에선 왠만한 내용을 출력한다고 보면 되고, 일반적인 개발환경에서는 debug로 설정하게 된다.\ninfo 일반적인 로그 정보를 출력하며, warning, error 의 경우도 출력하게 된다. 따라서 일반적인 프로덕션 환경에서는 해당 레벨로 사용하게 된다.\nwarning 프로그램에 심각한 문제는 주지 않지만, 말 그대로 경고하는 로그들을 출력하는 레벨이다. warning 또한 하위 단계의 로그 내용을 포함하게 된다. warning, error 단계 로그들을 출력하게 된다.\nerror 프로그램을 돌아가는데 있어서 말 그대로 오류가 일어났을 때 출력되는 로그 단계이다.\noff 말 그대로 로깅을 하지 않는다!\n","permalink":"https://blog.moozeh.org/posts/2025-01-28-spring-%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%A1%9C%EA%B1%B0%EC%9D%98-%EB%A1%9C%EA%B9%85-%EB%A0%88%EB%B2%A8/","summary":"\u003cp\u003e스프링에서 사용하는 로깅 레벨에 대해서 간략히 알아보자.\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch2 id=\"각-로그-단계\"\u003e각 로그 단계\u003c/h2\u003e\n\u003cp\u003e각 로그 단계는 아래와 같이 구성되어 있다.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etrace\u003c/li\u003e\n\u003cli\u003edebug\u003c/li\u003e\n\u003cli\u003einfo\u003c/li\u003e\n\u003cli\u003ewarning\u003c/li\u003e\n\u003cli\u003eerror\u003c/li\u003e\n\u003cli\u003eoff\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e위에서부터 출력을 많이하고, 가장 아래가 출력을 적게한다고 생각하면 쉽다.\u003c/p\u003e\n\u003cp\u003e스프링에서는 해당 로그 단계를 출력 설정하려면, \u003ccode\u003eapplication.properties\u003c/code\u003e 에 아래와 같이 설정값을 추가한다.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003elogging.level.org.springframework=trace\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"trace\"\u003etrace\u003c/h4\u003e\n\u003cp\u003e모든 로그를 출력한다.\u003c/p\u003e\n\u003cp\u003e따라서, 어떤 시나리오의 전체 로깅을 보고 싶다면, trace 레벨로 설정하자.\u003c/p\u003e\n\u003cp\u003e하지만, trace는 애플리케이션의 가장 낮은 수준의 로그까지 출력하기에 성능에 영향을 줄 수 있음을 인지하자.\u003c/p\u003e","title":"[Spring] Spring 에서 사용하는 로거의 로깅 레벨"},{"content":" Docusaurus 문서블로그를 만들고 있는데, 빌드 설정 성능 최적화를 하다가, 아래와 같은 오류를 찾을 수 있었다.\n![[Pasted image 20250125190702.png]]\n즉, 직역해보면 실제로 \u0026lt;p\u0026gt; 태그를 연 적이 없는데 닫힌다는 의미이다.\n실제로 내 프로젝트에서는 열리고 닫히는 태그는 모두 코드 에디터가 확인해서 오류가 없던 상황이었다.\n도대체 무슨 일일까?\n원인 나는 몰랐던 사실인데, \u0026lt;p\u0026gt; 태그 안에 블록 레벨 요소(예: \u0026lt;div\u0026gt;, \u0026lt;table\u0026gt;, \u0026lt;h1\u0026gt;-\u0026lt;h6\u0026gt; 등)가 포함되면 브라우저는 자동으로 \u0026lt;p\u0026gt; 태그를 닫는다.\n이로 인해 실제로 닫는 태그가 있더라도 HTML 파서는 이미 닫힌 것으로 간주하여 \u0026ldquo;No p element in scope but a p end tag seen\u0026rdquo; 오류가 발생할 수 있다.\n해결 방법 \u0026lt;p\u0026gt; 태그를 \u0026lt;div\u0026gt;로 대체하기\n블록 레벨 요소를 \u0026lt;p\u0026gt; 태그 밖으로 이동하기\n인라인 요소만 \u0026lt;p\u0026gt; 태그 내부에 사용하기\n예시 잘못된 코드:\n\u0026lt;p\u0026gt; \u0026lt;div\u0026gt;내용\u0026lt;/div\u0026gt; \u0026lt;/p\u0026gt; 올바른 코드:\n\u0026lt;div\u0026gt; \u0026lt;p\u0026gt;내용\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; 이 문제는 MDX나 마크다운 컴파일 과정에서도 발생할 수 있다.\n따라서, 문서 작성 시 블록 레벨 요소를 사용할 땐 \u0026lt;p\u0026gt; 태그를 조심히 사용하도록 하자.\n","permalink":"https://blog.moozeh.org/posts/2025-01-25-%EB%AA%B0%EB%9E%90%EB%8D%98-html-p-%ED%83%9C%EA%B7%B8%EC%97%90-%EB%8C%80%ED%95%9C-%EC%82%AC%EC%8B%A4/","summary":"\u003c!-- truncate --\u003e\n\u003cp\u003e\u003ccode\u003eDocusaurus\u003c/code\u003e 문서블로그를 만들고 있는데, 빌드 설정 성능 최적화를 하다가, 아래와 같은 오류를 찾을 수 있었다.\u003c/p\u003e\n\u003cp\u003e![[Pasted image 20250125190702.png]]\u003c/p\u003e\n\u003cp\u003e즉, 직역해보면 실제로 \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e 태그를 연 적이 없는데 닫힌다는 의미이다.\u003c/p\u003e\n\u003cp\u003e실제로 내 프로젝트에서는 열리고 닫히는 태그는 모두 코드 에디터가 확인해서 오류가 없던 상황이었다.\u003c/p\u003e\n\u003cp\u003e도대체 무슨 일일까?\u003c/p\u003e\n\u003ch2 id=\"원인\"\u003e원인\u003c/h2\u003e\n\u003cp\u003e나는 몰랐던 사실인데, \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e 태그 안에 블록 레벨 요소(예: \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;table\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;h1\u0026gt;-\u0026lt;h6\u0026gt;\u003c/code\u003e 등)가 포함되면 브라우저는 자동으로 \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e 태그를 닫는다.\u003c/p\u003e\n\u003cp\u003e이로 인해 실제로 닫는 태그가 있더라도 HTML 파서는 이미 닫힌 것으로 간주하여 \u0026ldquo;No p element in scope but a p end tag seen\u0026rdquo; 오류가 발생할 수 있다.\u003c/p\u003e","title":"몰랐던 HTML p 태그에 대한 사실"},{"content":" @Component 기본적으로 스프링의 @Bean 을 나타내며, 범용적으로 사용된다.\n모든 스프링의 Stereotype Annotation 의 토대가 된다.\n@Service 비즈니스 로직을 표시할 때 사용되는 @Component이다.\n클래스에 특정 비즈니스 로직을 작성했다면, 이 어노테이션을 사용하자!\n@Service public class BusinessCalculationService { private final DataService dataService; // write access modifier every time. public BusinessCalculationService(DataService dataService) { this.dataService = dataService; } public int findMax() { return Arrays.stream(dataService.retrieveData()).max().orElse(0); } } @Controller REST API 에서 컨트롤러를 정의하는데 쓰인다.\n@Repository 어떤 Bean 이 데이터 베이스 내 데이터를 조작하는 경우, @Repository 라고 표시하여 이를 알릴 수 있다.\nMongoDBService 의 목적이 데이터베이스와 통신하여 데이터를 조작하는 것이 목적임을 이를 알려주는 것이다.\n@Repository @Primary public class MongoDbDataService implements DataService { @Override public int[] retrieveData() { return new int[] {1, 2, 3}; } } 그 외 실제로 @Component 이외에도 이렇게 따로 정의된 어노테이션이 많다는 것이다.\n최대한 구체적인 어노테이션을 쓰는 게 좋다.\n그 이유는, 각각의 클래스가 어떤 역할을 하는지 명시하여 내가 어떤 의도를 가지고 했는지 알려줄 수 있기 때문이다. 즉, 정보가 추가되는 것이다.\n나중에 AOP 를 사용하여 부가적인 동작을 내려줄 수 있다.\n예를들어, @Repository 어노테이션이 있다면 이후에 JDBC 예외 변환이 가능하다.\n","permalink":"https://blog.moozeh.org/posts/2025-01-25-spring-stereotype-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EB%93%A4%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90/","summary":"\u003c!-- truncate --\u003e\n\u003ch2 id=\"component\"\u003e@Component\u003c/h2\u003e\n\u003cp\u003e기본적으로 스프링의 \u003ccode\u003e@Bean\u003c/code\u003e 을 나타내며, 범용적으로 사용된다.\u003c/p\u003e\n\u003cp\u003e모든 스프링의 \u003ccode\u003eStereotype Annotation\u003c/code\u003e 의 토대가 된다.\u003c/p\u003e\n\u003ch2 id=\"service\"\u003e@Service\u003c/h2\u003e\n\u003cp\u003e비즈니스 로직을 표시할 때 사용되는 \u003ccode\u003e@Component\u003c/code\u003e이다.\u003c/p\u003e\n\u003cp\u003e클래스에 특정 비즈니스 로직을 작성했다면, 이 어노테이션을 사용하자!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nd\"\u003e@Service\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eBusinessCalculationService\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDataService\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edataService\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// write access modifier every time.\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eBusinessCalculationService\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDataService\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edataService\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003edataService\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edataService\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003efindMax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eArrays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estream\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edataService\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eretrieveData\u003c/span\u003e\u003cspan class=\"p\"\u003e()).\u003c/span\u003e\u003cspan class=\"na\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"na\"\u003eorElse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"controller\"\u003e@Controller\u003c/h2\u003e\n\u003cp\u003eREST API 에서 컨트롤러를 정의하는데 쓰인다.\u003c/p\u003e","title":"[Spring] Spring Stereotype 어노테이션들에 대해 알아보자"},{"content":" 네이버 부스트캠프 9기 가 끝난 후, 안드로이드 팀의 그룹프로젝트 Porring 에 리팩토링 프로젝트에 참여하여 백엔드로 참여하면서 생긴 일이다.\n슈퍼타입 - 서브타입 관계란? ERD의 특정 관계를 뜻하는데, 정확하게는 객체지향의 상속 개념과 유사한 데이터 모델링 패턴이다.\n슈퍼타입 예를 들어, 슈퍼타입은 부모 클래스에 해당하며, 공동 톳것ㅇ을 가진 일반적인 특징이 있다.\n예를 들면 직원에 해당된다.\n서브타입 서브타입은 슈퍼 타입의 특수한 형태로, 고유 속성을 추가로 지니는 특성이 있다.\n예를 들면 그 직원이 정규직인지, 계약직인지 여부를 나타내는 세부 정보들을 뜻한다. 이때, 세부 정보에 해당되는 정보만 남기도록 한다.\n이를테면, 정규직이라면, 연봉 데이터가 추가적으로 필요할 것이고 계약직이라면 시급과 계약기간 만이 필요할 것이다. 공통되는 정보는 슈퍼타입 에 넣도록 하자.\n슈퍼타입 - 서브타입 관계의 활용 예시 실제로 Porring 프로젝트에서는 OAuth 를 지원해야하는데, 이때 활용할 수 있다.\n일단 기본적으로 아래와 같이 이메일 로그인과 OAuth 로그인 방식 두가지로 가입된 유저 유형이 있을 것이다.\n![[Pasted image 20250126150900.png]]\n유저의 기본적인 정보는 유저 테이블에 저장하고, 로그인 방식에 따라 이메일 기반일 경우 해당되는 이메일 만을 서브 타입으로써 저장하고, OAuth 로그인이라면 OAuth 제공자와 리프레쉬토큰(예시) 를 저장할 수 있겠다.\n데이터베이스에서 실제로 접근하는 방법은? 다른 예시를 들어보자.\n예를 들어, 직원이 정규직인지, 계약직인지 상세하게 구별하고 싶다.\n하지만 이때, 특정 \u0026lsquo;직원\u0026rsquo;이 정규직인지, 계약직인지를 어떻게 데이터베이스 에서 확인할 수 있을까?\n![[2025-01-25-erd-슈퍼타입-서브타입에-대해서-알아보자-1756206982687.webp]]\nerDiagram EMPLOYEE { int employee_id PK varchar name varchar contact varchar employee_type } REGULAR_EMPLOYEE { int employee_id PK, FK decimal salary } CONTRACT_EMPLOYEE { int employee_id PK, FK date contract_end decimal hourly_wage } EMPLOYEE ||--o| REGULAR_EMPLOYEE : is EMPLOYEE ||--o| CONTRACT_EMPLOYEE : is 이때는 직원 테이블의 EMPLOYEE_TYPE 이라는 별도의 값으로 구별한 후, 서브 타입에는 PK로 직원 ID를 FK 로 선언한 상황이다.\n이렇게 된다면, 직원 조회 시, EMPLOYEE_TYPE 을 사용하여 해당되는 서브타입 테이블과 JOIN 하여 확인할 수 있다.\n성능이 저하 될 때 하지만, 그렇다면 또다시 의문이 들 것이다.\n유저를 조회할 때마다 JOIN 을 사용하면 성능에 영향이 가지 않을까 라는 것이다.\n데이터의 정합성을 위해서는 JOIN 하는게 맞지만, 서브 쿼리를 활용할 수도 있을 것이다.\n유저 테이블만 검색하기 유저테이블로부터 유형 알아내기 알아낸 유형으로 유저의 ID로 해당 테이블로부터 검색하기 그럴 경우, 아래와 같은 방법으로도 활용할 수 있다.\n-- 직원 기본정보 조회 SELECT * FROM EMPLOYEE WHERE employee_id = 1; -- 직원유형에 따른 상세정보 조회 SELECT CASE WHEN e.employee_type = \u0026#39;REGULAR\u0026#39; THEN (SELECT salary FROM REGULAR_EMPLOYEE WHERE employee_id = e.employee_id) WHEN e.employee_type = \u0026#39;CONTRACT\u0026#39; THEN (SELECT hourly_wage FROM CONTRACT_EMPLOYEE WHERE employee_id = e.employee_id) END AS payment_info FROM EMPLOYEE e WHERE e.employee_id = 1; 그럼에도 성능저하가 일어날 경우, 테이블을 합치고, NULLABLE 을 허용하는 수 밖에 없다. 쉽게 말해서 반정규화 하는 수밖에 없을 것이다.\n","permalink":"https://blog.moozeh.org/posts/2025-01-25-erd-%EC%8A%88%ED%8D%BC%ED%83%80%EC%9E%85-%EC%84%9C%EB%B8%8C%ED%83%80%EC%9E%85%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90/","summary":"\u003c!-- truncate --\u003e\n\u003cp\u003e네이버 부스트캠프 9기 가 끝난 후, 안드로이드 팀의 그룹프로젝트 \u003ccode\u003ePorring\u003c/code\u003e 에 리팩토링 프로젝트에 참여하여 백엔드로 참여하면서 생긴 일이다.\u003c/p\u003e\n\u003ch2 id=\"슈퍼타입---서브타입-관계란\"\u003e슈퍼타입 - 서브타입 관계란?\u003c/h2\u003e\n\u003cp\u003eERD의 특정 관계를 뜻하는데, 정확하게는 \u003cstrong\u003e객체지향의 상속 개념과 유사한 데이터 모델링 패턴\u003c/strong\u003e이다.\u003c/p\u003e\n\u003ch3 id=\"슈퍼타입\"\u003e슈퍼타입\u003c/h3\u003e\n\u003cp\u003e예를 들어, 슈퍼타입은 \u003cstrong\u003e부모 클래스\u003c/strong\u003e에 해당하며, 공동 톳것ㅇ을 가진 일반적인 특징이 있다.\u003c/p\u003e\n\u003cp\u003e예를 들면 직원에 해당된다.\u003c/p\u003e\n\u003ch3 id=\"서브타입\"\u003e서브타입\u003c/h3\u003e\n\u003cp\u003e서브타입은 슈퍼 타입의 \u003cstrong\u003e특수한 형태\u003c/strong\u003e로, 고유 속성을 추가로 지니는 특성이 있다.\u003c/p\u003e\n\u003cp\u003e예를 들면 그 직원이 정규직인지, 계약직인지 여부를 나타내는 세부 정보들을 뜻한다. 이때, \u003cstrong\u003e세부 정보에 해당되는 정보만 남기도록 한다.\u003c/strong\u003e\u003c/p\u003e","title":"ERD 슈퍼타입-서브타입 관계에 대해서 알아보자"},{"content":" 현재 Java 로 코딩테스트 준비를 해보고 있습니다. 2025년의 목표가 아무래도 Java 와 Spring 에 대해서 깊게 알아보기 이기 때문에 가벼운 문제가 많은 Leetcode 문제들을 위주로 한번씩 풀어보고 있습니다.\n아무래도 Java 에서는 문자열 처리가 최적화로 인해서 생기는 문제가 많다보니 이번 기회에 String 에 대해서 깊게 알아볼 생각 입니다.\nString 단순히 문자열 이라고 합니다. 문자들의 배열 을 줄여서 이렇게 부르죠.\n그렇다면, 이 자체로 배열이라는 뜻이 됩니다.\n생각해봅시다. 배열을 따로 원시 자료형으로 둘 수 있을까요? 아닙니다. 그래서 C++, Java 모두 자체적으로 원시타입이 아닙니다.\n그렇기에 실제로 모든 문자열은 원시타입에서 떠나 이보다 더욱 복잡한 처리가 필요합니다.\nC 에서의 문자열 C언어의 경우 이를 배열로 처리 하기 때문에, 최적화를 위해서 \u0026ldquo;abcd\u0026rdquo; 라는게 있다면 \u0026ldquo;abcd\u0026rdquo; 자체를 저장해서 처리합니다. C언어는 문자열을 const char* 또는 char[]로 처리합니다.\n문자열 리터럴은 읽기 전용 데이터 영역에 저장됩니다. 따라서 수정이 필요한 경우 char 배열을 사용해야 합니다.\n그래서 이를 통해 문자열을 처리하거나 제어하는 함수를 포함한 라이브러리 \u0026lt;string.h\u0026gt; 를 사용해야 합니다.\nJava 에서의 String Java 또한, String은 불변 객체로써 저장 됩니다.\n하지만, 프로그램의 데이터영역에 저장되는 C와는 달리, 문자열 리터럴은 String Pool에 저장되어 재사용됩니다.\nString Pool String Pool 은 JVM 에서 문자열을 관리해주는 매커니즘입니다.\n컴파일 시 프로그램 내 문자열 리터럴들을 클래스 파일의 상수 풀 (Constant Pool) 에 저장하며, JVM이 클래스를 로딩할 때 String Pool 에 문자열 객체로써 생성합니다.\n중요한 점은 상수 풀이 런타임 영역이 아니라는 점입니다. Java 7 이후 버전 기준으로, 실제 String Pool 은 힙 영역에 저장하며, 클래스 로딩 시 해당 리터럴을 바탕으로 String 객체를 생성 후, String Pool에 저장하는 방식을 사용 중입니다.\n// 소스코드 String str = \u0026#34;hello\u0026#34;; // 바이트코드 ldc #2 // #2는 상수 풀 인덱스 astore_1 String Pool 을 이용해 동일한 문자열 리터럴은 재사용을 하여 메모리를 절약할 수 있습니다.\n문자열 리터럴에 대해서만 저장되고, 실제로 동적으로 생성되는 문자열은 힙 메모리에 저장됩니다.\n단, intern() 메소드를 사용하면, 동적으로 생성한 문자열도 String Pool 에 저장 가능합니다. intern() 메소드는 String Pool 에서 리터럴 문자열이 이미 존재하는지 체크하고, 존재하면 해당 문자열을 반환함으로써 다시 메모리 절약을 실행할 수도 있습니다.\n1. 단순 합산 연산 가장 일반적인 방법은 아래처럼 단순히 합연산을 시켜주면 됩니다.\nString s = \u0026#34;aaa\u0026#34; + \u0026#34;b\u0026#34;; 2. StringBuilder 두번째로, StringBuilder 를 사용하는 방식이 있습니다.\nStringBuilder 는 말그대로, 문자열을 만들어주는 객체입니다.\n// String -\u0026gt; StringBuilder -\u0026gt; String 변환 예시 String original = \u0026#34;Hello\u0026#34;; StringBuilder sb = new StringBuilder(original); // String -\u0026gt; StringBuilder sb.append(\u0026#34; World\u0026#34;); // 수정 작업 String result = sb.toString(); // StringBuilder -\u0026gt; String // 체이닝 예시 String result2 = new StringBuilder(\u0026#34;Hello\u0026#34;) .append(\u0026#34; \u0026#34;) .append(\u0026#34;World\u0026#34;) .reverse() .toString(); // 문자열 처리 예시 String text = \u0026#34;Hello World\u0026#34;; String processed = new StringBuilder(text) .reverse() .delete(0, 2) .insert(0, \u0026#34;Hi\u0026#34;) .toString(); char[] 배열을 사용해 문자열 저장 배열이 가득 차면 더 큰 배열로 자동 확장 (보통 2배) 수정 가능한 문자 시퀀스 제공 toString() 호출 시 최종 문자 배열로 불변 String 객체 생성 3. StringBuffer 문자열과 관련된 다른 객체로 StringBuffer 가 있습니다.\nStringBuilder 와의 큰 차이점으로는 스레딩 지원 여부입니다.\nStringBuilder 를 사용할 경우, 동기화를 지원하지 않고 비동기로 처리하므로, 단일 스레드만 사용하는 일반적인 환경에서는 더 빠른 편입니다. 동기화 오버헤드가 없기 때문입니다.\n반대로 StringBuffer 는 동기화를 지원하며, 멀티스레딩 환경에서 사용됩니다. 아래 예시처럼 실제로 buffer 에 더하거나 하는 작업을 병렬로 수행할때 사용합니다.\n// 멀티스레드 환경 StringBuffer buffer = new StringBuffer(); Thread t1 = new Thread(() -\u0026gt; buffer.append(\u0026#34;Hello\u0026#34;)); Thread t2 = new Thread(() -\u0026gt; buffer.append(\u0026#34;World\u0026#34;)); // 단일스레드 환경 StringBuilder builder = new StringBuilder(); builder.append(\u0026#34;Hello\u0026#34;).append(\u0026#34;World\u0026#34;); 놀라운 사실 모든 문자열 연산은 StringBuilder 로 컴파일 하지만, C++ 과는 달리, Java 에서는 Operator 에 대한 연산 함수를 만들 수가 없습니다.\n그렇다면, \u0026ldquo;aaa\u0026rdquo; + \u0026ldquo;b\u0026rdquo; 와 같은 문자열 에 대한 합산 연산은 어떻게 이루어지는 걸까요?\n놀랍게도, String 연산자는 컴파일러가 자동으로 StringBuilder로 최적화 해줍니다. 컴파일러가 알아서 StringBuilder/StringBuffer 로 효율적인 문자열 수정 지원이 가능하므로 일반적으로 이렇게 사용하면 됩니다.\n하지만, JIT 컴파일러가 반복적인 문자열 연산을 추가 최적화해주므로 일반적인 상황에서는 딱히 크게 신경쓰지 않아도 됩니다.\n결론 아무거나 사용해도 상관없습니다. 컴파일 단에서 모두 StringBuilder로 최적화 해주기 때문입니다.\n다만, 경우의 수에 따라 아래와 같이 다양하게 활용하면 좋을 것입니다.\n단순 문자열 연결: + 연산자가 가독성 좋음 반복문 내 문자열 조작: 명시적 StringBuilder 가 성능상 유리 (객체 재사용) ","permalink":"https://blog.moozeh.org/posts/2025-01-24-%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%92%A4%EC%97%90-%EB%AC%B8%EC%9E%90%EB%A5%BC-%EC%B6%94%EA%B0%80%ED%95%98%EB%8A%94-%EA%B0%80%EC%9E%A5-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%B0%A9%EB%B2%95%EC%9D%80/","summary":"\u003c!-- truncate --\u003e\n\u003cp\u003e현재 \u003ccode\u003eJava\u003c/code\u003e 로 코딩테스트 준비를 해보고 있습니다. 2025년의 목표가 아무래도 \u003ccode\u003eJava\u003c/code\u003e 와 \u003ccode\u003eSpring\u003c/code\u003e 에 대해서 깊게 알아보기 이기 때문에 가벼운 문제가 많은 \u003ccode\u003eLeetcode\u003c/code\u003e 문제들을 위주로 한번씩 풀어보고 있습니다.\u003c/p\u003e\n\u003cp\u003e아무래도 \u003ccode\u003eJava\u003c/code\u003e 에서는 문자열 처리가 최적화로 인해서 생기는 문제가 많다보니 이번 기회에 \u003ccode\u003eString\u003c/code\u003e 에 대해서 깊게 알아볼 생각 입니다.\u003c/p\u003e\n\u003ch2 id=\"string\"\u003eString\u003c/h2\u003e\n\u003cp\u003e단순히 \u003cstrong\u003e문자열\u003c/strong\u003e 이라고 합니다. 문자들의 배열 을 줄여서 이렇게 부르죠.\u003c/p\u003e\n\u003cp\u003e그렇다면, 이 자체로 배열이라는 뜻이 됩니다.\u003c/p\u003e\n\u003cp\u003e생각해봅시다. 배열을 따로 원시 자료형으로 둘 수 있을까요? 아닙니다. 그래서 \u003ccode\u003eC++\u003c/code\u003e, \u003ccode\u003eJava\u003c/code\u003e 모두 자체적으로 원시타입이 아닙니다.\u003c/p\u003e","title":"문자열 뒤에 문자를 추가하는 가장 효율적인 방법은"},{"content":"Java에서는 스트링 순회를 어떻게 할까?\n기존 C++ 에서의 스트링 순회 방법 C++ 에서는 char 형으로 스트링을 순회할 수 있다.\n(std string 기준)\nfor(char t : str1) cout\u0026lt;\u0026lt;t; Java 에서 단순히 for-each를 할 경우 하지만 위와 같은 방법을 사용한다면 아래와같은 에러를 받게 된다.\n![[2025-01-19-java-string-for-each-순회-방법-20250119234458860.webp]]\n위와같은 에러를 받지 않게 하려면 이렇게 해야한다.\n그 이유는 const char* 형으로 저장되는 C 기존 문자열 구현과 연관이 있습니다.\n기본적으로 std::string 에서 제공하는 Iterable 옵션을 Java에서 지원해주지 않으므로 생기는 문제입니다.\nJava에서는 String 클래스는 내부적으로 문자들의 배열을 private 필드로 가지고 있으며, 이는 불변(immutable) 속성으로 저장되어 있습니다.\nJava 9 이전에는 char[] 배열을 사용했고, Java 9 이후에는 byte[] 배열과 인코딩 정보를 저장하는 coder 필드를 사용합니다.\nString에서 for-each 문 사용불가능한 이유 String 클래스는 Iterable\u0026lt;Character\u0026gt; 인터페이스를 구현하지 않았기 때문에 for-each 문법을 직접 사용할 수 없습니다. 즉, 위에서 언급한대로, Iterable 에 대한 행동 구현이 명시되지 않아서 그렇습니다.\n또한, String은 String Pool이라는 특별한 메모리 영역에서 관리되며, 문자열 리터럴을 재사용하여 메모리를 최적화합니다\nString str1 = \u0026#34;Hello\u0026#34;; String str2 = \u0026#34;Hello\u0026#34;; // 같은 문자열은 String Pool에서 재사용 가령 위와같은 str1 이 동일한 문자열을 가지고 있다면, String Pool 에서 같은 객체를 참조하게 함으로써 메모리를 절약합니다.\n그렇기 때문에, Java에서는 문자들의 배열을 불변객체로 저장하고 있습니다.\nJava에서 스트링 순회 방법 따라서, Iterable 이 가능한 객체를 새로 만들어주어야합니다.\nString.toCharArray() 메소드를 사용하여 새롭게 객체를 생성하는 식으로 하면 문제를 해결할 수 있습니다.\nfor (char c : str.toCharArray()) { System.out.print(c); } ","permalink":"https://blog.moozeh.org/posts/2025-01-19-java-string-for-each-%EC%88%9C%ED%9A%8C-%EB%B0%A9%EB%B2%95/","summary":"\u003cp\u003eJava에서는 스트링 순회를 어떻게 할까?\u003c/p\u003e\n\u003ch2 id=\"기존-c-에서의-스트링-순회-방법\"\u003e기존 C++ 에서의 스트링 순회 방법\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eC++\u003c/strong\u003e 에서는 \u003ccode\u003echar\u003c/code\u003e 형으로 스트링을 순회할 수 있다.\u003c/p\u003e\n\u003cp\u003e(std string 기준)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"nl\"\u003et\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003estr1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"java-에서-단순히-for-each를-할-경우\"\u003eJava 에서 단순히 for-each를 할 경우\u003c/h2\u003e\n\u003cp\u003e하지만 위와 같은 방법을 사용한다면 아래와같은 에러를 받게 된다.\u003c/p\u003e\n\u003cp\u003e![[2025-01-19-java-string-for-each-순회-방법-20250119234458860.webp]]\u003c/p\u003e\n\u003cp\u003e위와같은 에러를 받지 않게 하려면 이렇게 해야한다.\u003c/p\u003e\n\u003cp\u003e그 이유는 \u003ccode\u003econst char*\u003c/code\u003e 형으로 저장되는 C 기존 문자열 구현과 연관이 있습니다.\u003c/p\u003e\n\u003cp\u003e기본적으로 \u003ccode\u003estd::string\u003c/code\u003e 에서 제공하는 \u003ccode\u003eIterable\u003c/code\u003e 옵션을 Java에서 지원해주지 않으므로 생기는 문제입니다.\u003c/p\u003e\n\u003cp\u003eJava에서는 String 클래스는 내부적으로 문자들의 배열을 private 필드로 가지고 있으며, 이는 불변(immutable) 속성으로 저장되어 있습니다.\u003c/p\u003e","title":"[Java] String for-each 순회 방법"},{"content":"2024년은 나에게 있어 밖으로 나가는 문 을 연 것 같은 느낌이다.\n프로그래밍에 있어서 당연히 나 혼자라도 열심히 개발해보고 공부해보는 것은 좋지만, 여러 사람들과 함께 해보며 특히 협업하는 것과는 확실히 다르다는 걸 인지하게 해준 한 해 같다.\n여러 사람을 만나고 사람과 제대로된 커뮤니케이션을 통해서 나 스스로 부족한 점을 많이 찾았기도 했고, 반대로 다른 분들에게 긍정적 영향을 끼친적도 많았던 것 같다. 소중한 동료들을 만나서 네트워킹하고 있다.\n처음 해본 캡스톤 프로젝트, 다사다난 했던 1학기 나에게 있어 2024년은 협업과 커뮤니케이션에 대해 한 발짝 앞서나간 정말 뜻깊은 해라고 생각한다. 사실 2022년부터 좋지 못한 나날들을 보냈었는데, 3학년 1학기 시절에 처음으로 제대로 된 팀프로젝트 (그 이전에는 무언가 완성품을 내놓는 팀 프로젝트는 하지 않았었다.) 를 해보게 되었고, 내가 상당히 협업에 있어서 부족하구나 라는 걸 조금 느꼈던 경험이었다고 생각한다.\n팀원 간 상태 관리가 안되다 보니 어떻게 협업을 해야하고 어떻게 제한된 시간 내에 효율적으로 프로젝트를 수행할 수 있을지 고민을 했던 것 같다.\n또한 문서화와 관련해서도 많은 고생을 했었는데, 내가 원래부터 글쓰는 걸 못하다보니 활동 보고서나 내가 어떤 일을 했는지 증명하기가 상당히 버거웠다. 나의 경험과 고생을 온전히 담아내고 싶었는데, 중간 중간 꾸준한 글쓰기가 없었어서 많이 힘들었던 경험이 생각난다.\n부스트캠프와 함께 한 2024년 하반기 ![[2025-01-05-부스트캠프-웹모바일-9기-회고-20241220145519150.webp]]\n\u0026lsquo;커뮤니케이션\u0026rsquo;을 알려준 부스트캠프 부스트캠프는 3학년 1학기 시절 나에게 팀과 함께 하는 방법, 함께 자라는 방법 에 대해서 정말로 시원하게 긁어주었다고 생각한다.\n다른 부트캠프와 달리 함께 성장하는 방법을 알려주는 것이 부스트캠프였고, 사실은 지원할 때까지만해도 잘 모르고 그냥 눈에 보이는 모든 걸 잡으려고 하다보니 부스트캠프를 지원하게 됐었다.\n그런데 지금 보면 정말로 훌륭한 선택이라고 생각한다. 부스트캠프 웹 모바일 9기 분들 중에 정말 단 한분도 빠짐 없이 의욕이 모두 넘쳤고, 학구열이 충만했다. 정말 앞으로는 다시는 이렇게 열정 넘치는 커뮤니티 활동을 할 수 없을 것 같다는 생각이 들 정도였다.\n학습 스프린트 부스트캠프 중 개인적으로 학습스프린트를 하면서 부스트캠프에서 주장하는 지속 가능한 개발자가 되기 위한 방법도 어느정도 깨우치기 시작했었다. 자세한 내용은 이곳을 참고하면 좋을 듯하다!\n이렇게 내가 스스로 지속가능할 방법을 찾고 나니 함께 협업하는 방법을 알 수 있었고, 그룹프로젝트를 하면서 어떻게 하면 함께할 줄 아는 개발자가 되는지 알 수 있었던 것 같다.\n그룹프로젝트 수료한 시점에서 보니, 그룹프로젝트가 진정한 부스트캠프의 꽃이 아닐까 한다! 그만큼 그룹프로젝트에서 많은 것들을 얻어갈 수 있었다. 대표적으로 애자일 방법론, 백로그, 스프린트 등 실제 업무에서 사용되는 방법들을 우리가 처음이지만 그래도 직접 써보면서 (러닝 바이 두잉..!) 6주 동안 그룹프로젝트를 진행했다.\n그리고 노션 등을 활용해서 작성하느 회의록이 협업에 얼마나 중요한지 깨닫게 되었다. 적어도 우리가 생각한게 맞는지 공유하며, 각자의 코드를 공유하는 것. 그라운드룰이니 뭐니 하면서 일단 코드를 빨리 써야하지~ 라는 마인드에서 벗어날 수 있었다.\n결국 문서화와 같은 방법으로 팀원과 내용물을 그때그때 공유할 수 있었고 그 과정에서 생긴 마찰이나 오해가 빨리 풀리면서 각자가 해야할 업무를 분담을 잘 수행할 수 있었던 것 같다.\n![[2025-01-05-2024년-회고-20250105012358464.webp|600]] 우리팀 노션 메인페이지..!\n![[2025-01-05-2024년-회고-20250105012601881.webp|600]] 각자 입장에서의 이슈를 빨리 공유하는 것이 빡코딩보다 훨씬 낫다\u0026hellip;!\n물론 이 과정에서 문제가 없었던 것은 아니다. 내가 블로킹되어서 겪었던 문제들도 있었는데, 이런 문제들은 나의 블로그에 상세하게 기록해두었다.\n12월 네트워킹 데이 올해 부스트캠프 9기에서는 네트워킹행사를 내부 사정으로 인해 진행되지 않았다. 아무래도 온라인으로 최대한 지원하려고 하다보니 오프라인과 온라인에 있어서 경험의 차이를 두지 않으려고 했던 것 같다.\n자세한 내막은 모르지만, 이번 기수에 다행히도 안드로이드 캠퍼분께서 고맙게도 직접 발벗고 나서서 네트워킹 행사를 위한 장소를 찾아주셔서 자체적으로 네트워킹 행사도 해주셨다.\n![[2025-01-05-2024년-회고-20250105010957176.webp|600]] 대관해주신 장소는 무려 강남이란 비싼 곳에 위치한 마루180..!\n덕분에 뜻깊은 연말을 장식할 수 있었던 것 같다..!\n오프라인으로 부스트캠프 멤버십 과정을 진행한 많은 사람들을 실제로 만나뵐 수 있었고, 너무나도 반갑고 뜻깊은 시간이었던 것 같다. 그 다음날 다른 친구들과의 일정이 있어서 참여는 못했는데, 뒤풀이 행사도 열렸던 걸 보면 추후에 서울에 가게 되면 다시 캠퍼분들을 만나뵈고 싶다는 생각이다..!!\n이 과정에서 정신이 없고, 같은 그룹프로젝트 분들과 함께 다니느라 챙겨드리지 못한 저를 기대하신 수많은 캠퍼분들께 기대에 부응하지 못해 죄송한 마음도 있다..ㅠㅠ\n스터디를 통한 꾸준한 네트워킹 장소를 대관해주신 분은 스터디도 운영하고 계셨는데 그분의 제안으로 스터디도 함께 참여하였다. 하지만 그룹프로젝트가 시작되면서 활동을 하지 않았었다. (바빠서 못했다고 구태여 변명하기엔 부끄럽다..)\n하지만 어느덧 2025년이 되었고, 2025년 첫 주간회고날인 1월 3일날 적어도 나의 상태는 알려야겠다고 다짐했고, 용기를 내서 참여했다. 2025년 부터는 이런 작지만 꾸준한 한걸음을 실천하는 한 해의 목표로 삼아보려고 한다.\n![[2024-12-20-2024년-회고-20250105000908021.webp|600]]\n얻어간 점 코드 리뷰의 중요성 금요일마다 마스터님들께서 코드 리뷰를 해주신 게 인상적이었다! 사실 부끄럽고, 나의 부족함이 알려질까봐 두려웠어서 신청은 못했었는데, 지금 생각해보니 어차피 코드리뷰를 받아도 안받아도 못할 거, 그냥 코드리뷰 신청을 하는게 좋았을 것 같다고 생각이 들었다.\n그래서 더욱 그랬던 것 같다. 다른 캠퍼분들도 많이 아쉬우셨는지, 캠퍼끼리 코드리뷰는 자유로 진행됐는데, 우리 기수가 상당히 활발히 진행되었다고 한다. 나도 실제로 활발히 진행했었는데, 이런 부분은 개선하는 게 좋아보인다. 저런 부분은 이렇게 하면 좋다. 이런 부분은 마음에 들고 잘하신 것 같다. 라고 서로 교류하는 문화가 너무나도 좋았다. (자세한건 학습스프린트 회고 참고)\n나는 이 경험을 토대로 다른 사람들과 나의 코드가 얼마나 많이 바뀔 수 있는지 알게 되었고, 올해 4학년에 진행할 팀프로젝트에서 이 문화를 적극적으로 반영해볼 생각이 있다.\n회고의 중요성 KPT, 4L 등 세상에는 생각보다 다양한 회고법들이 존재했었다. 그만큼 회고를 중요하게 여기는 이들이 세상에 많다는 걸로 생각한다. 실제 현업개발자분들께서도 회고를 굉장히 강조하셨던 것들이 기억에 남는다.\n나는 그래서 그룹 프로젝트에서도 적극적으로 회고를 진행했는데, 적어도 재밌는 시간으로 기억되길 바라면서 진행했었다.\n같이했던 팀원 분들은 어떻게 생각하실진 모르겠지만, 나는 적어도 힘든일이 아무리 많았더라도, 그룹프로젝트는 즐겁게했던 것 같다.\n![[2025-01-05-2024년-회고-20250105011424196.webp|600]] 피그잼을 보면 확실히 다들 즐겁게 했다고 생각해요..!\n앞으로의 계획 테스트와 설계에 관한 고민 나는 항상 테스팅 에 대해서 많이 부담스럽게 생각해왔다. 그리고 부스트캠프에서도 테스트 자체에 대한 강조는 많이 해주신다. 리팩토링에 대해서 잘못된 가치관으로 팀원에게 블로킹을 주었기 때문에 아직도 많이 미안한 마음이다.. 테스팅에 대해서 조금 더 알고, 그걸 기반으로 리팩토링에 대해서 올바르게 수행했다면 더 많은 기능들을 6주 내에 추가할 수 있지 않았을까 생각해본다.\n하지만 내 개인적으로 그룹프로젝트를 하면서 6주라는 짧은 기간 내에 테스팅을 어떻게 하면 할 수 있을지 막상 현재까지도 잘 감이 잡히지 않는 상황이었다. 일단은 주먹구구식으로 하는데, 이게 맞을까? 특히, 과연 이 테스트가 필요할까? 에 대한 관념이 잡히지 않아서 이왕이면 우리학교에서 수업이 있다면 좋을 것 같다고 생각했는데, 학교 동기로부터 소프트웨어 테스팅이론을 추천받았기 때문에 해당 내용으로 공부해보려 한다.\n멤버십이 끝난다면, 나는 어떤 사람이 되어 있을까? 그룹프로젝트를 진행하면서 항상 마스터님들께서 질문을 던져주신 것 중에 솔직히 말해서 답하지 못한게 하나 있었는데 지속 가능한 개발자가 되려면 어떻게 해야할까, 그 다음으로 일단 당장 멤버십이 끝난다면 난 어떤 사람이 되어있을까 에 대해 생각해보면 좋다고 말씀 주셨던 게 기억난다.\n사실 끝난지 거의 한달이 넘어가지만 아직도 결론을 내지 못했고, 이게 정말 부스트캠프를 수료한 내가 맞는지 의문이 들었고 부끄러움이 들었다.\n그런데,, 깃허브 메인 페이지를 들어가니 하나 정말로 큰 깨달음을 얻을 수 있었다. 네트워킹 활동을 통해 얻은 다양한 인연들의 다양한 노력과 그 결실들을 피드를 통해 볼 수 있었고, 나는 그런 사람들과 함께할 수 있는 사람이 될 수 있고, 되어있다는 걸 다시금 깨달았다.\n2024년은 나에게 그런 느낌이었다. 함께하면 혼자할 때보다 더 나은 걸 느꼈다. 당장 깃허브 메인 페이지를 통해서 수많은 이들의 노력이 나에게 동기부여가 되었고, 다시 일어설 수 있는 힘이 된다고 느껴지니 어느정도 나는 어떤 사람이 되었는지 알 수 있었던 것 같다. 멤버십이 끝난 나는 다른 사람과 함께하는 사람 이라는 걸 느꼈다. 정말 나에게 과분한 인연들이라고 생각이 된다.\n나도 수료생으로써 무슨 일을 도와줄 수 있을까? 수료생과의 커피챗 시간 나는 운좋게 마지막 커피챗 활동에서 학교 선배님을 만날 수 있었고, 선배님께 여러가지 꿀 조언들을 얻을 수 있었다. (해당 조언들은 저 혼자만의 정보가 아니므로 사정상 공개하진 못하겠습니다)\n의외로 그룹프로젝트를 진행하며, 피어세션에서, 학습스프린트에서 같은 학교 동문분들을 만나고 많이 반가운 경험을 했었는데, 생각보다 세상이 좁구나 라고 생각하게 되었다.\n그렇기 때문에 최대한 나도 좋은 사람으로 기억될 수 있도록 생각해봐야겠다고 다짐하게 되었고, 사회적으로 좋은 사람이 되기 위해서 어떻게 해야할까 를 생각하게 된 것 같고 이전보단 많이 생각이 바뀐 것 같다.\n나도 수료생으로써 무슨 일을 도와줄 수 있을까? 내가 위에서 언급한 아쉬운 점들은 사실 나 혼자에게도 적용될 순 있겠지만, 이후 앞으로 개발자를 꿈꾸는 많은 이들에게 좋은 조언이 될 수 있지 않을까 생각해본다.\n지금도 내 블로그 글을 어떤 경위로 찾아와서 글을 읽을 수도 있다고 본다. 그럴 때마다 나와 적어도 같은 길을 걷는 분들에게 여러 케이스 중의 하나가 되어서 길을 조금이라도 밝혀줄 수 있다면 좋지 않을까 생각해본다.\n그래서 취업에 성공해서 내가 더 밝은 사람이 되었을 때 다른 후배분들에게 조금이라도 밝은 등불이 되어주었으면 좋겠다는 생각이 들었고, 후에 수료생으로써 부스트캠프에 멘토로써 참여할 수 있다면 해보고 싶다 라는 생각도 들었다.\n일단 지금은 학교로 돌아가야할 때 하지만 그런 부분은 일단 취뽀(\u0026hellip;)하고 나서.. 아직은 학점이 남았고, 후에 대학원 을 통해서 내가 배우고 싶은 일이 생겼을 때 바로바로 배울 수 있기 위해서 학교는 졸업하는게 좋겠다는 생각이 들었다.\n사실 어찌보면 당연한 말이다. 이미 근 5년간 투자한 학교를 다 졸업하고 취업활동을 하던가 하지..! 라는 생각이다. 😄\n가치가 아닌 나의 강점 생각해보기 다양한 나의 모습 생각해보기 회고를 하면서 뒤돌아보기 다른 팀원들을 이끌어줄 수 있는 역량 키우기 협업을 할 때 혼자 나아가지 않기 위해 문서화하기\b 나는 추억하는 개발자 라는 슬로건을 내밀 때 이렇게 나의 원칙을 세웠고, 이런 가치들을 중시하는 개발자가 되어야한다고 생각했다. 하지만 모든 의지가 그렇듯, 실제로 쉽지는 않았는데, 내가 의외로 문서화에 약하다는 사실이다.\n그러니 당연히! 문서화를 하기에 앞서서, 추억하는 개발자로써의 모습과 지금 현실의 내 모습이 과연 같을까? 내가 보지 못한 나의 가치를 못보고 있는 건 아닐까? 하는 고민에 빠졌다. 앞으로 천천히 알아가봐야겠지만, 나도 계속해서 내가 추구하고자하는 가치가 아니라 나의 강점을 찾아서 얼른 이력서 지원을 해보고싶은 마음이다!\n문서, 또 문서. 최근에는 간단한 홈서버 구축을 했었는데, 결국 이런 간단한 일들도 하나의 문서로 관리하기로 했다. 너무나도 상세한 문서는 나에게 오히려 문서화 작업에 대한 부담으로 다가왔고, 지금 이 글도 작성일이 늦어지는 부작용을 초래했다.\n내가 생각하는 좋은 문서란? 일단 내가 생각하는 좋은 문서란 무엇일지 한번 생각해보고 싶었다. 그래서 곰곰이 생각해보았고, 결국 생각이 이어지는 문서가 좋다고 판단이 들었다.\n이때 생각이 이어진다는 건 나의 경우 상당히 빨리 진행 됐었다. 예를 들어보자.\n백엔드에서 로드 밸런싱을 해야하는 상황이 생겼다. (문제 정의) 일단 why? 왜 를 생각한다. 찾아보니 이런 이유가 있었다. (문제 원인 파악) 첫번째로 Nginx에서 로드밸런싱을 해주었다. (나름대로의 문제해결 시도) 사실 이 과정 전체적으로 나는 그냥 문서화 작업없이 하나의 과정으로 쭉 이어진다. 왜냐하면 어떻게보면 간단한 해결이 끝이었는데? 라고 끝날 수도 있던 것이기 때문이다. 그렇기 때문에 중간 과정에 대한 생각 을 기록해두는게 좋다고 생각이 들었다.\n나의 생각을 그냥 쓰면서 기록해보면 그것 자체로 문서가 되지 않을까? 생각해본다. 의외로 나는 퀄리티있는 글을 즉흥적으로 작성하는 편이라서 더욱 그런 것 같다. (지금 당장에도 바로바로 써내려 가고 있다\u0026hellip; ㅋㅋ)\n조바심 금지, 꾸준함을 목표로. 부스트캠프 멤버십 처음이자 끝까지 통일되게 들은 나의 부정적인 피드백 중에 일관된게 하나 있었다. (물론 나에 대한 비방이 아니라 우려에서 나온 피와 살이 되는 조언이라고 생각한다.)\n그건 바로 조바심 내지 않는게 중요하다 였는데, 확실히 나도 인정한다. 나도 여태까지 잘하려고 조바심을 냈었고, 동기부여 가 아니라 조바심 에만 그쳤던 게 문제였던 것 같다.\n누군가 나에게 피드백으로 네부캠은 일종의 마라톤 이라고 말씀해주신게 떠오른다. 자신은 자신만의 페이스가 있으니 찬우님도 그것처럼 자신의 감정을 컨트롤하고 페이스를 조절하는 건 어떠냐고.\n이전에 군대 동기들과 함께 얘기한 바로는 다른 이들의 활동을 보게 되면 나는 동기부여가 잘되어서 열심히 하게된다. 라고 말해주던게 기억난다. 그 때도 그랬지만, 역시 나는 그냥 계속하는게 좋을 것 같다고 생각이 들었다. 위에 용기내서 스터디를 참여한 것. 그것만으로 가치 있다.\n어쩌면 부스트캠프가 끝나고 번아웃이 온걸지도 모른다. 우리의 그룹프로젝트는 사실 어떤 이들에겐 보잘 것 없이 보일 수 있겠지만, 나는 내가 할 수 있는 역량을 쏟아내며 만들다보니 그런 것 같기도 하다.\n그렇기 때문에 꾸준히 내 프로젝트에 대한 애정을 드러내야 그렇게 생각하는 이들도 한 명이라도 더 가치있게 보고 서비스에 대해 호기심을 가지게 되지 않을까 싶다.\n마무리 부스트캠프가 끝나고 주변 사람들과 놀았다. 솔직히말해서 이제 20대 중반이 넘어가는데, 새로운 인연을 이렇게 사귈 수 있다는 것만으로도 나에게 과분한 행복이 아닐까 싶다.\n![[2025-01-05-2024년-회고-20250105010801633.webp|600]]\n2025년은 어떤 한해가 될 지 정말 궁금하다. 솔직히 말해서 기대가 되진 않는다. (어떻게 7전공을 하지..) 하지만 그만큼 좋은 인연도 다시 만나길 고대하고 있다!\n","permalink":"https://blog.moozeh.org/posts/2025-01-05-2024%EB%85%84-%ED%9A%8C%EA%B3%A0/","summary":"\u003cp\u003e2024년은 나에게 있어 \u003ccode\u003e밖으로 나가는 문\u003c/code\u003e 을 연 것 같은 느낌이다.\u003c/p\u003e\n\u003cp\u003e프로그래밍에 있어서 당연히 나 혼자라도 열심히 개발해보고 공부해보는 것은 좋지만, 여러 사람들과 함께 해보며 특히 협업하는 것과는 확실히 다르다는 걸 인지하게 해준 한 해 같다.\u003c/p\u003e\n\u003cp\u003e여러 사람을 만나고 사람과 제대로된 커뮤니케이션을 통해서 나 스스로 부족한 점을 많이 찾았기도 했고, 반대로 다른 분들에게 긍정적 영향을 끼친적도 많았던 것 같다. 소중한 동료들을 만나서 네트워킹하고 있다.\u003c/p\u003e\n\u003ch2 id=\"처음-해본-캡스톤-프로젝트-다사다난-했던-1학기\"\u003e처음 해본 캡스톤 프로젝트, 다사다난 했던 1학기\u003c/h2\u003e\n\u003cp\u003e나에게 있어 2024년은 협업과 커뮤니케이션에 대해 한 발짝 앞서나간 정말 뜻깊은 해라고 생각한다. 사실 2022년부터 좋지 못한 나날들을 보냈었는데, 3학년 1학기 시절에 처음으로 제대로 된 팀프로젝트 (그 이전에는 무언가 완성품을 내놓는 팀 프로젝트는 하지 않았었다.) 를 해보게 되었고, \u003ccode\u003e내가 상당히 협업에 있어서 부족하구나\u003c/code\u003e 라는 걸 조금 느꼈던 경험이었다고 생각한다.\u003c/p\u003e","title":"2024년 회고"},{"content":"![[Pasted image 20241229134612.webp]]\n문제 상황 웹소켓의 이벤트 명세를 바꾸게 되었는데, 프론트 - 백 간의 연동 과정에서 엄청난 실수를 저지르고 말았습니다. 바로 반환되는 데이터를 바꿔버린 것입니다.\n반환되는 데이터만 바뀌면, 그냥 알려주면 되는 것 아닌가? 라는 생각이 드실 수 있습니다. 그런데 문제는, 반환되는 데이터의 기준 을 바꿔버렸던 것입니다.\nAPI를 정의할때 입력 과 출력 값만 나오면 된다곤 하지만, 결국엔 어떤 값을 넣으면 서버에 저장되는 데이터가 어떻게 바뀌는지에 대해서는 명세가 안되었던 것 입니다.\n“바뀐 명세를 확인해주세요!” 라고 말하고 너무 프론트 분에게 맡겼던 것이 큰 실책이었던 것입니다. 바뀐 명세가 제대로 작동되지 않거나, 충분히 설명되지 않았습니다. 글을 쓰는 것이 많이 어려웠는데, 계속된 문서화랑 코딩으로 인해 체력이 바닥이 나서 제대로 글을 못쓴 것도 원인 같습니다. 이런 상황에서도 문서를 잘 쓸 수 있어야 개발자일까.. 고민하게 됐습니다.\n![[Pasted image 20241229135337.webp]]\n해결 과정 프론트엔드 캠퍼분께서 계속해서 질문을 주셨습니다. 덕분에 계속 개선을 할 수 있었습니다. 하지만, 그럼에도 해결이 되지 않았고 결국 페어프로그래밍 을 했습니다.\n같이 프로그래밍을 하면서 데이터가 만나는 지점인 엔드포인트(컨트롤러, api 호출함수)가 아니라, 실제로 프론트 부터 백까지의 비즈니스 로직의 전체 흐름을 제가 보고 나니 어떻게 하고싶었던 것인지 다시 정의를 할 수 있었고, API를 보여줄 때는 서버의 전체 흐름도 알려주어야겠다 라고 생각하게 되었습니다.\n![[Pasted image 20241229135353.webp]] 바뀐 명세서, 훨씬 명세서 다워졌다.\n![[Pasted image 20241229135420.webp]] 이전 명세서, 타입에만 신경쓰다보니 무슨 이벤트인지 모르겠다..\n이렇게 서버에서 일어나는 동작 자체를 명세하도록 바꾸었고, 스터디 기능을 “구현 및 연동” 속도가 스터디 세션 “연동” 속도보다 3배 빨라졌습니다. 스터디 세션 기능의 경우 3일 걸렸고, 스터디 기능 구현 및 연동은 1일만에 완료했다.\n스터디 기능 구현 과정에서 스터디 세션 기능이 구현이 되어있었다는 점을 감안해도, 스터디 기능은 구현 및 연동 과정이 하루만에 끝났고, 스터디 세션의 경우 백엔드 구현 후 이미 완료한 프론트 엔드 작업과 연동 과정에만 3일(이번주 월 ~ 수)이 걸렸음을 생각하면 거진 3배 빨라졌습니다.\n명세서를 현명하게 바꾸려면..? 명세서를 현명하게 바꾸기 위해서는 문서화 와 실제 구현 의 순서를 반드시 바꿔야함을 깨달았습니다.\n여기서 문서화란 단순히 문서 작성을 하는 것이 아니라, 문서를 읽는 사용자들에게 확인받기 까지 완료하는것이 문서화 입니다.\n문서화에서 커밋하기 전 상태를 나타내기 문서화에서 확실하지 않은 경우 일단은 문서를 수정하지 말지 고민되는 경우가 많았습니다. 그래서 수기로 작성하는 경우, 명세서에 마이너 버전을 두는 것도 좋다고 생각했고, 변경 기록을 또 남기기 위해 차라리 수기로 작성할 때는 다음에는 깃허브 레포를 이용해볼까 합니다.\n실제 데이터를 기반으로 문서화 하자. 그리고 가장 중요한건 실제 구현 과 문서 와 일치를 최대한 시킬 수 있도록 해야합니다. 여기서 제안하는 것이 Swagger 입니다. 실제 구현에 필요한 DTO를 정의를 해두고, API 가 응답하는 DTO를 일정하게 만들어 API 응답의 일관성을 지키면서, Swagger 로도 문서화를 시켜서 자동으로 생성할 수 있도록 만드려고 합니다.\n웹소켓의 경우 Swagger로 문서화할 수 없지 않나요? 네 그렇습니다. 그렇지만, 코드 단위에서 반환 객체를 모킹하여 문서화를 할 수 있다고 생각합니다. 코드를 돌려보진 못하지만 적어도 특정 실제 객체에 따라 출력값에 실제 이 객체를 사용한다는 점입니다.\n","permalink":"https://blog.moozeh.org/posts/2024/2024-12-29-%EB%AA%85%EC%84%B8%EC%84%9C%EB%A5%BC-%ED%98%84%EB%AA%85%ED%95%98%EA%B2%8C-%EB%B0%94%EA%BE%B8%EB%A0%A4%EB%A9%B4/","summary":"\u003cp\u003e![[Pasted image 20241229134612.webp]]\u003c/p\u003e\n\u003ch2 id=\"문제-상황\"\u003e문제 상황\u003c/h2\u003e\n\u003cp\u003e웹소켓의 이벤트 명세를 바꾸게 되었는데, 프론트 - 백 간의 연동 과정에서 엄청난 실수를 저지르고 말았습니다. 바로 반환되는 데이터를 바꿔버린 것입니다.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e반환되는 데이터만 바뀌면, 그냥 알려주면 되는 것 아닌가?\u003c/code\u003e 라는 생각이 드실 수 있습니다. 그런데 문제는, \u003ccode\u003e반환되는 데이터의 기준\u003c/code\u003e 을 바꿔버렸던 것입니다.\u003c/p\u003e\n\u003cp\u003eAPI를 정의할때 \u003ccode\u003e입력\u003c/code\u003e 과 \u003ccode\u003e출력\u003c/code\u003e 값만 나오면 된다곤 하지만, 결국엔 어떤 값을 넣으면 서버에 저장되는 데이터가 어떻게 바뀌는지에 대해서는 명세가 안되었던 것 입니다.\u003c/p\u003e\n\u003cp\u003e“바뀐 명세를 확인해주세요!” 라고 말하고 너무 프론트 분에게 맡겼던 것이 큰 실책이었던 것입니다. 바뀐 명세가 제대로 작동되지 않거나, 충분히 설명되지 않았습니다. 글을 쓰는 것이 많이 어려웠는데, 계속된 문서화랑 코딩으로 인해 체력이 바닥이 나서 제대로 글을 못쓴 것도 원인 같습니다. 이런 상황에서도 문서를 잘 쓸 수 있어야 개발자일까.. 고민하게 됐습니다.\u003c/p\u003e","title":"명세서를 현명하게 바꾸려면"},{"content":"블로그 설명 글 등에서 OAuth 앱에서 URI 를 설정할 때 왜 localhost:8080 등으로 로컬 호스트로 설정을 해두었는지 알 수 있게 된 문제 해결 과정이었습니다.\nURI 설정을 잠깐 바꾸었다가 OAuth 요청을 보냈는데, 해당 오류페이지로 리다이렉팅되는 문제가 있었다. 이는 실제로 callback uri와 실제 리디렉션 URI 가 일치하지 않을때 발생하는 문제였습니다.\n이는 OAuth 에서는 XSS 등의 웹 공격을 방지하기 위해 깃허브로부터 OAuth 요청을 할 때, 우리 사이트를 통해 OAuth 를 한 후 어떤 사이트 (혹시나 해킹사이트로 가지진 않을지)에 대한 방어책이었습니다.\n만약에 악의적으로 누군가가 우리의 OAuth 앱을 이용해서, 가짜 사이트에서 진짜 OAuth만 사용하고 다시 가짜사이트로 리다이렉팅할 수 있다고 생각할 수 있는 것입니다.\n![[Pasted image 20241228230539.webp]]\n위 에러의 상황을 그림으로 표현\n사실 이의 경우 client ID 토큰까지 알아내야 가능한 일이겠지만, 클라이언트에게 이런 이런 URI를 통해 깃허브로 가세요 라면서 URI를 보내줄 때 client id 토큰이 들어있으므로 충분히 노출될 수 있겠다고 생각했습니다.\n그래서 URI를 저희가 로컬에서 테스트하고 있었을 때에는 http://localhost:3000 을 사용 중이었고, 별도의 데브서버용 OAuth 앱을 만들어서 해당 링크를 통해 정확하게 일치하게 프로토콜, 도메인을 일치시켜주니 문제가 해결되었습니다.\n","permalink":"https://blog.moozeh.org/posts/2024/2024-12-28-the-redirect_uri-is-not-associated-with-this-application-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0/","summary":"\u003cp\u003e블로그 설명 글 등에서 OAuth 앱에서 \u003ccode\u003eURI\u003c/code\u003e 를 설정할 때  왜 \u003ca href=\"http://localhost:8080\"\u003e\u003ccode\u003elocalhost:8080\u003c/code\u003e\u003c/a\u003e 등으로 로컬 호스트로 설정을 해두었는지 알 수 있게 된 문제 해결 과정이었습니다.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eURI\u003c/code\u003e 설정을 잠깐 바꾸었다가 \u003ccode\u003eOAuth\u003c/code\u003e 요청을 보냈는데, 해당 오류페이지로 리다이렉팅되는 문제가 있었다. 이는 실제로 \u003ccode\u003ecallback\u003c/code\u003e uri와 실제 리디렉션 URI 가 일치하지 않을때 발생하는 문제였습니다.\u003c/p\u003e\n\u003cp\u003e이는 OAuth 에서는 XSS 등의 웹 공격을 방지하기 위해 깃허브로부터 OAuth 요청을 할 때, 우리 사이트를 통해 OAuth 를 한 후 어떤 사이트 (혹시나 해킹사이트로 가지진 않을지)에 대한 방어책이었습니다.\u003c/p\u003e","title":"The redirect_uri is not associated with this application 오류 해결"},{"content":"문제 상황 저는 토큰 인증방식 을 이용하여서 구현했습니다. 토큰 방식으로 해서 세션을 저장할 필요가 없어서 확장성 있게 설계할 수 있어서 좋았습니다.\n하지만 문제가 생겼습니다. 기능 확장을 하는데 있어서 문제가 생겼는데요, 문제 상황은 이렇습니다. 질문지 개발을 다른 캠퍼께서하고 계셨는데, 질문지 스크랩에 대한 내용을 리턴해야합니다.\n만약 로그인한 유저가 질문지(대충 리소스) 리스트를 받아오는데 있어서 자신이 어떤 질문지를 스크랩했는지 보여주는 식으로 질문지 리스트를 리턴해야한다 하는 유즈 케이스가 있습니다. 문제는 이때, 로그인하지 않은 유저는 모든 질문지 리스트에 스크랩 여부를 false 로 하여 리턴하려고 했었는데요.\n이때, AuthGuard(”jwt”) 를 통해 유저 정보를 받아오고 있었는데, 유저 정보가 없으면 무조건 401 에러를 내뱉기 때문에, 인증 모듈을 구현한 저에게 개선 요청을 하셨습니다. 아래는 실제 코드입니다.\n해당 상황에서 핸들러에 진입하기도 전에 Guard 에서 반환을 시켜버리기 때문에 인증 전략을 수정해야하는 상황이었습니다. 토큰을 전달 받아 scrap 유무를 확인해서 질문지들을 조회하는 API를 하나씩 더 만들 수도 있겠지만, 카테고리에 따라 만드는 경우 등 다양한 유즈케이스가 있어서 확장성 있게 개선하는 방향이 아니라고 판단했습니다.\n@Post() @UseGuards(AuthGuard(\u0026#34;jwt\u0026#34;)) async createQuestionList( @JwtPayload() token: IJwtPayload, @Req() req, @Body() body: { title: string; contents: string[]; categoryNames: string[]; isPublic: boolean; } ) { try { const { title, contents, categoryNames, isPublic } = body; // 질문지 DTO 준비 const createQuestionListDto: CreateQuestionListDto = { title, contents, categoryNames, isPublic, userId: token.userId, }; // 질문지 생성 const { createdQuestionList, createdQuestions } = await this.questionListService.createQuestionList(createQuestionListDto); return { success: true, message: \u0026#34;Question list created successfully.\u0026#34;, data: { createdQuestionList, createdQuestions, }, }; } catch (error) { return { success: false, message: \u0026#34;Failed to create question list.\u0026#34;, error: error.message, }; } } 해결 시도 과정 401 리턴을 저는 JWT 데코레이터 에서 하고 있었습니다. 위 개발일지 글에서 올린 데코레이터 코드와는 다른 이전 코드입니다. 그래서 해당 부분에서 타입 가드가 오류가 날 경우 null 을 리턴해주는 식으로 해결했습니다.\nexport const JwtPayload = createParamDecorator((data: unknown, ctx: ExecutionContext) =\u0026gt; { const request = ctx.switchToHttp().getRequest(); const payload = request.user.jwtToken; if (!isJwtTokenPayload(payload)) { throw new UnauthorizedException(\u0026#34;Invalid jwt token payload\u0026#34;); } return payload; }); 해결된 줄 알았으나,, 그럼에도 불구하고 여전히 401 에러를 리턴하고 있었습니다.\n알고보니 passport-jwt 에서 직접적으로 토큰 인증에 실패하면 에러를 출력하고 있었습니다. 이 경우도 verify 함수를 설정해보는 등 여러 시도를 해보았지만,처음부터 토큰을 가져오지 못할 때 바로 401 에러를 자체적으로 리턴하고 있었습니다.\n그래서 이경우도 jsonwebtoken 라이브러리와 passport-custom 으로 자체적으로 해결했습니다.\nimport { Injectable } from \u0026#34;@nestjs/common\u0026#34;; import { PassportStrategy } from \u0026#34;@nestjs/passport\u0026#34;; import { Strategy } from \u0026#34;passport-jwt\u0026#34;; import { Request } from \u0026#34;express\u0026#34;; import \u0026#34;dotenv/config\u0026#34;; @Injectable() export class AccessTokenStrategy extends PassportStrategy(Strategy, \u0026#34;jwt\u0026#34;) { constructor() { super({ jwtFromRequest: (req: Request) =\u0026gt; { if (!req || !req.cookies) return null; return req.cookies[\u0026#34;accessToken\u0026#34;]; }, secretOrKey: process.env.JWT_ACCESS_TOKEN_SECRET_KEY, passReqToCallback: true, }); } async validate(req: Request, payload: any) { const { userId, username } = payload; return { jwtToken: { userId, username, }, }; } } 생각해보니.. 생각해보니, 컨트롤러의 책임은 API 응답에 있을 수 있겠다는 생각이 들었습니다. 이게 무슨 뜻이냐면, 어떤 요청에 대한 응답의 책임은 컨트롤러에 있다라는 생각입니다. 또한, 아까 사례처럼 오류 처리에 대한 철학을 조금 생각해봤습니다.\n예외를 진짜 마구잡이로 던져서 컨트롤러 핸들러에서 어찌할 줄 모르는 경우를 생각해보면, 에러 핸들링을 하는 범위를 어디서부터 어떻게 해야할지 생각을 다시하게 되었습니다.\n배울 점 이와 관련해서 Claude 에게도 물어보았습니다. 혼자만의 생각을 정리하지 않고, 무언가 자문을 구할 사람이 주변에 없을 경우 이용을 하고 있었는데, 이에 관한 답변도 공유를 하면서 저의 생각을 정리하며 마쳐봅니다.\n질문\n401 등 컨트롤러에서는 응답 코드를 리턴하는 핸들링에 대한 책임이 전적으로 있다고 생각하는데요. 어떻게 생각하시나요?\n클로드의 답변 HTTP 상태 코드의 처리와 관련된 중요한 논점을 제기하셨네요. 컨트롤러의 책임 범위에 대해 제 의견을 말씀드리겠습니다.\n컨트롤러가 상태 코드를 전적으로 처리하는 것보다는, 다음과 같은 계층적 접근이 더 효과적일 수 있습니다:\nException Filters 활용 @Catch(UnauthorizedException) export class HttpExceptionFilter implements ExceptionFilter { catch(exception: UnauthorizedException, host: ArgumentsHost) { const ctx = host.switchToHttp(); const response = ctx.getResponse(); response.status(401).json({ statusCode: 401, message: \u0026#39;Unauthorized access\u0026#39; }); } } Guards에서의 인증/인가 처리 @Injectable() export class AuthGuard implements CanActivate { canActivate(context: ExecutionContext) { // 인증 실패 시 UnauthorizedException 발생 throw new UnauthorizedException(); } } Interceptors를 통한 공통 응답 처리 @Injectable() export class TransformInterceptor implements NestInterceptor { intercept(context: ExecutionContext, next: CallHandler) { return next.handle().pipe( map(data =\u0026gt; ({ statusCode: context.switchToHttp().getResponse().statusCode, data })) ); } } 이렇게 계층화된 접근을 사용하면 다음과 같은 이점이 있습니다:\n관심사의 분리: 컨트롤러는 비즈니스 로직에만 집중할 수 있습니다 코드 재사용: 공통된 에러 처리 로직을 여러 컨트롤러에서 재사용할 수 있습니다 일관성: 애플리케이션 전반에 걸쳐 일관된 에러 처리가 가능합니다 물론 특수한 경우에는 컨트롤러에서 직접 상태 코드를 다뤄야 할 수도 있습니다. 하지만 대부분의 경우, Nest.js가 제공하는 이러한 기능들을 활용하는 것이 더 효과적인 접근방식이 될 것 같습니다.\n이러한 방식에 대해 어떻게 생각하시나요?\n다시 개선한 협업 과정 가급적이면 Nest.js 에서 제공하는 철학을 지켜야하는게 맞다고 생각이 들지만, 우리 팀에서 협업하는 방식은 팀 전체적으로 원하는 컨벤션을 지키는게 좋다고 생각했습니다.\n위에서 언급했듯, 저희 프로젝트를 백엔드를 맡고 계신 다른 개발자분께서 맡으신 부분이라 최대한 그부분에 편하게 맞춰주려고 노력했습니다. 이전 스터디 세션 리팩토링 과정 에서 배우기를 코드 구현의 철학보다는 팀의 가치를 지키는게 중요하다고 생각했고, 팀이 원하는 컨벤션을 어느정도 맞추는 것도 중요하다고 생각하게 되었습니다.\n![[Pasted image 20241228225723.webp|200]]\n![[Pasted image 20241228225742.webp|200]]\n진정한 협업의 가치는 팀을 먼저 생각하기 가 아닐까 싶습니다. 무엇이든 정답이 없고, 진짜 협업의 가치를 쫓기 위해서는 저나 프레임워크의 원칙보다 팀원의 원칙을 따라가는게 맞지 않나 생각을 했고, 실제로 반영하여 Claude의 답변을 반영하진 않았고, 이대로 진행하려고 합니다!\n","permalink":"https://blog.moozeh.org/posts/2024/2024-12-28-jwt-%ED%86%A0%ED%81%B0-%ED%8C%8C%EC%8B%B1-%EB%B3%80%EA%B2%BD-%EA%B3%BC%EC%A0%95%EA%B3%BC-%ED%98%91%EC%97%85%EC%9D%98-%EA%B0%80%EC%B9%98%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B3%A0%EB%AF%BC/","summary":"\u003ch2 id=\"문제-상황\"\u003e문제 상황\u003c/h2\u003e\n\u003cp\u003e저는 \u003ccode\u003e토큰 인증방식\u003c/code\u003e 을 이용하여서 구현했습니다. 토큰 방식으로 해서 세션을 저장할 필요가 없어서 확장성 있게 설계할 수 있어서 좋았습니다.\u003c/p\u003e\n\u003cp\u003e하지만 문제가 생겼습니다. 기능 확장을 하는데 있어서 문제가 생겼는데요, 문제 상황은 이렇습니다. 질문지 개발을 다른 캠퍼께서하고 계셨는데, 질문지 스크랩에 대한 내용을 리턴해야합니다.\u003c/p\u003e\n\u003cp\u003e만약 로그인한 유저가 질문지(대충 리소스) 리스트를 받아오는데 있어서 자신이 어떤 질문지를 스크랩했는지 보여주는 식으로 질문지 리스트를 리턴해야한다 하는 유즈 케이스가 있습니다. 문제는 이때, 로그인하지 않은 유저는 모든 질문지 리스트에 스크랩 여부를 \u003ccode\u003efalse\u003c/code\u003e 로 하여 리턴하려고 했었는데요.\u003c/p\u003e","title":"JWT 토큰 파싱 변경 과정과 협업의 가치에 대한 고민"},{"content":"개요 OAuth 가 조금 어렵다고 해서 솔직히 하루 걸릴 줄 알았습니다. 하지만 차근차근 진행해보니 수월하게 진행할 수 있었는데, 그 과정을 개발일지로 남겨주는게 좋을 것 같아 미리 남겨봅니다.\n실제로 OAuth 를 예제로 만들어보는 블로그 글 들이 상당 수 존재하였으며, 이것들을 바탕으로 단순히 따라가기만 하면 될 것 같았습니다. 하지만 그 과정에서 이해되지 않는 부분이 존재하였고, 이 부분에서 트러블 슈팅이 조금 있었습니다.\n제가 어떻게 OAuth를 하는지 알려주어야 앞으로 OAuth 관련 기능 구현에 있어서 도움이 될 수 있을 것이라 판단하였기에 문서로 기록하고자 합니다.\nOAuth OAuth 개념 Resource Owner : 깃허브 등 제3자 시스템에 의해 보호된 자원의 소유자 (유저) Client : 사용자를 대신해서 리소스에 접근하는 서버 (저희 서비스) 를 뜻합니다. OAuth Client 라고 생각하면 좋습니다. Resource Server : 깃허브를 가리킵니다. Authorization Server : 깃허브의 인증서버를 뜻합니다. OAuth 토큰을 인증하고 발급하는 역할을 합니다. ![[Pasted image 20241228230201.webp]]\nGithub OAuth 깃허브에서 OAuth는 일반적으로 조직 혹은 개인 단위로 만들 수 있습니다. 또한 조직 구성원이 OAuth 앱을 만들고자 할 때는 조직의 소유자 에게 직접 승인을 요청해야합니다.\n따라서 저희는 그냥 제 개인 계정 에서 OAuth 앱을 만들기로 했습니다.\nRedirect URI, Homepage URI 이 부분에서 그냥 블로그를 따라하면서 의문이 들었던 점이 많았습니다. 일단은 결국에는 서버의 URI 를 따라가도록 해야합니다. 특히, Redirect URI 의 경우 프로토콜까지 완전히 일치 해야합니다. (후에 문제 해결 부분에 설명이 있습니다)\n쿼리 스트링의 code의 의미 OAuth 에 성공하면 Github OAuth의 경우, 사전에 등록해두었던 콜백 URI에 code 라고 불리는 항목에 특별한 숫자를 쿼리스트링에 담아 보냅니다. 이 코드는 임시 인증 코드입니다. 인증 성공 후 accessToken 을 얻기 위한 중간단계로 사용됩니다. 해당 코드로 accessToken 을 받을 수 있습니다.\n구현하기 실제로 구현하는데 있어서 블로그 글들을 여럿 참고하였습니다. 그중 passport 를 활용하는 글이 많았고, 이는 Nest.js 에서도 활용이 가능했기에 passport를 활용했습니다.\n실제로 구현하는데 있어서 단순히 쓰는 것은 정말 쉬웠습니다. 블로그에서 제공되는 예시를 따르면 되었기에 일단은 이를 바탕으로 응용한 코드들을 첨부해봅니다.\n// github.strategy.ts import { Injectable } from \u0026#34;@nestjs/common\u0026#34;; import { PassportStrategy } from \u0026#34;@nestjs/passport\u0026#34;; import \u0026#34;dotenv/config\u0026#34;; import { Profile, Strategy } from \u0026#34;passport-github\u0026#34;; import { AuthService } from \u0026#34;../auth.service\u0026#34;; @Injectable() export class GithubStrategy extends PassportStrategy(Strategy, \u0026#34;github\u0026#34;) { constructor(private readonly authService: AuthService) { super({ clientID: process.env.OAUTH_GITHUB_ID, // CLIENT_ID clientSecret: process.env.OAUTH_GITHUB_SECRET, // CLIENT_SECRET callbackURL: process.env.OAUTH_GITHUB_CALLBACK, // redirect_uri passReqToCallback: true, scope: [\u0026#34;profile\u0026#34;], // 가져올 정보들 }); } /** * GitHub에서 반환된 프로필 데이터를 가공 * @param request * @param accessToken * @param refreshToken * @param profile * @param done */ async validate( request: any, accessToken: string, refreshToken: string, profile: Profile, done: (error: any, user?: any) =\u0026gt; void ) { try { const user = await this.authService.githubLogin(profile); console.log(user); done(null, user); } catch (err) { console.error(err); done(err, false); } } } // auth.controller.ts import { Controller, Get, Redirect, Req, Res, UseGuards } from \u0026#34;@nestjs/common\u0026#34;; import { AuthGuard } from \u0026#34;@nestjs/passport\u0026#34;; @Controller(\u0026#34;auth\u0026#34;) export class AuthController { @Get(\u0026#34;github\u0026#34;) @UseGuards(AuthGuard(\u0026#34;github\u0026#34;)) async githubLogin(): Promise\u0026lt;void\u0026gt; {} @Get(\u0026#34;github/login\u0026#34;) @UseGuards(AuthGuard(\u0026#34;github\u0026#34;)) @Redirect() async githubLoginCallback(@Req() req) { const username: string = req.user.username; if (username) return { url: \u0026#34;/login/success/\u0026#34; + username }; return { url: \u0026#34;/login/failure\u0026#34; }; } @Get(\u0026#34;protected\u0026#34;) @UseGuards(AuthGuard(\u0026#34;jwt\u0026#34;)) protectedResource() { return \u0026#34;JWT is working!\u0026#34;; } } passport 에 대해 알아보기 실제로 passport 를 써보질 않아서 이번에 어떤 개념인지 아예 모르고 구현부터 했던 것 같습니다. 일단은 어떤 개념인지 알아야 하기 때문에 간단하게 공식 문서를 참고했습니다.\npassport는 expressjs 에서 인증/인가 과정을 위한 미들웨어라고 합니다. 인증 인가를 위한 미들웨어인 만큼, 자체적인 OAuth 지원 기능도 탑재하고 있엇습니다. passport 에서는 기본적으로 strategy 라는 구현체를 이용하여 여러개의 로그인 전략을 등록하는 형식으로 로그인을 지원하고 있었습니다.\nvar passport = require(\u0026#39;passport\u0026#39;); var LocalStrategy = require(\u0026#39;passport-local\u0026#39;); passport.use(new LocalStrategy(function verify(username, password, cb) { db.get(\u0026#39;SELECT * FROM users WHERE username = ?\u0026#39;, [ username ], function(err, user) { if (err) { return cb(err); } if (!user) { return cb(null, false, { message: \u0026#39;Incorrect username or password.\u0026#39; }); } crypto.pbkdf2(password, user.salt, 310000, 32, \u0026#39;sha256\u0026#39;, function(err, hashedPassword) { if (err) { return cb(err); } if (!crypto.timingSafeEqual(user.hashed_password, hashedPassword)) { return cb(null, false, { message: \u0026#39;Incorrect username or password.\u0026#39; }); } return cb(null, user); }); }); })); 위처럼 LocalStrategy 를 이용해서 Local(자체적인) 로그인 방식을 지원하는 미들웨어를 passport 자체가 use 하는 방식으로 등록을 할 수 있습니다.\n그리고, strategy 의 생성자 콜백함수 cb 에서는 아래와 같은 형식으로 호출할 수 있습니다. 이 cb 함수는 마치 익스프레스에서의 next 함수와 대응되는 것을 볼 수 있습니다.\nreturn cb(null, user); // 패스워드가 맞을 경우 유저 객체 반환 return cb(null, false); // 패스워드가 맞지 않을 경우 return cb(err); // 과정에 에러가 생겼으면 에러 객체를 첫번째 인자로 반환 그리고 정확히! 실제로 저희 구현 코드를 보면 validate 함수의 콜백함수 done 함수와 비교가 되는 것을 볼 수 있습니다.\nasync validate( request: any, accessToken: string, refreshToken: string, profile: Profile, done: (error: any, user?: any) =\u0026gt; void ) { try { const user = await this.authService.githubLogin(profile); console.log(user); done(null, user); } catch (err) { console.error(err); done(err, false); } } 하지만 expressjs 임에도 Nest.js 에서 사용할 수 있는 이유는 무엇일까요? 이는 auth.controller.ts 파일에서 githubLoginCallback 핸들러를 보시면 알 수 있습니다. (handleGithubLogin으로 리팩토링 할 예정입니다..) Nest.js 에서는 미들웨어도 지원합니다.\nNest.js 에서는 Express 미들웨어를 지원한다. NestJS에서 익스프레스 미들웨어를 적용하는 방법은 세가지가 있습니다.\n1. 전역 미들웨어 적용\nmain.ts에서 직접 Express 미들웨어를 적용할 수 있습니다. 코드를 보면 완전히 익스프레스와 동일한 것을 알 수 있습니다.\nimport { NestFactory } from \u0026#39;@nestjs/core\u0026#39;; import { AppModule } from \u0026#39;./app.module\u0026#39;; import * as cors from \u0026#39;cors\u0026#39;; import * as helmet from \u0026#39;helmet\u0026#39;; async function bootstrap() { const app = await NestFactory.create(AppModule); // Express 미들웨어 적용 app.use(cors()); app.use(helmet()); app.use(express.json()); app.use(express.urlencoded({ extended: true })); await app.listen(3000); } bootstrap(); 2. 모듈별 미들웨어 적용\n특정 모듈에서 NestModule을 구현하여 적용할 수 있습니다. 여기서 MiddlewareConsumer 라는 생소한 개념이 있는데, 이는 Nest 에서 자체적인 Middleware 클래스 를 적용할 경로, 컨트롤러 등을 지정할 수 있습니다.\nModule 에서 여태까지 내부를 실제 구현을 한 적이 없었는데, 이때 configure 메서드를 통해서 어떤 미들웨어를 어떻게 사용할지 지정할 수 있습니다. 이렇게 apply 를 활용하여 특정 미들웨어가 어떤 경로에서 사용될지 정하게 할 수 있습니다.\nimport { Module, NestModule, MiddlewareConsumer } from \u0026#39;@nestjs/common\u0026#39;; import * as cors from \u0026#39;cors\u0026#39;; @Module({ // ... 모듈 설정 }) export class AppModule implements NestModule { configure(consumer: MiddlewareConsumer) { consumer .apply(cors()) .forRoutes(\u0026#39;*\u0026#39;); // 특정 라우트나 컨트롤러를 지정할 수 있음 } } // app.module.ts @Module({ imports: [UsersModule], controllers: [AppController], providers: [AppService], }) export class AppModule implements NestModule { configure(consumer: MiddlewareConsumer) { consumer .apply(LoggerMiddleware) // 여러 설정 방법 .forRoutes(\u0026#39;users\u0026#39;) // 특정 경로에만 적용 // .forRoutes(UsersController) // 특정 컨트롤러에 적용 // .forRoutes(\u0026#39;*\u0026#39;) // 모든 경로에 적용 // .exclude(\u0026#39;auth\u0026#39;) // auth 경로 제외 // .forRoutes({ path: \u0026#39;users\u0026#39;, method: RequestMethod.GET }) // GET 메서드만 적용 } } 3. 커스텀 미들웨어 클래스로 래핑\nExpress 미들웨어를 NestJS 미들웨어 클래스로 래핑하여 사용할 수 있습니다. 이 뜻이 무엇이냐면, expressMiddleware를 그냥 래핑해서 실행할 수 있습니다.\nimport { Injectable, NestMiddleware } from \u0026#39;@nestjs/common\u0026#39;; import { Request, Response, NextFunction } from \u0026#39;express\u0026#39;; import * as expressMiddleware from \u0026#39;some-express-middleware\u0026#39;; @Injectable() export class CustomMiddleware implements NestMiddleware { use(req: Request, res: Response, next: NextFunction) { expressMiddleware(req, res, next); } } Strategy (전략) 패턴 파헤쳐보기 그러면 이제 passport 를 Nest 에서 사용할 수 있게 됐습니다. 사실 이것들을 편하게 사용하기 위해, Nest Module 로 랩핑할 수 있도록 하는 위 구현 코드 중에 strategy 는 무엇일까요? 그 부분을 알아내는데 조금 헤맸었고,AI 검색` 을 통해서 빠르게 배울 수 있엇습니다.\nPassport에서의 Strategy 는 실제 전략 패턴을 구현한게 맞습니다!\n전략 패턴이란\n전략 패턴은 런타임에 알고리즘의 동작을 선택 하게 해주는 디자인 패턴입니다. 알고리즘을 캡슐화 해서 원하는 대로 교체를 할 수 있게 만들어줍니다. 이는 상속과는 비교되는 구성(composition) 을 사용하는 디자인 패턴입니다.\n// 전략 등록 passport.use(new GitHubStrategy({ clientID: \u0026#39;id\u0026#39;, clientSecret: \u0026#39;secret\u0026#39;, callbackURL: \u0026#39;callback_url\u0026#39; }, verify)); // 전략 사용 app.get(\u0026#39;/auth/github\u0026#39;, passport.authenticate(\u0026#39;github\u0026#39;)); 우리가 use 를 사용하는건 각각의 알고리즘 전략을 등록하는 과정입니다. 실제 저희 구현 예시에서 AuthGuard 에 \u0026quot;github\u0026quot; 문자열을 넣어둔 것은 전략 패턴을 사용하기 위함입니다.\npassport-github 에 대해 알아보기 그렇다면 passport-github 가 무엇인지 이제 이해가 가실 겁니다. Github OAuth 인증 방식에 대한 전략(알고리즘)들을 구현한 것입니다. 타입스크립트 사용 시 @types/passport-github 을 통해서 타입도 받아서 사용할 수 있습니다.\npassport-github\n위 북마크를 통해 확인해본 결과, 이 또한, passport 에서 자체적으로 지원해주고 있는 것으로 알고 있었습니다. 이렇게 패키지를 나눈 이유는 필요한 OAuth 인증 코드만을 들여와서 사용할 수 있도록 모듈화를 지원하기 위해서 였습니다. 이런식으로 플러그인 기능 자체를 지원해보는 것도 괜찮을 것 같다고 생각이 들었습니다.\nCustom Passport Strategy 를 통해 SPA 에서 OAuth 사용하기 문제 상황 분명히 Github 를 활용한 OAuth는 잘 되고 있었습니다. 하지만, 콜백 을 보내주는데 뭔가 프론트엔드쪽에서 이슈가 계속 있었는데요. CORS 에러가 떴었습니다. 이 문제는 외부 실제로 액세스 토큰을 받아오는건 잘 됐는데 페이지 라우팅이 제대로 안되고 있었던 문제가 있었습니다.\n문제 원인 이부분은 프론트엔드에서 생긴 문제이다보니 자칫하면 그냥 넘어갈 수 있었던 문제였습니다. 하지만 이전 학교 프로젝트에서 협업을 하면서, API나 인증쪽으로 문제가 많이 생겼던지라 걱정이 되었었고, 따라서 이번에 협업을 하면서 서버와 관련된 이슈를 계속 요청했었습니다.\n알고보니, OAuth 에서 인증을 성공하면 서버 측에서 자동으로 302 요청을 보냈습니다. 이 과정에서 CORS 가 생겼습니다.\n이는 웹서버와 API 서버를 분리했어서 일어난 일이었습니다. WAS에서 웹서버 측으로 응답 HTTP 메세지가 프록시 되어 날라가니 생기는 에러였습니다. NGINX에서 CORS를 허용해줄 수 있겠지만, CORS 헤더를 설정하는 것 자체가 조심스러웠습니다. CORS 관련 문제를 불필요하게 헤더를 수정하지 않고도 고치는 방법도 있지 않을까 고민했습니다.\n특히나, 프론트엔드에서는 SPA 인 리액트를 사용하는 만큼, 302 요청을 직접 처리하지 않고도 자연스럽게 API로써 처리될 수 있게 API 서버 로써의 기능을 극대화하고 싶었습니다.\n해결 시도 passport-github 라이브러리를 이용해서 302 응답을 억제하려고 시도했지만, 불가능했습니다.\n그래서 아예 외부 라이브러리를 안쓰고, 필요할 경우 자체적으로 구현해보는 것도 좋다고 느꼈습니다. 그래서 직접 passport 전략을 구현하려고 시도했습니다.\n이때 사용한건 passport-custom 입니다. 이 라이브러리는 커스텀으로 전략을 만들 수 있는 passport의 하위 라이브러리인데, 처음부터 끝까지 개발자에게 인증전략 책임을 요구하는 라이브러리였습니다.\n![[Pasted image 20241228230858.webp]]\n이 과정에서 깃허브에서 OAuth 하는 과정을 알게 되었는데, 앞부분은 생략하고, 인증에 성공했을 경우 Github 측에서 콜백 URL을 통해 param으로 코드를 보냅니다.\n저희는 이 코드를 이용해서 깃허브에 진짜 accessToken을 받아와줄 수 있었고, passport-github는 이 과정을 직접 하고 있었고, 이 코드를 깃허브로 리다이렉팅으로 보내주는 과정에서 에러가 났던 것이었습니다.\n그래서 이 부분을 해결하기 위해 프론트엔드 캠퍼분과 페어프로그래밍을 진행했습니다. 코드를 서버측으로 보내고, 코드를 받은 서버는 직접 깃허브에 인증 요청을 보내 액세스토큰을 서버에서 받아오도록 수정했습니다.\n// github-auth.strategy.ts import { Injectable, UnauthorizedException } from \u0026#34;@nestjs/common\u0026#34;; import { PassportStrategy } from \u0026#34;@nestjs/passport\u0026#34;; import { Strategy } from \u0026#34;passport-custom\u0026#34;; import { Request } from \u0026#34;express\u0026#34;; import axios from \u0026#34;axios\u0026#34;; import \u0026#34;dotenv/config\u0026#34;; import { AuthService } from \u0026#34;@/auth/auth.service\u0026#34;; import { JwtService } from \u0026#34;@/auth/jwt/jwt.service\u0026#34;; @Injectable() export class GithubStrategy extends PassportStrategy(Strategy, \u0026#34;github\u0026#34;) { private static REQUEST_ACCESS_TOKEN_URL = \u0026#34;https://github.com/login/oauth/access_token\u0026#34;; private static REQUEST_USER_URL = \u0026#34;https://api.github.com/user\u0026#34;; constructor( private readonly authService: AuthService, private readonly jwtService: JwtService ) { super(); } async validate(req: Request) { const { code } = req.body; if (!code) { throw new UnauthorizedException(\u0026#34;Authorization code not found\u0026#34;); } const { access_token: accessToken } = (await this.fetchAccessToken(code)).data; const profile = (await this.fetchGithubUser(accessToken)).data; const user = await this.authService.getUserByGithubId(profile.id); const token = await this.jwtService.createJwtToken(user); return { jwtToken: token, }; } private async fetchAccessToken(code: string) { return axios.post( GithubStrategy.REQUEST_ACCESS_TOKEN_URL, { client_id: process.env.OAUTH_GITHUB_ID, client_secret: process.env.OAUTH_GITHUB_SECRET, code, }, { headers: { Accept: \u0026#34;application/json\u0026#34; }, } ); } private async fetchGithubUser(accessToken: string) { return axios.get(GithubStrategy.REQUEST_USER_URL, { headers: { Authorization: `Bearer ${accessToken}`, }, }); } } 그렇게해서 내부적으로 콜백 URL로 리액트가 움직여지면, 내부적인 API요청을 보내 액세스토큰을 받아오고, 그 후 내부적인 클라이언트 라우터로 원하는 랜딩 페이지로 이동하게끔 만들었고, 로그인 결과에 따라 성공 실패 여부를 토스트 메세지로 전송하게 만들어서 해결했습니다.\n그 외 트러블 슈팅 The redirect_uri is not associated with this application.\n토큰 인증 방식과, OAuth 는 맞지 않는 방식일까요? 실제로 AI 검색 을 할 때 AI가 잘 이해하지 못하는 경우가 있는데, 내가 말을 제대로 못한 경우, 아니면 일반적인 케이스가 아닌 경우 이런 대답을 하는 경향이 있었습니다.\n이는 실제로 JWT 토큰 인증 방식과 OAuth 인증 과정을 같이 지원하도록 만들고 싶어서 질문할 때에도 동일하게 대답했는데, AI가 헷갈렸던 이유가 OAuth 토큰 자체가 JWT 토큰이기 때문입니다.\n결국 제가 우리 서비스용 JWT토큰 을 OAuth 를 통해 깃허브로부터 받은 리소스 로부터 유저 테이블 에 접근하여 관련 접속 정보를 암호화하여 클라이언트로 넘겨주면 되지 않을까? 라는 생각을 했고, 이 과정에서 테이블 설계에 대한 고민을 했던 것 같습니다.\n![[Pasted image 20241228230712.webp]]\n따라서 실제로 Github 유저 정보 로부터 User 테이블 을 접속하게 하기위해 github_id 라는 필드를 추가하여서 문제를 해결했습니다. 아래는 실제로 만든 비즈니스 로직입니다. Github 유저 정보로부터 유저가 존재하면 리턴하고, 존재하지 않는다면 이를 바탕으로 실제로 저희 서비스의 유저 엔티티를 만들어서 리턴해줍니다.\n@Transactional() public async githubLogin(profile: Profile) { const user = await this.userRepository.getUserByGithubId( parseInt(profile.id) ); if (!user) return await this.userRepository.createUser({ githubId: parseInt(profile.id), username: `camper_${profile.id}`, }); return user; } 기술적 고민 accessToken 을 언제 써야할까요? 현재 구현 방식에 따르면, accessToken 을 결국에는 쓸 필요가 없어집니다. strategy 클래스 내의 validate 함수에서 보면, OAuth 인증은 이미 성공했다는 가정 하에 profile 객체가 들어옵니다. 그렇기에 실패하면 자체적으로 유저 테이블에 유저를 새롭게 생성해주는 경우는 저희 서비스에서 로그인에 실패한 경우 만을 상정하고 있습니다.\n현재 accessToken 이 필요한지 아닌지를 어떻게 생각하느냐는 저희가 어떻게 구현하느냐에 따라 다른 것으로 생각하면 됩니다.\nAI 검색 을 통해 물어본 결과, Github 인증 만을 사용하는 경우 액세스토큰은 필요 없다고 합니다. 실제로 현재 accessToken 을 어플리케이션 내에서 저장하고 있진 않는 상황입니다.\n결국, Github 인증 → 유저 임을 인증 하는 과정 자체만을 요구로하는 우리 서비스 특성상, accessToken 을 따로 저장할 필요가 없다는 뜻입니다. 실제 데이터베이스에서도 Github 고유ID번호 를 통해서 우리의 유저 데이터베이스에 접근할 수 있도록 만들어놨습니다.\n또한, 사용자의 깃허브 리소스에 주기적으로 접근해야하는 경우 별도로 액세스토큰이 필요합니다. 이와 같은 경우도 해당되지 않으므로 별도로 토큰을 저장할 필요가 없다고 판단하게 됐습니다.\nDev 서버용 OAuth 어플리케이션을 만드는게 과연 바람직할까? 실제로 AI 검색 을 통해 물어본 결과 best practice 라는 답변을 들을 수 있었습니다. 하지만 과연 두개를 만들어서 관리하는게 정말 바람직할까에 대해서는 아직 잘 모르겠습니다.\n보안성 독립적인 설정 테스트 용이성 실제로 프로덕션을 만드는 환경에서는 어떻게 할 지 고민이 될 것 같습니다.\n일단은 .env 파일도 dev 서버를 위해 공유해주는 팀원들에게는 데브용 OAuth 토큰을 공유해주고 있고, 실제 배포는 나에게 전적으로 위임되어 저 홀로 관리를 하고 있는데, 터미널을 통해 .env 파일을 새롭게 작성할 때에는 실제 프로덕션 환경에서 쓰이는 OAuth 앱을 사용중에 있습니다.\n","permalink":"https://blog.moozeh.org/posts/2024/2024-12-21-custom-passport-%EB%A1%9C-github-oauth-%EB%A1%9C%EC%A7%81%EC%9D%84-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/","summary":"\u003ch2 id=\"개요\"\u003e개요\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eOAuth\u003c/code\u003e 가 조금 어렵다고 해서 솔직히 하루 걸릴 줄 알았습니다. 하지만 차근차근 진행해보니 수월하게 진행할 수 있었는데, 그 과정을 개발일지로 남겨주는게 좋을 것 같아 미리 남겨봅니다.\u003c/p\u003e\n\u003cp\u003e실제로 OAuth 를 예제로 만들어보는 \u003ccode\u003e블로그 글\u003c/code\u003e 들이 상당 수 존재하였으며, 이것들을 바탕으로 단순히 따라가기만 하면 될 것 같았습니다. 하지만 그 과정에서 이해되지 않는 부분이 존재하였고, 이 부분에서 트러블 슈팅이 조금 있었습니다.\u003c/p\u003e\n\u003cp\u003e제가 \u003ccode\u003e어떻게 OAuth를 하는지 알려주어야 앞으로 OAuth 관련 기능 구현에 있어서 도움이 될 수 있을 것이라 판단하였기에 문서로 기록하고자 합니다.\u003c/code\u003e\u003c/p\u003e","title":"Custom Passport 로 Github OAuth 로직을 직접 구현하기"},{"content":"문제 상황 스터디 세션을 리팩토링 과정에서 코드가 길어져서 고민을 했었습니다. 특히나 비즈니스 로직과 레포지토리 코드가 혼재 해 있었고, 그 부분에서 하나의 핸들러가 호출하는 로직에서 서비스.. 레포지토리.. 이렇게 다양한 계층을 따라 로직이 퍼져있었습니다.\n예를 들면, 레포지토리에서는 데이터 베이스 (혹은 자료 저장소) 에 관해서 어떤 정보가 저장되어 있어야하는지\n그래서 해당 부분을 리팩토링을 시도했으나, 오히려 팀의 성장에 방해가 되었습니다. 그 부분에 있어서는 조금 더 깔끔한 코드와 프로토콜을 만들고자 하는 욕심 이 1순위로 작용했던 것이 아닐까 하고 회고하면서 판단해봅니다.\n협업의 본질을 잊어버리고 스터디 기능 자체를 1일만에 개발한 건 분명 좋은 발전이었으나, 그만큼 3일을 팀 입장에서는 허비시키게 만들었습니다.\n사실 이벤트 명을 바꾼건 크게 문제가 되지 않았습니다. 그냥 바꾸면 되니까요. 그런데 문제는 이런 점이었습니다.\n![[Pasted image 20241228220445.webp]]\n위 내용은 제 리팩토링(이라는 이름의 리워크)에 영향받은, 저희 팀원의 스크럼 내용입니다. 이게 과연 협업일까요..? 이때 스스로 많이 반성하게 되었습니다. 스스로 협업을 위한 코드랍시고 나만을 위한 깔끔한 코드를 짜려고 했던 것 같았습니다.\n해결 시도 과정 결국 잘 모르겠어서 멘토님께 여쭤보았습니다. 부스트캠프에서 주어진 팀 멘토링 시간을 활용하였고, 글로 남겨서 정리하여 멘토님께 질문드려봤습니다. 이때까지만 해도 저는 나만을 위한 깔끔한 코드 에 집착하고 있었고, 이에 아래와 같이 질문하게 되었습니다.\n질문\n스터디 세션 부분을 리팩토링하면서 고민을 많이했었습니다.. 아예 구조 자체를 바꿔버리는 스펙이 변경되는 규모에서 100줄 이상 길어지는 코드를 여러 파일로 나누어 관리하다보니 아예 함수 (방을 나가는 로직) 만을 위한 서비스 클래스를 작성하게 되었고, 구별하게 되었는데 결론적으로는 예전보다는 보기가 쉽다고 팀 내부적으로 결론이 났었습니다.\n그런데 이게 나중에 가서 최적화 측면에서 문제가 될 지 궁금합니다. 실제로 클래스 기반으로 함수를 짜실 때 멘토님께서는 어떤 방식으로 길어지는 로직을 분리하시거나 관리하시는지 궁금합니다.\n멘토님의 답변\n가독성은 사실 주관적인 것입니다. 그래서 저는 클래스 기반으로 함수를 짜는 것은 개인적으로 추천하지 않습니다. 보통 재사용성이 높은 코드를 분리하는게 가독성이 좋다고 합니다. 그렇다고 두세번 쓰인다고 무조건 분리하는 것은 추천하지 않습니다.\n보통 코드의 줄수를 줄이기만을 위해 고치려고 하지는 않습니다. 코드가 길어져도 분명한 역할이 있다면 그대로 두는게 맞다고 생각합니다. 많이 쓰이는 오픈소스 라이브러리들 중에서도 한 파일에 천 줄이 넘는 코드가 많습니다. 물론 구조화가 잘 되어서 나눠지면 좋지만, 그럴 수 없는 경우도 많으며 이때 코드가 길기 때문에 분리해야한다!는 곤란하다고 생각합니다. 오히려 한 파일에 긴 코드가 있는게 더 가독성이 높을 때도 많습니다. 코드의 길이보다도 구조에 중점을 두는게 더 좋을 때도 있습니다. 그러니, 확장 가능성을 고려해서 구조화를 하고, 분리를 해보세요\n멘토님께서는 실제로 클린코드와 같은 개념에 대해 의식하고 계신 것 같았습니다. 저도 실제로 클린 코드의 위험성에 대해 인지는 하고 있었지만, 멘토님께서는 많이 우려스러운 답변을 주셔서 저도 속으로는 의아했습니다.\nimport { RoomDto } from \u0026#34;@/room/dto/room.dto\u0026#34;; import { RoomRepository } from \u0026#34;@/room/room.repository\u0026#34;; import { Injectable } from \u0026#34;@nestjs/common\u0026#34;; @Injectable() export class RoomHostService { public constructor(private readonly roomRepository: RoomRepository) {} private getNewHost(room: RoomDto) { return Object.values(room.connectionMap).sort((a, b) =\u0026gt; a.createAt - b.createAt)[0]; } public async delegateHost(roomId: string) { const room = await this.roomRepository.getRoom(roomId); if (!room) throw new Error(\u0026#34;Invalid room Id\u0026#34;); const newHost = this.getNewHost(room); const found = room.connectionMap[newHost.socketId]; if (!found) throw new Error(\u0026#34;invalid new host id\u0026#34;); room.host = newHost; await this.roomRepository.setRoom(room); return newHost; } } 위 방식도 Nest.js 에서 각각의 의존성이 어떻게 관리되고 있는지 생각해봐야합니다.\nNest.js 에서 의존성을 관리하는 방법 기본적으로 Nest.js 에서는 의존성을 하나의 인스턴스(싱글턴 객체)로 생성하여 관리하고 있습니다. 그렇게 될 경우, 서비스를 마구잡이로 나눌 경우, 제아무리 싱글턴 객체라도 메모리를 차지하는 것은 어쩔 수 없는 사실입니다.\n물론, 멘토님께서도 완벽히 위와같은 코드를 분리하는 것에 반대를 하지 않으셨고, 애매한 상황이라고 말씀해주시긴 하셨습니다. 무엇이든 정답이 없습니다. 하나의 방법이 정답이라고 생각했던 것이 잘못되었다고 생각했습니다. 이번 케이스에서는 프론트엔드 개발자분의 스펙 변경에 대해서 고려하지 않고, 단순히 코드의 가독성만을 위해서 구조를 나눈 것이 주객전도됨을 깨달았습니다.\n특히나, 확장성을 고려하여 roomService 의 인터페이스를 맞추지 않았어서 문제가 되었습니다. 실제로 이렇게 편하게 보기위해 코드를 짰을 경우, 외부 모듈에서 참조를 하게 되는 경우 roomService가 아니라 roomHostService를 불러와야하는지 어떤걸 불러와야 적용할 수 있는지 확인할 수 없었습니다. 처음 적용할 때 roomService 에 없는 것을 보고 엥? 싶을 것이다 생각이 들었습니다.\n특히나 리턴되는 값을 마구잡이로 바꿔가면서 테스트 코드의 중요성을 깨닫게 되었습니다. 리팩토링을 할 때 테스트 코드를 통해 스펙을 고정하고 리팩토링을 하게 되어야함을 깨달았습니다.\n코드가 500줄이 되던 400줄이 되던, 실제 오픈 소스 코드는 1000줄이 되더라도, 특정 클래스가 수행하는 역할을 잘 수행한다면 상관없다라는 부분에서 깨달음을 얻었습니다. 확실히, 방을 생성하는 것만 roomService 가 아닌, roomCreateService 에서 불러오는 게 확실히 이상하다고 생각이 들었습니다.\n리팩토링을 올바르게 하기 위한 과제 확장성을 염두에 두고 설계하기 사실 제가 생각하기에 서비스를 나눌 때 과하게 나누었다고 생각은 들었습니다.\n![[Pasted image 20241228220621.webp]]\n현재 제가 리팩토링한 서비스들을 폴더로 depth를 두어, 각각의 기능은 각각의 서비스에서 하는 식으로 함수 하나가 길어지는 경우를 나누어서 관리하기 편하도록 만들었습니다. 그리고, 아래 코드는 실제 room-create.service.ts 코드입니다.\nimport { Injectable } from \u0026#34;@nestjs/common\u0026#34;; import { CreateRoomInternalDto } from \u0026#34;@/room/dto/create-room.dto\u0026#34;; import { EMIT_EVENT } from \u0026#34;@/room/room.events\u0026#34;; import { WebsocketService } from \u0026#34;@/websocket/websocket.service\u0026#34;; import { RoomRepository } from \u0026#34;@/room/room.repository\u0026#34;; import { QuestionListRepository } from \u0026#34;@/question-list/question-list.repository\u0026#34;; import { RoomJoinService } from \u0026#34;@/room/services/room-join.service\u0026#34;; import { createHash } from \u0026#34;node:crypto\u0026#34;; import \u0026#34;dotenv/config\u0026#34;; @Injectable() export class RoomCreateService { private static ROOM_ID_CREATE_KEY = \u0026#34;room_id\u0026#34;; public constructor( private readonly roomRepository: RoomRepository, private readonly socketService: WebsocketService, private readonly questionListRepository: QuestionListRepository, private readonly roomJoinService: RoomJoinService ) {} public async createRoom(dto: CreateRoomInternalDto) { const { socketId, nickname } = dto; const id = await this.generateRoomId(); const socket = this.socketService.getSocket(socketId); const currentTime = Date.now(); const questionListContents = await this.questionListRepository.getContentsByQuestionListId( dto.questionListId ); const roomDto = { ...dto, id, inProgress: false, connectionMap: {}, participants: 0, questionListContents, createdAt: currentTime, host: { socketId: dto.socketId, nickname, createAt: currentTime, }, }; await this.roomRepository.setRoom(roomDto); socket.emit(EMIT_EVENT.CREATE, roomDto); } // TODO: 동시성 고려해봐야하지 않을까? private async generateRoomId() { const client = this.socketService.getRedisClient(); const idString = await client.get(RoomCreateService.ROOM_ID_CREATE_KEY); let id: number; if (idString \u0026amp;\u0026amp; !isNaN(parseInt(idString))) { id = await client.incr(RoomCreateService.ROOM_ID_CREATE_KEY); } else { id = parseInt(await client.set(RoomCreateService.ROOM_ID_CREATE_KEY, \u0026#34;1\u0026#34;)); } return createHash(\u0026#34;sha256\u0026#34;) .update(id + process.env.SESSION_HASH) .digest(\u0026#34;base64url\u0026#34;); } } 코드의 줄 수에 연연하지 않고, 객체의 책임을 생각해보기 코드의 줄 수가 많으면 읽기 힘드신 분이 많으신가요, 아니면 코드가 길어도 인터페이스만 깔끔하면 선호하시나요? 저는 저만의 방법을 많이 생각을 많이했고, 특히 DTO 와 엔티티 의 형태가 조잡하게 변환이 되고 있었음을 깨달았습니다. 그래서 형태를 일관적으로 유지하는 것에 대해서 신경쓰는게 중요하다는 것을 파악했습니다.\n일단 첫번째로, API 의 입출력 형태를 맞추기 위한 DTO를 설정했습니다.\nimport { ArrayMaxSize, ArrayMinSize, IsArray, IsEnum, IsNotEmpty, IsNumber, Max, Min, } from \u0026#34;class-validator\u0026#34;; import { Connection, RoomStatus } from \u0026#34;@/room/domain/room\u0026#34;; import { Question } from \u0026#34;@/question-list/entity/question.entity\u0026#34;; export class CreateRoomDto { private static MAX_CATEGORY_SIZE = 3; private static MIN_CATEGORY_SIZE = 1; private static MAX_PARTICIPANT_SIZE = 5; private static MIN_PARTICIPANT_SIZE = 1; @IsNotEmpty() title: string; @IsEnum(RoomStatus, { message: \u0026#34;Status must be either PUBLIC or PRIVATE\u0026#34;, }) status: RoomStatus; @IsNotEmpty() nickname: string; @IsNotEmpty() @IsArray() @ArrayMaxSize(CreateRoomDto.MAX_CATEGORY_SIZE) @ArrayMinSize(CreateRoomDto.MIN_CATEGORY_SIZE) category: string[]; @IsNumber() @Min(CreateRoomDto.MIN_PARTICIPANT_SIZE) @Max(CreateRoomDto.MAX_PARTICIPANT_SIZE) maxParticipants: number; @IsNumber() questionListId: number; } export interface CreateRoomResponseDto { title: string; status: RoomStatus; nickname: string; maxParticipants: number; category: string[]; questionListId: number; socketId: string; id: string; inProgress: boolean; connectionMap: Record\u0026lt;string, Connection\u0026gt;; participants: number; questionListContents: Question[]; createdAt: number; host: Connection; } 이렇게 반환 값을 정해버리는 순간, 리팩토링을 하면서 API를 변경할 일이 없어졌습니다. 어쨌거나 타입스크립트 컴파일러 단에서 잡아주니까, 보다 안정적으로 리팩토링할 수 있었습니다.\n두번째로, 이런 DTO들을 통해 레포지토리에 연관되고 있음을 깨달았습니다.\nimport { Injectable } from \u0026#34;@nestjs/common\u0026#34;; import { InjectRepository } from \u0026#34;@moozeh/nestjs-redis-om\u0026#34;; import { Repository } from \u0026#34;redis-om\u0026#34;; import { RoomEntity } from \u0026#34;@/room/room.entity\u0026#34;; import { RoomDto } from \u0026#34;@/room/dto/room.dto\u0026#34;; @Injectable() export class RoomRepository { public constructor( @InjectRepository(RoomEntity) private readonly roomRepository: Repository\u0026lt;RoomEntity\u0026gt; ) {} // TODO : .from 메서드 구현 필요? public async getAllRoom(): Promise\u0026lt;RoomDto[]\u0026gt; { const allRooms = await this.roomRepository.search().return.all(); return allRooms.map((room: RoomEntity) =\u0026gt; { const connectionMap = JSON.parse(room.connectionMap || \u0026#34;{}\u0026#34;); return { connectionMap: JSON.parse(room.connectionMap || \u0026#34;{}\u0026#34;), createdAt: room.createdAt, host: JSON.parse(room.host), maxParticipants: room.maxParticipants, maxQuestionListLength: room.maxQuestionListLength, questionListId: room.questionListId, questionListTitle: room.questionListTitle, currentIndex: room.currentIndex, status: room.status, title: room.title, id: room.id, category: room.category, inProgress: room.inProgress, participants: Object.keys(connectionMap).length, }; }); } public async getRoom(id: string): Promise\u0026lt;RoomDto\u0026gt; { const room = await this.roomRepository.search().where(\u0026#34;id\u0026#34;).eq(id).return.first(); if (!room) return null; const connectionMap = JSON.parse(room.connectionMap || \u0026#34;{}\u0026#34;); return { category: room.category, inProgress: room.inProgress, connectionMap, createdAt: room.createdAt, currentIndex: room.currentIndex, maxQuestionListLength: room.maxQuestionListLength, questionListId: room.questionListId, questionListTitle: room.questionListTitle, host: JSON.parse(room.host), participants: Object.keys(connectionMap).length, maxParticipants: room.maxParticipants, status: room.status, title: room.title, id: room.id, }; } public async setRoom(dto: RoomDto): Promise\u0026lt;void\u0026gt; { const room = new RoomEntity(); room.id = dto.id; room.category = dto.category; room.inProgress = dto.inProgress; room.title = dto.title; room.status = dto.status; room.currentIndex = dto.currentIndex; room.connectionMap = JSON.stringify(dto.connectionMap); room.maxParticipants = dto.maxParticipants; room.maxQuestionListLength = dto.maxQuestionListLength; room.questionListId = dto.questionListId; room.questionListTitle = dto.questionListTitle; room.createdAt = Date.now(); room.host = JSON.stringify(dto.host); await this.roomRepository.save(room.id, room); } public async removeRoom(id: string): Promise\u0026lt;void\u0026gt; { const entities = await this.roomRepository.search().where(\u0026#34;id\u0026#34;).equals(id).return.all(); for await (const entity of entities) { await this.roomRepository.remove(entity.id); } } } 보시면 redis-om 으로 인해 객체의 직렬화를 일일이 해주고 있었습니다. 레포지토리는 순전히 엔티티를 반영하고 가져오기만을 해야한다고 생각했습니다. 그것이 명확한 책임의 경계선이라고 생각했고, 각자의 도메인마다 필요한 객체의 직렬화가 필요한 프로퍼티를 어떻게 할지 기술적으로 어려움에 직면했습니다.\n문제 해결 과정 1. Facade 패턴으로 redis-om 엔티티에 도메인 로직 결합하기 확장성 있는 설계를 하라는 멘토님의 말씀을 듣고 고민을 하게 되었습니다. 그래서 현재 제가 리팩토링했던 세션 백엔드 코드 부분(room)에서 어떤 문제가 있는지 고민해본 결과, 현재 redis entity 로 매번 변환 과정을 거치고, 서비스나 레포지토리에서 형변환을 하여 엔티티에 넣는게 과연 맞는지 의문이 들었습니다.\n이후 최근에 다른 부캠에서 수료한 친구와 논의도 해보며 Claude 로도 검색을 해서 찾아보았고, 그 과정에서 DDD 라는 용어가 있음을 알게 됐고, 당연히 앞서 언급된 클린코드처럼 해당 개발방법론에 대해서도 주의할 필요가 있었습니다.\nDDD 의 정의..? ⚠ DDD를 적용했다는 의미가 아닙니다.\n사실 넓은 의미에서 DDD가 어떤건지도 잘 모를 뿐더러, 지금 적용하기에는 시간이 많이 부족하다고 생각이 들었습니다. 정의 자체에 대한 내용은 많이 나와있습니다. 간략하게 얘기하면, DDD는 복잡한 소프트웨어를 개발할 때 비즈니스 도메인을 중심으로 설계하고 개발하는 방법론입니다.\n저는 DDD가 제공하는 모든 개념을 사용하진 않았고, 단지 비즈니스 도메인의 역할에 집중하자 라는 문장 한마디로 시작했습니다.\n여태까지 서비스, 컨트롤러 등 데이터보다는 사실 로직에 중심을 두었습니다. 모델의 경우도 단순 interface 로 두고 이 객체의 실제 세상에서의 역할 보다, 그저 컴퓨터 세상에서의 자료형 에 집중했던 것 같습니다.\nDDD 라는 개념을 도입하면서 또 클린 코드에 집착하는 것 아니냐 할 수 있겠습니다. 하지만 DDD에서 나온 도메인 로직에 대한 관심분리는 현재 제 프로젝트에 있어서 필요하다고 판단을 했습니다. 또한, 실제로 프론트엔드에서 변경요청이 잦기도 하고, 앞서 겪었던 스펙 변경에 따른 변경과 소통의 혼선이 잦았습니다.\n특히나, DTO 를 변환하는 로직이 중복되고 있음을 확인했고, 객체의 형변환이나 검증 로직이 자주 사용되거나, 역할의 책임이 결합되어있으므로 분리되어야함을 깨달았습니다.\n이때 다만 실제로 DDD를 적용하지 않고, 마냥 받아들이는 것이 좋지 않다는 경험을 이전에 클린코드와 관련해 멘토님과 논의해봤던 것을 다시 회상하였고, DDD 에서 쓰이는 개념을 가져오기로 했습니다.\n첫번째 해결 시도 : redis-om 엔티티를 상속받기 첫번째 시도는 바로 현재 사용중인 redis-om 에 접근 제한자와 setter,getter 를 넣자는 생각이었습니다. 저는 여태까지 모델에 로직을 넣으면 안돼! 라는 틀에 박힌 생각을 해왔었습니다만, 이번엔 그냥 제가 편하고 관리가 편하면 되지라는 마인드로 도전해보았습니다.\n하지만 이때 첫번째 문제가 생겼습니다. 바로 nestjs-edis-om 라는 외부라이브러리에서 Schema 에서는 함수 프로퍼티를 무시해서 보내주지 않았습니다.\n![[Pasted image 20241230161928.webp]] redisom 어댑터를 쓰기엔 기능 확장이 부족했다..\n해당 라이브러리인 nestjs-redis-om 라이브러리를 직접 고치기 위해 제가 포크도 하였지만, 시간과 비용이 많이 발생할 것이라고 예측했습니다.\nRedis 에서 데이터를 저장하는 방식 Redis 에서 데이터를 저장할 때, 객체를 저장할 수 있습니다. 하지만, 각 객체의 프로퍼티는 직렬화가 필수인데요.\n![[Pasted image 20241230162006.webp]]\n![[Pasted image 20241230162020.webp]]\n실제로 저는 복잡한 객체를 바로바로 제공할 수 있도록 하려고 했고, 연결 정보 자체에 대한 메타데이터들을 room 객체 하위에 connectionMap 이라는 JSON 객체로 저장하고 있습니다.\n사실 지금 보면 이를 별도의 도메인으로 만들어 따로 저장해야한다고 생각합니다. 하지만 결국, 이를 따로 키로써 저장하게 되면 키를 조회를 많이 하게 됩니다. 싱글스레드인 레디스에서는 최대한 키를 검색하는 과정을 줄여야한다고 생각했습니다.\n그렇기에 결국 키를 하나로 저장하려면 직렬화는 필수였습니다. 그래서 이를 위해서는 해당 room 객체의 직렬화 와 역직렬화만을 위한 별도의 로직 함수들이 자주 사용될 것이라고 생각했습니다.\n그래서 이렇게 자주 사용되는 도메인 로직을 직접 분리해보기로 했고, 이게 진정한 확장성 있는 설계라고 생각이 들었습니다.\n두번째 해결 시도 : 엔티티와 도메인을 넘나드는 도메인 서비스 그러면 일단 가장 간단하게 자주 사용되는 로직을 분리하는 방법은 뭘까요? 그것은 바로 도메인 로직만을 담은 roomDomainService 를 만드는 방법입니다.\n이 방법도 괜찮은 방법이라고 생각했습니다. 아래와 같은 repository 코드를 보면, 실제로 직렬화와 역직렬화를 같이 맡고 있어서 자주 사용되고 있습니다.\nimport { Injectable } from \u0026#34;@nestjs/common\u0026#34;; import { InjectRepository } from \u0026#34;@moozeh/nestjs-redis-om\u0026#34;; import { Repository } from \u0026#34;redis-om\u0026#34;; import { RoomEntity } from \u0026#34;@/room/room.entity\u0026#34;; import { RoomDto } from \u0026#34;@/room/dto/room.dto\u0026#34;; @Injectable() export class RoomRepository { public constructor( @InjectRepository(RoomEntity) private readonly roomRepository: Repository\u0026lt;RoomEntity\u0026gt; ) {} // TODO : .from 메서드 구현 필요? public async getAllRoom(): Promise\u0026lt;RoomDto[]\u0026gt; { const allRooms = await this.roomRepository.search().return.all(); return allRooms.map((room: RoomEntity) =\u0026gt; { const connectionMap = JSON.parse(room.connectionMap || \u0026#34;{}\u0026#34;); return { connectionMap: JSON.parse(room.connectionMap || \u0026#34;{}\u0026#34;), createdAt: room.createdAt, host: JSON.parse(room.host), maxParticipants: room.maxParticipants, maxQuestionListLength: room.maxQuestionListLength, questionListId: room.questionListId, questionListTitle: room.questionListTitle, currentIndex: room.currentIndex, status: room.status, title: room.title, id: room.id, category: room.category, inProgress: room.inProgress, participants: Object.keys(connectionMap).length, }; }); } public async getRoom(id: string): Promise\u0026lt;RoomDto\u0026gt; { const room = await this.roomRepository.search().where(\u0026#34;id\u0026#34;).eq(id).return.first(); if (!room) return null; const connectionMap = JSON.parse(room.connectionMap || \u0026#34;{}\u0026#34;); return { category: room.category, inProgress: room.inProgress, connectionMap, createdAt: room.createdAt, currentIndex: room.currentIndex, maxQuestionListLength: room.maxQuestionListLength, questionListId: room.questionListId, questionListTitle: room.questionListTitle, host: JSON.parse(room.host), participants: Object.keys(connectionMap).length, maxParticipants: room.maxParticipants, status: room.status, title: room.title, id: room.id, }; } public async setRoom(dto: RoomDto): Promise\u0026lt;void\u0026gt; { const room = new RoomEntity(); room.id = dto.id; room.category = dto.category; room.inProgress = dto.inProgress; room.title = dto.title; room.status = dto.status; room.currentIndex = dto.currentIndex; room.connectionMap = JSON.stringify(dto.connectionMap); room.maxParticipants = dto.maxParticipants; room.maxQuestionListLength = dto.maxQuestionListLength; room.questionListId = dto.questionListId; room.questionListTitle = dto.questionListTitle; room.createdAt = Date.now(); room.host = JSON.stringify(dto.host); await this.roomRepository.save(room.id, room); } public async removeRoom(id: string): Promise\u0026lt;void\u0026gt; { const entities = await this.roomRepository.search().where(\u0026#34;id\u0026#34;).equals(id).return.all(); for await (const entity of entities) { await this.roomRepository.remove(entity.id); } } } 하지만 이런 상황을 생각해봅시다.\n가장 간단한 방법이라곤 해도, 매번 엔티티의 상태 를 업데이트해서 넘겨주는게 불편하다고 생각했습니다. 또한, 포함관계 가 명확하지 않아서, 어쩔 때는 entity 만을 가지고 모든 걸 수행해야한다는 것에서 통일성이 없을 것 같다고 생각이 들었습니다.\n두번째 해결 시도의 문제점 가장 무엇보다 명확한 문제는 역직렬화를 한번만 해서 정보를 가지고 있고, 필요할 때 직렬화를 하게 해주는 작업을 위한 메소드를 사용할 때 매번 엔티티를 필요로 하기 때문에 역직렬화 상태를 저장할 수 없다는 점입니다.\n이를 생각하게 되면, 역직렬화 상태와 직렬화 상태의 객체를 동시에 가지고 다루어야한다는 문제가 생깁니다. 이렇게 되면 헷갈리게 되어 생산성에 방해가 되었습니다.\n예를 들면, RoomEntity 객체와 RoomDomain 객체를 매번 순환하여 저장하는 식으로 변수에 저장하게 되는 상황인 것이죠. 이렇게 되면 실제로 기능 확장 시 RoomDomain 을 쓸 지, RoomEntity 를 쓸 지 헷갈리게 됩니다.\n의존성에 관한 문제도 있을 것입니다. Room 도메인이 사용되는 상황에서는 매번 RoomService 가 따라오겠지요. 하지만 이는 Nest 생태계에서의 의존성 관리 덕분에 큰 문제는 아니라고 판단했습니다.\n가장 간단한 방법이 무엇일까? 이전에는 가장 깔끔한 방법을 찾았지만, 이제는 가장 손이 안가는 방법 을 찾는 데에 집중하게 되었습니다. 결국 제가 생각해본 도메인 로직 코드는 아래와 같았습니다.\n그리고, 가장 하고 싶었던 건 도메인(단순 할당 등)의 작업 단위 를 한 데 묶고 싶었고, 경우에 따라 로직으로 처리해야할 것은 로직으로 처리하고 싶었습니다.\n실제로 위 코드의 Repository 코드에서 수행하던 변환 로직을 이쪽에서 수행하여, 매번 역직렬화 과정을 거치지 않도록 만들었습니다.\nimport { RoomEntity } from \u0026#34;@/room/room.entity\u0026#34;; export interface Connection { socketId: string; nickname: string; createAt: number; } export enum RoomStatus { PUBLIC = \u0026#34;PUBLIC\u0026#34;, PRIVATE = \u0026#34;PRIVATE\u0026#34;, } export interface IRoom { id: string; title: string; category: string[]; inProgress: boolean; currentIndex: number; host: Connection; status: RoomStatus; maxParticipants: number; maxQuestionListLength: number; questionListId: number; questionListTitle: string; createdAt: number; connectionMap: Record\u0026lt;string, Connection\u0026gt;; } export class Room { public entity: RoomEntity; constructor(entity?: IRoom) { if (!entity) { this.entity = null; return this; } this.entity = new RoomEntity(); this.entity.id = entity.id; this.entity.status = entity.status; this.setConnection(entity.connectionMap); this.entity.title = entity.title; this.entity.createdAt = entity.createdAt; this.entity.questionListId = entity.questionListId; this.entity.questionListTitle = entity.questionListTitle; this.entity.inProgress = entity.inProgress; this.entity.maxParticipants = entity.maxParticipants; this.entity.currentIndex = entity.currentIndex; this.entity.category = entity.category; this.entity.maxQuestionListLength = entity.maxQuestionListLength; this.entity.host = JSON.stringify(entity.host); } static fromEntity(entity: RoomEntity) { const room = new Room(); room.entity = entity; return room; } build() { return this.entity; } toObject(): IRoom { return { id: this.entity.id, status: this.entity.status, connectionMap: this.getConnection(), title: this.entity.title, createdAt: this.entity.createdAt, questionListId: this.entity.questionListId, questionListTitle: this.entity.questionListTitle, inProgress: this.entity.inProgress, maxParticipants: this.entity.maxParticipants, currentIndex: this.entity.currentIndex, category: this.entity.category, maxQuestionListLength: this.entity.maxQuestionListLength, host: this.getHost(), }; } setHost(connection: Connection) { this.entity.host = JSON.stringify(connection); return this; } getHost(): Connection { return JSON.parse(this.entity.host); } setConnection(connectionMap: Record\u0026lt;string, Connection\u0026gt;) { this.entity.connectionMap = JSON.stringify(connectionMap); return this; } getConnection(): Record\u0026lt;string, Connection\u0026gt; { return JSON.parse(this.entity.connectionMap); } getParticipants(): number { return Object.keys(this.getConnection()).length; } addConnection(connection: Connection) { const connectionMap = this.getConnection(); connectionMap[connection.socketId] = connection; return this.setConnection(connectionMap); } removeConnection(socketId: string) { const connectionMap = this.getConnection(); delete connectionMap[socketId]; return this.setConnection(connectionMap); } } 촉박한 시간관계상 직렬화 역직렬화 등의 필수적인 도메인 로직만을 구현했고, 엔티티를 캡슐화를 일부러 풀어서 다른 프로퍼티의 경우 getter setter 구현 없이 직접 접근하도록 만들었습니다. 이렇게 리팩토링했을 경우 부캠이 끝나고 천천히 리팩토링할 때 도메인 클래스로 마이그레이션 하기 쉽다고 판단했습니다.\n그리고 알고보니, 해당 구현 방식은 실제로 존재하는 디자인 패턴이었고, Facade 디자인 패턴을 제가 완전히 활용하고 있었습니다!\nFacade 패턴이란? Facade 디자인 패턴이란 복잡한 서브 시스템에 대한 간단한 인터페이스를 제공하는 구조적 디자인 패턴입니다.\n# 복잡한 서브시스템 클래스들 class CPU: def freeze(self): print(\u0026#34;CPU 동결\u0026#34;) def execute(self): print(\u0026#34;CPU 실행\u0026#34;) class Memory: def load(self): print(\u0026#34;메모리 로드\u0026#34;) class HardDrive: def read(self): print(\u0026#34;하드드라이브 읽기\u0026#34;) # Facade 클래스 class ComputerFacade: def __init__(self): self.cpu = CPU() self.memory = Memory() self.hard_drive = HardDrive() def start(self): # 복잡한 시작 과정을 단순화 self.cpu.freeze() self.memory.load() self.hard_drive.read() self.cpu.execute() # 클라이언트 코드 computer = ComputerFacade() computer.start() # 단순히 start() 메서드만 호출하면 됨 프랑스어로 건물의 외벽 이라고 부르는 Facade 는 복잡한 시스템(엔티티의 직렬화) 를 간단한 인터페이스로 만들어서 사용하기 쉽게 만들 수 있습니다.\n그 결과 서비스 코드 그 이후 서비스 코드들이 도메인 설정에 관한 로직이 간단해졌습니다.\n첫번째 예시 : 캡슐화를 통한 서비스에서의 도메인 관심 분리 // 바뀐 서비스 코드 public async setProgress(roomId: string, socketId: string, status: boolean) { const room = Room.fromEntity(await this.roomRepository.getRoom(roomId)); if (!room.entity) throw new Error(\u0026#34;cannot set progress\u0026#34;); if (room.getHost().socketId !== socketId) throw new Error(\u0026#34;only host can set process\u0026#34;); room.entity.inProgress = status; if (!room.entity.inProgress) room.entity.currentIndex = 0; await this.roomRepository.setRoom(room.build()); return status; } 명시적으로 직렬화 하는 과정을 캡슐화함으로써, 로직 수행에만 집중할 수 있도록 만들었던 것 같습니다. 이전보다 할당문이 많이 줄었습니다. 이부분은 getter setter 를 두어서, 보다 일관되게 처리할 수 있습니다.\n// 이전 코드 public async setProgress(roomId: string, socketId: string, status: boolean) { const room = await this.roomRepository.getRoom(roomId); if (!room) throw new Error(\u0026#34;cannot set progress\u0026#34;); if (room.host.socketId !== socketId) throw new Error(\u0026#34;only host can set process\u0026#34;); room.inProgress = status; if (!room.inProgress) room.currentIndex = 0; await this.roomRepository.setRoom(room); return status; } 두번째 예시 : 확장 가능한 DTO 변환 로직의 생성 가능 두번째 예시입니다. 이는 room-create.service.ts 로 나누었던 함수입니다. 실제로 dto를 받고 객체로써 새로운 방을 레포지토리에 바로 엔티티로써 보내줄 수 없었던 단점을 해결할 수 있었습니다.\n현재 보시면, 아래 코드의 큰 차이는 엔티티로 넘겨주는 지에 대한 여부의 차이입니다. 그냥 객체로 쓰면 안될까? 라고 할 수 있겠지만, 실제로 제가 원하는 시점에 언제 엔티티로 만들 수 있는지도 중요합니다.\n최적화 여부도 있겠습니다. repository 에 업데이트를 자주해야하는 상황이 온다면, 이미 도메인 객체가 갖고 있는 엔티티를 리턴하면 됩니다. 이전 코드대로라면 repository 에 참조할 때마다 변환 과정이 무조건 일어나는 상황이 생깁니다.\n또한 각각의 DTO는 동일한 역직렬화된 도메인으로부터 필요한 데이터를 꺼내올 수 있도록 만들 수 있었습니다. 적어도 직렬화와 역직렬화 라는 관심에서는 벗어난거죠. DTO 변환만을 위한 작업을 수행할 수 있게된 것입니다.\n@Transactional() public async createRoom(dto: CreateRoomInternalDto) { const { socketId, nickname } = dto; const id = await this.generateRoomId(); const socket = this.socketService.getSocket(socketId); const currentTime = Date.now(); const questionList = await this.questionListRepository.findOne({ where: { id: dto.questionListId }, }); const questionListContent = await this.questionRepository.getContentsByQuestionListId( dto.questionListId ); questionList.usage += 1; await this.questionListRepository.save(questionList); const roomDto = { ...dto, id, inProgress: false, connectionMap: {}, participants: 0, questionListContents: questionListContent, createdAt: currentTime, maxQuestionListLength: questionListContent.length, questionListTitle: questionList.title, currentIndex: 0, host: { socketId: dto.socketId, nickname, createAt: currentTime, }, }; await this.roomRepository.setRoom(roomDto); socket.emit(EMIT_EVENT.CREATE, roomDto); } @Transactional() public async createRoom( createRoomDto: CreateRoomDto, socket: Socket ): Promise\u0026lt;CreateRoomResponseDto\u0026gt; { const currentTime = Date.now(); const questionData = await this.useQuestionList(createRoomDto.questionListId); const roomObj = { ...createRoomDto, id: await this.generateRoomId(), inProgress: false, connectionMap: {}, participants: 0, createdAt: currentTime, maxQuestionListLength: questionData.content.length, questionListTitle: questionData.title, currentIndex: 0, host: { socketId: socket.id, nickname: createRoomDto.nickname, createAt: currentTime, }, }; const room = new Room(roomObj).build(); // 바뀐 코드에서는 굳이 엔티티를 변환하는 작업을 구현할 필요 없음 await this.roomRepository.setRoom(room); socket.emit(EMIT_EVENT.CREATE, room); return CreateRoomInternalDto.from(room); // 리턴값을 엄밀히 설정 } 세번째 예시 : 역직렬화 상태를 유동적으로 저장 가능 마지막으로, 받아온 엔티티를 언제든 역직렬화해서 하는 문법에 대한 책임이 분리될 수 있었습니다.\npublic async getPublicRoom(inProgress?: boolean): Promise\u0026lt;RoomListResponseDto[]\u0026gt; { const rooms = await this.roomRepository.getAllRoom(); const filterFunction = (room: RoomEntity) =\u0026gt; room.status === RoomStatus.PUBLIC \u0026amp;\u0026amp; (inProgress === undefined || room.inProgress === inProgress); return rooms .filter(filterFunction) .sort((a, b) =\u0026gt; b.createdAt - a.createdAt) .map((room) =\u0026gt; Room.fromEntity(room)) .map((room) =\u0026gt; ({ ...room.toObject(), host: room.getHost(), participants: room.getParticipants(), connectionMap: undefined, })); } 심지어 이전 코드에서는 엔티티에 존재하지 않는 정보를 레포지토리에서 가공하여 객체로 제공하고 있었습니다. 이런 부분에서 책임 분리가 확실하게 될 수 있었던 것 같습니다.\npublic async getPublicRoom(inProgress?: boolean): Promise\u0026lt;RoomListResponseDto\u0026gt; { const rooms = await this.roomRepository.getAllRoom(); return rooms .filter( (room) =\u0026gt; room.status === RoomStatus.PUBLIC \u0026amp;\u0026amp; (inProgress === undefined || room.inProgress === inProgress) ) .sort((a, b) =\u0026gt; b.createdAt - a.createdAt) .map((room) =\u0026gt; ({ createdAt: room.createdAt, host: room.host, maxParticipants: room.maxParticipants, status: room.status, title: room.title, id: room.id, category: room.category, inProgress: room.inProgress, questionListTitle: room.questionListTitle, participants: room.participants, // 엔티티에는 없는 정보를 레포지토리가 가공하고 있었다! })); } 아직 남은 점 Entity 프로퍼티를 public으로 열어두었다. 이렇게 보면, 도메인 객체의 상태가 언제든지 바뀔 수 있다는 위험이 있었습니다.\n해당 부분의 경우 일일이 setter, getter 를 도입하고, entity 객체 자체를 캡슐화하여 해결할 수 있었을 것이라고 생각합니다.\n다만, 현재 리팩토링 대상인 도메인 객체의 프로퍼티 값이 13개 나 되어.. 차라리 구조적으로 개편하고 setter getter 를 적게 설정하는 방향도 좋을 것 같다고 생각이 들었습니다.\n외부 라이브러리를 수정해서 개선해보기 @moozeh/nestjs-redis-om 라이브러리를 제가 직접 포크해온 만큼, 제가 편하게 쓸 수 있도록 개선할 수 있었을 것입니다. 시간과 비용을 생각해서 제가 편하게 쓸 수 없어서 아쉬울 따름입니다..\n참고자료 https://appleg1226.tistory.com/40 문제 해결 과정 2. 클린코드에 대해서 : 어떤게 문제인지 확실히 파악하기 클린코드에 대해서 경계 할 것이 아니라, 어떤게 문제인지 확실히 아는 프로그래머가 되는 게 중요하다고 생각하게된 영상을 보았습니다.\n포프님의 영상에 달린 댓글에 이런 내용이 눈에 들어왔고, 스스로 어떻게 해야 협업할 수 있는 개발자인지 생각해보려고 합니다.\n어떤 업무건 업의 본질이라는 게 있습니다.\n프로그래밍 또한 업의 본질을 이해해야 한다고 생각합니다.\n효율적인 업무 진행을 위한 서로간의 조율이 필요합니다. TDD를 써야하면 그렇게 해야하고, 다른 방법론이 있다면 그것을 적용하고..\n따라서 앞서 제가 진행했던 스터디 세션 부분 리팩토링과 같은 부분은 팀을 위한 조율이 아니라고 생각했습니다. 그 후부터는 최대한 팀의 가치 에 집중했고, 이것이 진정한 본질이 아닐까 한번 생각을 해보게 됐습니다.\n아직 많이 부족하지만, 아래 글에서 처럼, 협업의 가치를 조금씩 깨달아가고 있음을 스스로 느끼고 있습니다.\nJWT 토큰 파싱 변경 과정과 협업의 가치에 대한 고민\n협업을 위한 더러운 코드 200줄이나 되는 코드를 직접 올려보겠습니다.\nimport { Injectable } from \u0026#34;@nestjs/common\u0026#34;; import { RoomEntity } from \u0026#34;@/room/room.entity\u0026#34;; import { RoomRepository } from \u0026#34;@/room/room.repository\u0026#34;; import { RoomListResponseDto } from \u0026#34;@/room/dto/all-room.dto\u0026#34;; import { Socket } from \u0026#34;socket.io\u0026#34;; import { CreateRoomDto, CreateRoomResponseDto } from \u0026#34;@/room/dto/create-room.dto\u0026#34;; import { JoinRoomDto, JoinRoomResponseDto } from \u0026#34;@/room/dto/join-room.dto\u0026#34;; import { Transactional } from \u0026#34;typeorm-transactional\u0026#34;; import { Room, RoomStatus } from \u0026#34;@/room/domain/room\u0026#34;; import { EMIT_EVENT } from \u0026#34;@/room/room.events\u0026#34;; import { createHash } from \u0026#34;node:crypto\u0026#34;; import { QuestionRepository } from \u0026#34;@/question-list/repository/question.respository\u0026#34;; import { FullRoomException, InProgressException } from \u0026#34;@/room/exceptions/join-room-exceptions\u0026#34;; import { InfraService } from \u0026#34;@/infra/infra.service\u0026#34;; import { QuestionListRepository } from \u0026#34;@/question-list/repository/question-list.repository\u0026#34;; @Injectable() export class RoomService { private static ROOM_ID_CREATE_KEY = \u0026#34;room_id\u0026#34;; public constructor( private readonly roomRepository: RoomRepository, private readonly infraService: InfraService, private readonly questionListRepository: QuestionListRepository, private readonly questionRepository: QuestionRepository ) {} public async leaveRoom(socket: Socket) { const rooms = await this.infraService.getSocketMetadata(socket); for await (const roomId of rooms.joinedRooms) await this.processRoomLeave(socket.id, roomId); } @Transactional() public async createRoom( createRoomDto: CreateRoomDto, socket: Socket ): Promise\u0026lt;CreateRoomResponseDto\u0026gt; { const currentTime = Date.now(); const questionData = await this.useQuestionList(createRoomDto.questionListId); const roomObj = { ...createRoomDto, id: await this.generateRoomId(), inProgress: false, connectionMap: {}, participants: 0, createdAt: currentTime, maxQuestionListLength: questionData.content.length, questionListTitle: questionData.title, currentIndex: 0, host: { socketId: socket.id, nickname: createRoomDto.nickname, createAt: currentTime, }, }; const room = new Room(roomObj).build(); await this.roomRepository.setRoom(room); socket.emit(EMIT_EVENT.CREATE, room); return { nickname: createRoomDto.nickname, participants: 0, questionListContents: questionData.content, socketId: socket.id, ...roomObj, }; } public async joinRoom(joinRoomDto: JoinRoomDto, socket: Socket): Promise\u0026lt;JoinRoomResponseDto\u0026gt; { const { roomId, nickname } = joinRoomDto; const room = Room.fromEntity(await this.roomRepository.getRoom(roomId)); if (!socket) throw new Error(\u0026#34;Invalid Socket\u0026#34;); if (!room.entity) throw new Error(\u0026#34;RoomEntity Not found\u0026#34;); await this.infraService.joinRoom(socket, room.entity.id); if (room.entity.inProgress) throw new InProgressException(); if (this.isFullRoom(room)) throw new FullRoomException(); room.addConnection({ socketId: socket.id, createAt: Date.now(), nickname, }); await this.roomRepository.setRoom(room.build()); const questionListContents = await this.questionRepository.getContentsByQuestionListId( room.entity.questionListId ); const obj = room.toObject(); delete obj.connectionMap[socket.id]; return { participants: room.getParticipants(), ...obj, questionListContents, }; } public async getPublicRoom(inProgress?: boolean): Promise\u0026lt;RoomListResponseDto[]\u0026gt; { const rooms = await this.roomRepository.getAllRoom(); const filterFunction = (room: RoomEntity) =\u0026gt; room.status === RoomStatus.PUBLIC \u0026amp;\u0026amp; (inProgress === undefined || room.inProgress === inProgress); return rooms .filter(filterFunction) .sort((a, b) =\u0026gt; b.createdAt - a.createdAt) .map((room) =\u0026gt; Room.fromEntity(room)) .map((room) =\u0026gt; ({ ...room.toObject(), host: room.getHost(), participants: room.getParticipants(), connectionMap: undefined, })); } public async setProgress(roomId: string, socketId: string, status: boolean) { const room = Room.fromEntity(await this.roomRepository.getRoom(roomId)); if (!room.entity) throw new Error(\u0026#34;cannot set progress\u0026#34;); if (room.getHost().socketId !== socketId) throw new Error(\u0026#34;only host can set process\u0026#34;); room.entity.inProgress = status; if (!room.entity.inProgress) room.entity.currentIndex = 0; await this.roomRepository.setRoom(room.build()); return status; } public async setIndex(roomId: string, socketId: string, index: number) { const room = Room.fromEntity(await this.roomRepository.getRoom(roomId)); // TODO : 리팩토링 할 필요가 있어보임. if ( !room.entity || !room.entity.inProgress || room.getHost().socketId !== socketId || index \u0026lt; 0 || index \u0026gt;= room.entity.maxQuestionListLength ) return -1; room.entity.currentIndex = index; await this.roomRepository.setRoom(room.build()); return index; } public async getIndex(roomId: string) { return (await this.roomRepository.getRoom(roomId)).currentIndex; } public async increaseIndex(roomId: string, socketId: string) { const room = Room.fromEntity(await this.roomRepository.getRoom(roomId)); if (!room.entity || room.getHost().socketId !== socketId || !room.entity.inProgress) return -1; const index = await this.setIndex(roomId, socketId, (await this.getIndex(roomId)) + 1); if (index === -1) return room.entity.maxQuestionListLength - 1; return index; } public async finishRoom(roomId: string) { await this.roomRepository.removeRoom(roomId); return roomId; } private async processRoomLeave(socketId: string, roomId: string) { const room = Room.fromEntity(await this.roomRepository.getRoom(roomId)); if (!room.entity) return; room.removeConnection(socketId); if (!Object.keys(room.getConnection()).length) return this.deleteRoom(room.entity.id); await this.roomRepository.setRoom(room.build()); if (room.getHost().socketId === socketId) await this.handleHostChange(socketId, room); this.infraService.emitToRoom(roomId, EMIT_EVENT.QUIT, { socketId }); } private async handleHostChange(socketId: string, room: Room) { if (room.getHost().socketId !== socketId) return; const newHost = await this.delegateHost(room); // TODO : throw new Exception : host changed // 에러를 던지는 방식이 아닌 다른 방식으로 해결해야함. this.infraService.emitToRoom(room.entity.id, EMIT_EVENT.CHANGE_HOST, { nickname: newHost.nickname, socketId: newHost.socketId, }); } private async deleteRoom(roomId: string) { await this.roomRepository.removeRoom(roomId); this.infraService.emitToRoom(roomId, EMIT_EVENT.QUIT, { roomId }); } private getNewHost(room: Room) { return Object.values(room.getConnection()).sort((a, b) =\u0026gt; a.createAt - b.createAt)[0]; } private async delegateHost(room: Room) { const newHost = this.getNewHost(room); const found = room.getConnection()[newHost.socketId]; if (!found) throw new Error(\u0026#34;invalid new host id\u0026#34;); room.setHost(newHost); await this.roomRepository.setRoom(room.build()); return newHost; } private isFullRoom(room: Room): boolean { return room.entity.maxParticipants \u0026lt;= Object.keys(room.getConnection()).length; } @Transactional() private async useQuestionList(questionListId: number) { const questionData = await this.questionListRepository.findOne({ where: { id: questionListId }, }); const questions = await this.questionRepository.getContentsByQuestionListId(questionListId); questionData.usage += 1; await this.questionListRepository.save(questionData); return { title: questionData.title, content: questions, }; } // TODO: 동시성 고려해봐야하지 않을까? private async generateRoomId() { const client = this.infraService.getRedisClient(); const idString = await client.get(RoomService.ROOM_ID_CREATE_KEY); let id: number; if (idString \u0026amp;\u0026amp; !isNaN(parseInt(idString))) { id = await client.incr(RoomService.ROOM_ID_CREATE_KEY); } else { id = parseInt(await client.set(RoomService.ROOM_ID_CREATE_KEY, \u0026#34;1\u0026#34;)); } return createHash(\u0026#34;sha256\u0026#34;) .update(id + process.env.SESSION_HASH) .digest(\u0026#34;hex\u0026#34;); } } 보시기엔 더러울 수 있습니다.\n하지만 인터페이스를 볼까요?\nimport { Injectable } from \u0026#34;@nestjs/common\u0026#34;; import { RoomEntity } from \u0026#34;@/room/room.entity\u0026#34;; import { RoomRepository } from \u0026#34;@/room/room.repository\u0026#34;; import { RoomListResponseDto } from \u0026#34;@/room/dto/all-room.dto\u0026#34;; import { Socket } from \u0026#34;socket.io\u0026#34;; import { CreateRoomDto, CreateRoomResponseDto } from \u0026#34;@/room/dto/create-room.dto\u0026#34;; import { JoinRoomDto, JoinRoomResponseDto } from \u0026#34;@/room/dto/join-room.dto\u0026#34;; import { Transactional } from \u0026#34;typeorm-transactional\u0026#34;; import { Room, RoomStatus } from \u0026#34;@/room/domain/room\u0026#34;; import { EMIT_EVENT } from \u0026#34;@/room/room.events\u0026#34;; import { createHash } from \u0026#34;node:crypto\u0026#34;; import { QuestionRepository } from \u0026#34;@/question-list/repository/question.respository\u0026#34;; import { FullRoomException, InProgressException } from \u0026#34;@/room/exceptions/join-room-exceptions\u0026#34;; import { InfraService } from \u0026#34;@/infra/infra.service\u0026#34;; import { QuestionListRepository } from \u0026#34;@/question-list/repository/question-list.repository\u0026#34;; @Injectable() export class RoomService { private static ROOM_ID_CREATE_KEY = \u0026#34;room_id\u0026#34;; public constructor( private readonly roomRepository: RoomRepository, private readonly infraService: InfraService, private readonly questionListRepository: QuestionListRepository, private readonly questionRepository: QuestionRepository ) {} public async leaveRoom(socket: Socket) @Transactional() public async createRoom( createRoomDto: CreateRoomDto, socket: Socket ): Promise\u0026lt;CreateRoomResponseDto\u0026gt; public async joinRoom(joinRoomDto: JoinRoomDto, socket: Socket): Promise\u0026lt;JoinRoomResponseDto\u0026gt; public async getPublicRoom(inProgress?: boolean): Promise\u0026lt;RoomListResponseDto[]\u0026gt; public async finishRoom(roomId: string) public async setProgress(roomId: string, socketId: string, status: boolean) public async setIndex(roomId: string, socketId: string, index: number) public async getIndex(roomId: string) public async increaseIndex(roomId: string, socketId: string) private async processRoomLeave(socketId: string, roomId: string) private async handleHostChange(socketId: string, room: Room) private async deleteRoom(roomId: string) private getNewHost(room: Room) private async delegateHost(room: Room) private isFullRoom(room: Room): boolean @Transactional() private async useQuestionList(questionListId: number) // TODO: 동시성 고려해봐야하지 않을까? private async generateRoomId() } 작업을 위한 private 함수들을 제외하고 보았을 때, 방에 대한 CRUD, 즉 일종의 방에 대한 연산 작업이 한곳에 모여있음을 알 수 있습니다.\n다른 파일에서 해당 클래스의 인터페이스를 확인해보면 생각보다 함수가 별로 없음을 알 수 있습니다.\n핵심 가치 결국에는 중요한 것은 코드의 길이가 아니라 인터페이스 라는 겁니다.. 그렇게 문제를 해결할 수 있었고, 실제로 외부 파일인 핸들러에서 사용할 때 일관되게 사용할 수 있었습니다.\n또한, 한 데에 파일을 모아보니, 오히려 서비스의 수가 줄어서 모듈의 크기가 줄었습니다.\n","permalink":"https://blog.moozeh.org/posts/2024/2024-12-21-%ED%98%91%EC%97%85%EC%9D%84-%EC%9C%84%ED%95%9C-%EB%8D%94%EB%9F%AC%EC%9A%B4-%EC%BD%94%EB%93%9C/","summary":"\u003ch2 id=\"문제-상황\"\u003e문제 상황\u003c/h2\u003e\n\u003cp\u003e스터디 세션을 리팩토링 과정에서 코드가 길어져서 고민을 했었습니다. 특히나 \u003ccode\u003e비즈니스 로직과 레포지토리 코드가 혼재\u003c/code\u003e 해 있었고, 그 부분에서 하나의 핸들러가 호출하는 로직에서 서비스.. 레포지토리.. 이렇게 다양한 계층을 따라 로직이 퍼져있었습니다.\u003c/p\u003e\n\u003cp\u003e예를 들면, 레포지토리에서는 데이터 베이스 (혹은 자료 저장소) 에 관해서 어떤 정보가 저장되어 있어야하는지\u003c/p\u003e\n\u003cp\u003e그래서 해당 부분을 리팩토링을 시도했으나, 오히려 팀의 성장에 방해가 되었습니다. 그 부분에 있어서는 \u003ccode\u003e조금 더 깔끔한 코드와 프로토콜을 만들고자 하는 욕심\u003c/code\u003e 이 1순위로 작용했던 것이 아닐까 하고 회고하면서 판단해봅니다.\u003c/p\u003e","title":"협업을 위한 더러운 코드"},{"content":"문제 링크 이동하기! 해결 과정 최소 공배수 이용하는 문제입니다!\n최소 공배수까지 탐색을 그리디 하게 이용하면 됩니다.\n소스 코드 #include\u0026lt;iostream\u0026gt; using namespace std; int gcd(int a, int b) { int tmp; if(b \u0026gt; a) { tmp = a; a = b; b = tmp; } while(b != 0) { tmp = a % b; a = b; b = tmp; } return a; } int main() { cout.tie(0); cin.tie(0)-\u0026gt;sync_with_stdio(0); int t; cin\u0026gt;\u0026gt;t; while(t--) { int m,n,x,y; cin\u0026gt;\u0026gt;m\u0026gt;\u0026gt;n\u0026gt;\u0026gt;x\u0026gt;\u0026gt;y; int larger = m \u0026gt; n ? m : n; int larger_remain = m \u0026gt; n ? x : y; int max_num = m*n / gcd(m, n); bool found = false; for(int i=larger_remain; i\u0026lt;=max_num; i += larger) { if (i%m == x%m \u0026amp;\u0026amp; i%n == y%n) { found = true; cout\u0026lt;\u0026lt;i\u0026lt;\u0026lt;\u0026#39;\\n\u0026#39;; break; } } if(!found) cout\u0026lt;\u0026lt;\u0026#34;-1\\n\u0026#34;; } } ","permalink":"https://blog.moozeh.org/posts/2024/2024-10-27-boj-6064-%EC%B9%B4%EC%9E%89-%EB%8B%AC%EB%A0%A5/","summary":"\u003ch2 id=\"문제-링크\"\u003e문제 링크\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://boj.kr/6064\"\u003e이동하기!\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"해결-과정\"\u003e해결 과정\u003c/h2\u003e\n\u003cp\u003e최소 공배수 이용하는 문제입니다!\u003c/p\u003e\n\u003cp\u003e최소 공배수까지 탐색을 그리디 하게 이용하면 됩니다.\u003c/p\u003e\n\u003ch2 id=\"소스-코드\"\u003e소스 코드\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003egcd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003etmp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003etmp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003ecin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esync_with_stdio\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ecin\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ecin\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003elarger\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nl\"\u003em\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003elarger_remain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nl\"\u003ex\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emax_num\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003egcd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003efound\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003elarger_remain\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"n\"\u003emax_num\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003elarger\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e%\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e%\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e%\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"o\"\u003e%\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003efound\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"sc\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003efound\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;-1\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[ 백준 6064 ] 카잉 달력 : C++ 풀이"},{"content":"❕ 문제 상황 Nest.js 를 배우다가 데이터베이스를 사용할 일이 생겼다.\n보통 나는 환경이 분리되는 걸 선호한다. 그래서 전역적으로 설치되는걸 좋아하지 않는다. pip 같은 것들 말이다.\n그래서 찾아보니, Docker 위에 MySQL 컨테이너를 올려서 사용하면 환경 분리가 된다고 하더라.\n![[2024-10-26-network-127001-과-localhost-의-차이-20241026161720760.webp|428]]\n도커와 관련해서는 CLI 환경에서 결국엔 다루는게 맞다고 생각했다. 그런데, 일단은 도커가 처음이기에 아직 내가 많이 몰라서 Docker Desktop 을 이용해서 문제를 해결하려고 한다.\nMySQL 에 접속이 안되는 문제 mysql -u root -p\u0026#39;root\u0026#39; -h 172.17.0.2 mysql: [Warning] Using a password on the command line interface can be insecure. ERROR 2003 (HY000): Can\u0026#39;t connect to MySQL server on \u0026#39;172.17.0.2:3306\u0026#39; (60) 위와 같이, root 계정으로 직접적으로 접속하려고 했었다. 그런데, mysql 클라이언트 단에서 서버로 연결을 하지 못하는 상황이었다.\n172.17.0.2 IP 는 inspect 해서 나온 도커 컨테이너가 할당 받은 IP 이다.\n해당 IP로 연결을 시도해봤는데 연결되지 않는다고 떴다.\n🖋️ 해결 과정 결론적으로는, 아래와 같은 명령어를 써서 해결했다.\n첫번째로, 도커의 컨테이너를 외부에서 접속하게 될 때에는 내 자신의 IP로 접속해야한다.\nmysql -u root -p -h localhost -P 3306 그런데, 그 과정에서 아래와 같은 에러가 떴다.\nERROR 2002 (HY000): Can\u0026#39;t connect to local MySQL server through socket \u0026#39;/tmp/mysql.sock\u0026#39; (2) 한번 더 알아보니, localhost 대신에 127.0.0.1 로 호스트를 바꾸니 접속이 되었다.\n🐳 도커와 도커 엔진을 돌리는 컴퓨터가 IP 할당을 받는 방식 그렇다면 왜 컨테이너 IP로 접속을 못하고, localhost 로 접속을 해야할까?\n이것을 알려면 도커의 네트워크 구조를 알아야한다.\n도커 네트워크 구조 도커는 기본적으로 브릿지 네트워크 를 사용하여 호스트 - 컨테이너 간 통신을 관리한다.\n브릿지 네트워크란?\n브리지 네트워크는 데이터 링크 계층(Layer 2)에서 작동하는 네트워크 연결 방식 중 하나입니다. 서로 다른 네트워크 세그먼트를 하나의 논리적 네트워크로 연결하는 기술입니다.\n세그먼트 내에서 통신을 할 때에는 노드 간 직접 통신이 가능합니다.\n세그먼트 외부에서 통신을 할 때에는 브릿지를 통해 통신이 가능합니다.\n이 때 중요한건 세그먼트 외부 간 통신을 직접할 수 있도록 노드 간 직접 통신이 가능하다는 점입니다.\n이때, 도커는 호스트 컴퓨터와 소통할 수 있도록 docker0 브릿지를 설치해줍니다. 해당 브릿지를 통해서 호스트 컴퓨터는 도커 컨테이너와 통신할 수 있게 된다.\n![[2024-10-26-network-127001-과-localhost-의-차이-20241026195155071.webp]] 도커의 기본적인 네트워크 인터페이스\n도커가 생성한 가상 브릿지 docker0 와 커스텀 브릿지 도커는 컨테이너와 호스트, 나아가서 외부 인터넷과 통신하기 위해서 docker0 라는 이름의 가상 브릿지를 생성한다.\n해당 브릿지는 호스트 컴퓨터 내에서 생성 되며, 각 컨테이너는 eth0 라는 네트워크 인터페이스를 통해 docker0 브릿지와 연결된다. 이때, veth* 라는 이름으로 docker0 브릿지에서 네트워크 인터페이스로 연결된다.\n또한, 별도의 커스텀 브릿지도 생성할 수 있다.\n아래와 같이 br- 로 시작하는 경우 컨테이너에서 직접 외부로 통신하기 위한 커스텀 브릿지 다.\n29: br-925c9621d01a: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default inet 172.34.0.1/16 brd 172.34.255.255 scope global br-925c9621d01a ~ 162: vetha37a37a@if161: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue master br-925c9621d01a state UP group default ~ 164: veth27db687@if163: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue master br-925c9621d01a state UP group default 컨테이너 내부IP 로 접속할 수 없는 이유 컨테이너 내부의 IP (172.17.x.x/16) 는 격리된 공간 내에 존재하기 때문 그래서 외부에서는 docker0 브릿지를 통해 접근이 가능하다. ❔ 도커 브릿지로 직접 접속 할 수는 없나요?\n직접 연결 시도도 가능합니다.\n단, 아래에서 설명할 예정이지만, docker0 브릿지는 리눅스 환경에서만 확인 가능합니다.\n![[2024-10-26-network-127001-과-localhost-의-차이-20241026194313111.webp]]\nMac/Windows 에서의 Docker docker0 라는 브릿지는 Mac/Windows 옵션에서는 존재하지 않는다. 맥과 윈도우 환경에서는 별도의 가상 리눅스 위에서 설치되기 때문이다.\n따라서 맥, 윈도우 환경에서 접속하려면 해당 브릿지로 접속하려면 172.17.0.1 이 아니라 루프백 IP 를 통해서 docker0 인터페이스를 찾아서 접근하도록 해야한다.\n만약 이미 호스트 컴퓨터에서 포트가 열려있으면 어떻게 될까? 컨테이너 내부 의 포트는 호스트 포트와 독립적 으로 작동한다!\n\u0026lsquo;3307:3306\u0026rsquo; -\u0026gt; \u0026lsquo;host - docker0 : 3307\u0026rsquo; , \u0026lsquo;veth - eth : 3306\u0026rsquo;\n포트를 지정할 때 docker0 브릿지에서 매핑을 해주기 때문에, 컨테이너에서는 어떤 포트로 열더라도, 자유롭게 열어도 상관없다.\n앞서 말한대로 따로 임의로 지정하지 않으면, 컨테이너 내부에서만 열리게 된다. 이렇게 되면 포트를 컨테이너 외부로 열고 싶지 않을 때 유용하겠죠?\n정리하면 아래와 같다.\n호스트에서 3306 포트를 사용 중이더라도 컨테이너 내부에서 3306 포트를 사용할 수 있다. 포트 충돌은 호스트 포트를 컨테이너 포트에 매핑할 때만 발생한다. docker run -p 3307:3306 mysql 도커에서 실제로 실행할때, 3307 포트와 같이 외부로 매핑될 포트를 지정해주는 작업이 일어날 때 docker0 브릿지 테이블에서 수정이 일어난다.\n🤔 127.0.0.1 과 localhost 의 차이 그렇다면, 왜 172.17.x.x 포트로 연결이 안되었는지 이해가 됐을 것이다.\n172.17.x.x IP는 컨테이너 내부와 도커 브릿지 사이에 연결된 연결 정보임 맥/윈도우 도커 환경에서는 별도의 VM 위에서 돌아가기 때문에 172.17.0.1 로 직접 접속할 수 없음 하지만 그렇다고 문제가 해결되진 않았는데, localhost 를 통해서 접속했을 때는 접속이 되지 않았다.\n결국 해결했던 방법은 127.0.0.1 로 접속을 하니 문제가 해결되었다.\n![[2024-10-26-network-127001-과-localhost-의-차이-20241026200049342.webp|602]]\n일반적으로 localhost 란 도메인은 존재하지 않는다.\n모든 네트워크 요청시, DNS 라는 곳에서 도메인 이름을 통해 IP 를 알아내기 때문이다. 지원되는 IP 형식이 아니면 DNS 를 통해 IP를 찾아서 해당 IP를 통해 연결되도록 만든다.\n그 원인은 두가지에 있었는데, 도커의 IPv6 지원과 /etc/hosts 파일의 영향 때문이었다.\n/etc/hosts 파일을 통해 localhost 라는 DNS가 어떤 IP를 나타내는지 컴퓨터에 바로 알려줄 수 있도록할 수 있다. 일종의 로컬 DNS? 와 같은 느낌.\n실제로 나와같은 경우 아래처럼 IPv6, IPv4 로컬 호스트 주소를 모두 표현하도록 연결되었는데, IPv6 로 연결이 시도 되어서 이런 문제가 생겼다.\n![[2024-10-26-network-127001-과-localhost-의-차이-20241026202656011.webp]]\n도커에서 IPv6 지원 설정 활성화 도커 데스크탑 기준으로 설명\nDocker Desktop 실행 상단 메뉴의 설정(Settings) 아이콘 클릭 Docker Engine 섹션으로 이동 설정 JSON에 위의 설정을 추가 Apply \u0026amp; Restart 클릭 { \u0026#34;ipv6\u0026#34;: true, \u0026#34;fixed-cidr-v6\u0026#34;: \u0026#34;2001:db8:1::/64\u0026#34;, \u0026#34;ip6tables\u0026#34;: true } ![[2024-10-26-network-127001-과-localhost-의-차이-20241026203002567.webp|618]]\n이후 제대로 매핑된 걸 확인하려면 아래 명령어를 실행해주자.\ndocker network ls MySQL 에서의 localhost 특수처리 IPv6 옵션을 활성화 해도 제대로 해결할 수 없었는데, 그 이유는 mysql 만이 가지는 로컬 호스트에 대한 특수 처리 때문이었다.\nMySQL은 localhost로 접속 시 TCP/IP가 아닌 Unix 소켓 파일을 사용한다. 따라서, 도커 컨테이너의 MySQL은 호스트와 다른 환경에서 실행되므로 소켓 파일에 접근할 수 없다.\nMySQL 에서 접속할 때는 그냥 맘놓고 127.0.0.1로 접속하자\u0026hellip;!\n","permalink":"https://blog.moozeh.org/posts/2024/2024-10-26-%EB%8F%84%EC%BB%A4-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90/","summary":"\u003ch2 id=\"-문제-상황\"\u003e❕ 문제 상황\u003c/h2\u003e\n\u003cp\u003eNest.js 를 배우다가 데이터베이스를 사용할 일이 생겼다.\u003c/p\u003e\n\u003cp\u003e보통 나는 환경이 분리되는 걸 선호한다. 그래서 전역적으로 설치되는걸 좋아하지 않는다. \u003ccode\u003epip\u003c/code\u003e 같은 것들 말이다.\u003c/p\u003e\n\u003cp\u003e그래서 찾아보니, \u003ccode\u003eDocker\u003c/code\u003e 위에 \u003ccode\u003eMySQL\u003c/code\u003e 컨테이너를 올려서 사용하면 환경 분리가 된다고 하더라.\u003c/p\u003e\n\u003cp\u003e![[2024-10-26-network-127001-과-localhost-의-차이-20241026161720760.webp|428]]\u003c/p\u003e\n\u003cp\u003e도커와 관련해서는 \u003ccode\u003eCLI\u003c/code\u003e 환경에서 결국엔 다루는게 맞다고 생각했다. 그런데, 일단은 도커가 처음이기에 아직 내가 많이 몰라서 \u003ccode\u003eDocker Desktop\u003c/code\u003e 을 이용해서 문제를 해결하려고 한다.\u003c/p\u003e\n\u003ch3 id=\"mysql-에-접속이-안되는-문제\"\u003eMySQL 에 접속이 안되는 문제\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emysql -u root -p\u0026#39;root\u0026#39; -h 172.17.0.2\nmysql: [Warning] Using a password on the command line interface can be insecure.\nERROR 2003 (HY000): Can\u0026#39;t connect to MySQL server on \u0026#39;172.17.0.2:3306\u0026#39; (60)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e위와 같이, \u003ccode\u003eroot\u003c/code\u003e 계정으로 직접적으로 접속하려고 했었다. 그런데, \u003ccode\u003emysql\u003c/code\u003e 클라이언트 단에서 서버로 연결을 하지 못하는 상황이었다.\u003c/p\u003e","title":"도커 네트워크 인터페이스를 알아보자"},{"content":" [!important]\n제가 몰랐던 백엔드 지식 위주로 이야기 합니다. Express, MVC 패턴에 관해 공부하고 오셔야 이해할 수 있습니다.\nExpress 를 배우고, 보다 좀 더 정형화된 형식이 필요함을 느꼈다.\n코드를 보다 견고하게 짜는 것에 대한 욕심이 생겼고, 에러 처리 등 다양한 예외 처리 로직들을 수행해보면서, 코드의 안정성이 중요하다는 걸 느꼈다.\n그래서 이번에 Nest.js 를 배우기 시작했는데, Controller Service 등등.. 유명한 계층은 내가 아는 일들을 그대로 수행하고 있어서 배우는데 문제가 없었다.\n그런데, 왜 @Module 데코레이터라는 계층이 있는 걸까? 궁금해져서 조금 알아보았다.\n🍀 Module 이란 어떤 역할을 할까? 💉 의존성 주입이란 무엇일까 내가 잘못 알고 있었던 지식이 있었다. 나는 여태까지 의존성 주입이 사용자가 어떤 모듈을 굳이 import 하는 구문 자체가 개발자에게 책임이 있다고 잘못 이해하고 있었다.\n의존성 주입의 정의 의존성 주입은 살짝 다르다. 구현체는 그대로 두되, 실제 내부 구현을 우리가 다양한 방식으로할 수 있게끔 하는 것이다.\n이게 무슨 뜻이냐면, 특정 클래스가 가진 메서드 (반환 타입까지) 가 정의된 스펙만을 지키면 그 내부 구조는 우리가 마음대로할 수 있는 것이다.\n스펙 자체만을 정의하고, 우리는 그걸 쓰기만 하는 것이다. 그렇게된다면 협업에 있어서 효용성이 생기면서 동시에 타입 정의도 할 수 있을 거라 생각했다.\n그래서 궁금한 점이, 결국엔 Nest에서는 자체적인 스펙을 정의해두는 타입 명시 클래스가 있어야하지 않을까?\n스펙 자체를 한번 더 구현을 하여 구현을 두번해야한다고 생각하면, 어딘가 불편할 것 같다고 생각했는데, 제어의 역전이란 의미 자체를 내가 잘못 이해하고 있었다.\n제어의 역전의 정의 의존성 주입 시스템에게 이 클래스의 인스턴스 들을 관리해주세요 라고 생각하는게 옳다.\n각각의 의존성의 정의를 주입 받는 클래스 내에서 new 생성자를 호출할 게 아니라, 의존성 시스템에서 직접 인스턴스를 만들어서 주입 시켜주는 것이 핵심이다.\n그렇게 된다면, 싱글턴 패턴을 만들 수 있는 것 아닌가? 라고 생각할 수 있다.\n그 부분의 경우 우리가 유동적으로 조절해줄 수 있는 것이다.\n싱글턴과 차이점 유연성 필요에 따라 해당 인스턴스의 범위를 내가 정의할 수 있는게 크다. 일종의 인스턴스 관리 툴이라고 생각하면 편할 듯하다. 예를들어, Nest 에서 @Injectable 데코레이터 인자로 scope 값을 REQUEST 범위를 설정하면, 각 요청마다 새로운 인스턴스가 생성된다고도 한다. 생명 주기 관리 Nest.js 에서는 실제로 생성을 싱글턴으로 할게 아니라, 해당 클래스가 언제 종료되고 새롭게 재생성할 수 있을지까지 별도로 관리할 수 있을 것이다. 🐈‍⬛ Nest의 의존성 주입 방식 그런데, 나는 여기서 이상하게 생각했다.\n왜냐하면 결국 providers 배열을 통해 의존성 주입 대상을 전부 정의해주게 된다면, 굳이 @Injectable 데코레이터를 등록해야하는가? 라는 의문이 들었기 때문이다.\nNest 에서는 이 둘이 함께 작동하여 의존성 주입 시스템을 구성한다.\nAI에게 물어보았더니, 간단한 동작 예시를 알려주었다.\n아래 코드는 실제 Nest 구현체가 아니라, Nest의 동작 방식 이해를 위한 예제이다. 직접 만든다면 참고해볼 수 있을 것 같다.\nclass DIContainer { private providers = new Map(); register(token: any, provider: any) { this.providers.set(token, provider); } resolve(target: any) { const tokens = Reflect.getMetadata(\u0026#39;design:paramtypes\u0026#39;, target) || []; const injections = tokens.map(token =\u0026gt; this.resolve(this.providers.get(token))); return new target(...injections); } } function Module(metadata: { providers: any[] }) { return function(target: any) { const container = new DIContainer(); metadata.providers.forEach(provider =\u0026gt; { container.register(provider, provider); }); // 이 부분은 실제로는 Nest.js 내부에서 처리됩니다 target.prototype.container = container; } } @Injectable() class UserService { getUsers() { return [\u0026#39;User1\u0026#39;, \u0026#39;User2\u0026#39;]; } } @Injectable() class UserController { constructor(private userService: UserService) {} getUsers() { return this.userService.getUsers(); } } @Module({ providers: [UserService, UserController] }) class AppModule {} // 사용 예시 (이 부분은 Nest.js에서 내부적으로 처리됩니다) const appModule = new AppModule(); const userController = appModule.container.resolve(UserController); console.log(userController.getUsers()); // [\u0026#39;User1\u0026#39;, \u0026#39;User2\u0026#39;] Module 데코레이터를 사용할 때, 각각의 의존성 주입 컨테이너를 사용하는데, 실제 Nest.js 는 전역 의존성 컨테이너를 사용한다. 대신, 전역 컨테이너의 일부로 사용된다. Injectable 데코레이터가 별도로 필요한 이유 providers 를 통해 export 를 할 수 있고, Injectable 을 통해서 내가 원하는 범위 간 의존성 전달을 해줄 수 있는 장점이 있다.\n또한, 이 과정에서 내부적으로는 메타데이터에 클래스를 추가하여 의존성 타입을 정의해줄 수 있다.\n마지막으로, 가독성 측면에서 해당 클래스가 주입될 수 있는 클래스임을 인지시켜주는 부분도 있다.\n반대로, providers 만으로 의존성 주입이 될 수 없는 이유로 @Injectable 데코레이터를 사용하는 클래스 내에서도 의존성 주입을 사용하기 위한 것도 있다.\nReflect를 사용하는 이유 단순히 Map 으로 대체될 수 없는 Reflect 만의 중요한 이점이 있기 때문에 사용된다.\n방금 언급한 메타 데이터에 클래스를 추가할 수 있다는 것은 Reflect 를 이용하여 타입 정보를 의존성 등록 시 보존할 수 있다.\nclass MyService { constructor(private dependency: SomeDependency) {} } // 런타임에 타입 정보 접근 가능 const paramTypes = Reflect.getMetadata(\u0026#39;design:paramtypes\u0026#39;, MyService); 위와 같이, 런타임에 타입 정보에 접근이 가능하다.\n또한, 생성자 파라미터의 타입 정보, 특정 파라미터에 적용된 커스텀 데코레이터, 클래스 자체에 적용된 데코레이터 정보 모두 런타임에 접근하고 처리할 수 있다고 한다.\n@Injectable() class ComplexService { constructor( private service1: Service1, @Inject(\u0026#39;CONFIG\u0026#39;) private config: Config, @Optional() private optionalService?: OptionalService ) {} } 정리하자면, Reflect 맵을 이용하면 타입 정보를 보존하면서 런타임에 (실제 의존성이 주입될 때) 어떤 타입 정보가 들어갈 지 타입스크립트 컴파일러가 알 수 있다.\n","permalink":"https://blog.moozeh.org/posts/2024/2024-10-25-nestjs-modules-%EB%A5%BC-%ED%86%B5%ED%95%B4-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85/","summary":"\u003cblockquote\u003e\n\u003cp\u003e[!important]\u003c/p\u003e\n\u003cp\u003e제가 몰랐던 백엔드 지식 위주로 이야기 합니다.\nExpress, MVC 패턴에 관해 공부하고 오셔야 이해할 수 있습니다.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eExpress 를 배우고, 보다 좀 더 정형화된 형식이 필요함을 느꼈다.\u003c/p\u003e\n\u003cp\u003e코드를 보다 견고하게 짜는 것에 대한 욕심이 생겼고, 에러 처리 등 다양한 예외 처리 로직들을 수행해보면서, 코드의 안정성이 중요하다는 걸 느꼈다.\u003c/p\u003e\n\u003cp\u003e그래서 이번에 Nest.js 를 배우기 시작했는데, \u003ccode\u003eController\u003c/code\u003e \u003ccode\u003eService\u003c/code\u003e 등등.. 유명한 계층은 내가 아는 일들을 그대로 수행하고 있어서 배우는데 문제가 없었다.\u003c/p\u003e\n\u003cp\u003e그런데, 왜 \u003ccode\u003e@Module\u003c/code\u003e 데코레이터라는 계층이 있는 걸까? 궁금해져서 조금 알아보았다.\u003c/p\u003e","title":"Nest.js Modules 를 통해 배우는 의존성 주입"},{"content":"부스트캠프 멤버십에 합격하다. 스스로에게 부실하고 아쉬울게 많았던 챌린지 챌린지는 정말로 배울 기회가 많았고, 값진 기회였다. (챌린지 자체가 아쉽단게 절대 아니다.)\n사실 한달은 긴 기간이지만, 배우고 실천하기에 있어서는 너무나 짧은 기간이다.\n어느 누가 부트캠프를 통해 한달 과정을 통해 모든 걸 마스터할 수 있다고 하겠는가.\n그것은 나에게도 마찬가지였다.\n솔직히 말해서 모든 주차별로 회고를 썼어야 했는데 다 쓰지 못해서 아쉬움이 많이 남았다. 그만큼 내가 여태 뼈저리게 느끼지 못했던 학구열과 실천을 하지 못했던 게으름에 대한 성장통 이라고 생각한다.\n그렇게 아쉬움만 남아, 나에게는 멤버십은 다음 기회라고 생각했었는데.. 정말 고맙게도 합격 소식에 나에게 들려왔다.\n![[2024-10-24-지속-가능한-개발자란-무엇일까-학습-스프린트-회고-20241024152904343.webp|694]]\n사실 지금 돌이켜보면 나에게 너무 과분한 기회가 아닌가.. 싶었다. 평가 기준은 아직도 모른다. 비밀이기도 하고..\n솔직히 평가 기준을 알고 이것에만 집중하면서 활동하는 건 정말 의미없다고 생각한다.\n챌린지에서는 훌륭하신 분들이 이미 충분히 많으셨고, 그분들 중 멤버십에 떨어지신 분도 많이 보았다. 실제로 그분들 중에는 부스트캠프만큼 값진 경험을 하고 계시는 모습도 깃허브 피드를 통해서 보기도 했다. 이를테면 오픈소스 기여라던지..\n결국엔 부스트캠프 그 자체보단, 내가 학습하고자 하는 마음만 있으면 부스트캠프는 상관없다. 부스트캠프는 그걸 도와주는 버팀목일 뿐.. 결국 내가 해야함을 느낀다.\n그렇기에 더더욱 나에게 과분한 기회라고 생각했다.\n여태 나는 열정적으로 학습 을 하진 못했던 것 같다. 노션을 써보는 것도 처음이고, 모든게 새로운 환경에서 어정쩡하게 4주를 보낸게 아닌가 생각이 들었다.\n![[2024-10-24-지속-가능한-개발자란-무엇일까-학습-스프린트-회고-20241024153321666.webp]] 누가봐도 부실한 챌린지 시절 학습 기록들..ㅋㅋ\n실무처럼 배우는 학습 스프린트 과정 부스트캠프에서는 매일매일 내가 한 일을 기록을 하면서, 그 날 어떤 일을 했는지 매일 공유 했다.\n그 과정에서 내가 혼자 개발하고 있었구나.. 라고 생각이 들었고, 내가 정말로 성장하기 위해서는 어떻게 공부해야할까? 를 매번 나만의 방법을 찾기 위해 고민을 많이 했던 것 같다.\n매주 새로운 시도를 해보면서 나만의 방법을 찾아나가려고 노력했다.\n가령 계획을 나누어 세우거나, 학습 문서 형식을 변경해보거나, 구현 과정에서 학습과의 비율을 어떻게 정할지,, 같이 활동하는 시간을 어떻게 정할지 등등\u0026hellip;\nAI 시대에서 개발자로써 성장하기 위한 방법 특히, 요즘에는 ChatGPT 와 함께 협업(혹은 학습)을 할 수 있는 시대인 만큼, 이것들을 적극 사용해보면서, 내가 어떻게 하면 효율적으로 학습할 수 있을지 생각해보았다.\n결론부터 말하자면, 나는 AI 를 적극 채용하게 되었다. 간략하게만 알려주자면, 새로운 무언가를 질문을 할 때, \u0026lsquo;지식\u0026rsquo; 자체에 집중할 때에는 AI를 적극 활용하게 되었다. 애초부터 내가 무언가를 알아야지 그 무언가를 키워드로 하여 검색을 할 수 있었는데, 그러한 키워드나 지식 자체를 AI 검색을 통해 활용하게 됨으로써, 지식의 범위를 발빠르게 넓힐 수 있었다.\n![[2024-10-24-지속-가능한-개발자란-무엇일까-학습-스프린트-회고-20241029184000962.webp|669]]\n또한, 이 지식을 가지고 활용하는 간단한 예시 정도만을 물어봤고, 일종의 나만의 개인 멘토 느낌으로 사용하게 된 것 같다. 무엇보다 가장 좋았던 점은 글을 쓰는 능력을 많이 기를 수 있었던 것 같다. 요즘 AI가 개떡같이 말해도 찰떡같이 알아들을 수 있기에 좋은 것 같고, 오히려 AI가 오해하는 부분은 내가 전달력이 낮아서 제대로 전달하지 못한 부분임을 알 수 있어서 좋았다. 이를 코드 리뷰에도 활용하고 있다.\n![[2024-10-24-지속-가능한-개발자란-무엇일까-학습-스프린트-회고-20241029183831104.webp|677]]\n지금도 이 글은 AI를 통해 퇴고를 하고 있다 ㅋㅋ.\n그렇게 나만의 학습 방법을 찾아나갈 수 있었던 좋은 기회였고, 지금에 와서는 지속 가능한 개발자의 가치를 어느정도 깨달은 것 같다고 생각이든다.\n![[2024-10-24-지속-가능한-개발자란-무엇일까-학습-스프린트-회고-20241024160753696.webp|410]] 이 또한 우매함의 봉우리일 것이요..\n학습 스프린트 회고 부스트캠프에서는 항상 묻는다. 지속 가능한 개발자란 무엇일까? 하고 말이다.\n앞서 말했듯이 나는 이번 학습 스프린트 과정을 거치면서 진정한 학습에 대해서 어느정도 깨달았고, 이에 대해 공유 겸 회고 해보려고 한다.\n내가 부족했던 점 평소에 내가 학습을 했던가..?\n나는 평소에 학습이 잘 이루어지지 않았다.\n챌린지 때는 매일 구현을 하고, 제출을 해야만 살아남을 것이다. 라는 생각에만 집중하여 그냥 꾸미기에 급급했다. 내가 진정으로 어떤 가치를 쫒고 있는지 생각을 안하고 그냥 무작정 달리기만 했다.\n그래도 부스트캠프 멤버십에 들어서고 부터는 학습에 조금 집중을 해보려고 했었다.\n특히 노션과 옵시디언 사이에서 어떤 걸 선택할 지 고민을 많이 하면서, 정리를 제대로 해보려는 노력을 특히나 많이 했던 것 같다.\n![[2024-10-24-지속-가능한-개발자란-무엇일까-학습-스프린트-회고-20241024152814172.webp]]\n위에 보이는 것 처럼 그룹 활동 일지 또한, 다양한 시도와 다양한 생각을 하는 많은 사람들의 의견을 취합하여 저렇게 깔끔하게 정리할 수 있게 되지 않았나 생각한다..\n딥다이브? 딥다이브 라는 용어를 처음 알게 되었고, 문제 해결의 과정과 그 고민의 가치에 대해 알게 되었다. 평소에는 코딩에만 매진하고, 검색에만 매진하며 해결에만 급급했던 과거 시절이 떠올라서 많이 부끄러웠다.\n부스트캠프를 진행하면서 이런 과정들이 모두 딥다이브 경험이었다는 것을 알게 되었고, 기록으로 남기지 않아서 많이 아쉽다고 생각하게 됐다. 그래서 현재는 하나지만, 앞으로도 다양한 딥다이브에 관한 해결 방안들을 올리려고 한다.\n지금 당장에도 이 블로그에 올리는 글들은 내 소중한 딥다이브 경험들을 기록하기 위한 글들이다!\nAPI의 응답바디는 커도 좋을까 다양한 마스터님들과의 만남 또 한가지로, 마스터님들과 만남을 통해서 많은 시각을 넓힐 수 있었다.\n마스터님들이 실제로 실무에서는 어떤 일들이 있는지 친근하게 알려주어서 현업에 대한 공포심과 두려움을 살짝 이겨낼 수 있었던 것 같다.\n취업하면 끝이 아니다. 그 이후에도 내가 지속적으로 어떻게 성장할 수 있는지 잘 생각하게 만든 좋은 수업들이라고 생각한다.\n예를 들어, 실무에서 생긴 다양한 예시들을 설명해주셨는데, 그 과정에서 내가 많은 생각을 바꿀 수 있게 되었던 것 같다. 일례로 내가 직접 밑바닥 부터 구현해서라도 해결할 수 있어야하는 가치는 나에게 정말 많은 생각을 하게 만들었다.\n이런 부분에서 많은 영감을 받았고, 성장의 밑거름이 되었다고 생각한다.\n내가 배운 점 코드의 핵심은 일관성과 재사용성\n특히, 일관성 이라는 이름으로 코드를 작성하는 것에 많은 인상을 받았다. 항상 내 코드 스타일이 옳고, 다른 사람들의 코드 스타일에 어색함을 느껴서 내 방식대로 맨날 고치는 것에 집중하려고 했었던 것 같다.\n어떤 코드이던 자신만의 특색은 있기 마련이고, 결국 일관성 에 집중하면서 코드 리뷰를 하면서 많은 성장을 했던 것 같았다. 일관되지 않은 부분에서 피드백을 주고 의견을 보내보는 것에 집중하게 됐다.\n꼭 그렇지 않더라도, 코드를 왜 쓰는지 근거에 관해서 생각을 많이 했던 것 같아서 좋았다.\n그리고 마스터클래스 시간에서 많이 느낄 수 있는 것들 중에, 주니어를 포함한 우리가 많이 실수하는 것들은 바로 코드의 반복 들이었다.\n항상 코드리뷰를 통해 개선되는 부분을 보면 결국 재사용이 될만한 코드 부분의 개선이었다.\n그래서 코드 자체를 잘 짜려면 재사용에 집중해야하는것이 좋을 것이다.\n처음 배우는 것의 중요성\n이번에 나는 프론트엔드 만 하다가 백엔드를 처음 선택해보았다. 왜냐하면, 백엔드 자체가 서버를 다루는 분야인데, 브라우저에서만 작동하는 프론트엔드와 달리 자유로운 것이 너무 좋았다.\n특히, 최근에 마인크래프트 플러그인을 만져보면서 자바에 대해 공부해봤는데, 이런 자바를 사용하는 스프링에 대해서도 궁금했다.\n또 서버측 코드인 이상 파일 시스템 접근, 데이터베이스 직접 제어와 같은 부분을 다루기에 엄밀한 방식의 코딩을 백엔드에서 요구를 할 텐데, 그런 부분에 있어서 나에게는 매력적으로 다가왔다.\n하지만,, 처음 배울 때에는 어떻게 해야할까..? 에 대한 고민이 많았다.\n특히나 나는 백엔드 지식을 처음 배우면서, 짧은 기간 동안 많은 상심과 극복을 경험했다.\n데이터베이스를 예를 들 수 있겠다. 데이터베이스에서 예를 들면 정규화, 반정규화 같은 개념이 한번에 이해가 되지 않았다. 일단은 하나만 생각해보자 라는 식으로 생각을 하여 하나만 해보았다.\n그러다 보니 주어진 미션들도 모두 하지 못하고, 코드의 완성도도 많이 높이진 못했다. 하지만 선택과 집중을 통해 배울 것들을 정리할 수 있었고, 앞으로의 개발에서도 새롭게 배우는 두려움에 대해 어떻게 대처할지도 생각하게 되었다.\n러닝 커브로 인해서 모든 걸 하진 못했지만, 앞으로는 어떻게 할지는 완벽히 잡은 느낌이었다.\n자신감을 가지자.\n이는 내 인생에서도 적용 되었고, 근거없는 자신감 을 바탕으로 일단 저질러보자 라는 마인드를 배우게 됐던 것 같다.\n나는 사실 좋지 않은 학창시절로 인해 자존감이 많이 떨어져있었고, 나를 무시할 것 같은 사람들에 대한 경계심 그리고 사소한 것에 의미를 부여하는 자격 지심이 많은 사람이었다.\n부스트캠프를 통해 좋은 분들을 많이 만나면서 자존감이 많이 회복된 느낌이었다. 일단 내가 잘하던 못하던 자신감을 가지는게 정말 좋다고 생각한다. 내가 실력이 없어도 자신감이 있으면 열정적이게 보일 것이고, 실력이 있으면 멋있게 보일 것이다.\n마치 사람을 두려워하지 않고 호기심에 접근해보는 멍청하지만 당당한 펭귄처럼.. 내 인생의 모토를 새롭게 새운 것 같아서 많이 인상이 남는다.\n처음으로 해본 다양한 코드리뷰 경험들 ![[2024-10-24-지속-가능한-개발자란-무엇일까-학습-스프린트-회고-20241024152437681.webp]]\n나는 멤버십을 하면서 개인적으로 매주마다 만나는 새로운 사람들의 코드를 직접 해주었다.\n특히 위에서 언급했던 코드의 일관성을 위주로 리뷰해주었던 것 같다. 변수명이 통일되지 않은 부분이라던지, 특히 잘한 부분의 경우 칭찬을 많이 해줬다.\n이렇게 사소한 부분도 모두 짚어주거나 칭찬해주면서 함께 자라는 역량을 기를 수 있었던 것 같다!\n7-8주차 에서 해본 코드 리뷰 경험들 그 중에서 특히 7-8주차 기간에 많은 분들과 만나 월요일, 수요일 마다 코드 리뷰를 진행하면서, 많은 안목을 기를 수 있었던 것 같다.\n코드 리뷰를 하면서, 그 다음날 해당 리뷰에 대한 피드백과 답변을 서로 알려줌으로써 정말 알차게 보낼 수 있었던 것 같았다.\n그 예시로 세션 을 들 수 있을 것 같다. 내가 일전에 세션과 관련된 부분에서 setTimeout 을 설정하여 세션이 해제되도록 만들었는데, 정말 별 생각 없이 만들었던 것 같다.\n다른 분 께서 나에게 생각을 할 만한 느낌으로 질문을 던져줌으로써 다시 생각할 수 있게 되었고, 결국 세션 방식에서 이런 방식이 성능 저하를 유발할 수 있음을 깨달았다.\n코드 리뷰 문화가 활발하지 않았다면 지금도 같은 방식으로 코드를 짜고 있었을 것을 생각하면 아찔하다\u0026hellip;!\n다음에도 다른 사람들과 같이 자랄 때에는 이런 방식으로 서로가 적극적으로 리뷰해가는 방식으로 공부해도 괜찮을 것 같다는 생각이 들었다.\n문서화의 중요성 역으로 나는 멘토님으로부터 코드 리뷰를 받는데 나는 내가 한가지 느낀 점이 있었다. 내가 의외로 개발을 하는데에는 문제 없지만, 그 외적인 부분에서 협업 경험이 부족함을 깨달았다.\n나름대로 커밋 컨벤션도 맞춰가며 열심히 했지만, 결국 누군가에게 내가 이런 작업을 했어요 라고 말하는 실력이 부족함을 깨달았다.\n의미 단위로 커밋하는 것이 정말 중요함을 깨달았고, 커밋의 무결성에 대해 많이 고민해봤던 것 같다.\n내가 정의하는 커밋의 무결성이란, 이 커밋이 설명하는 것과 실제 커밋 내용 사이에서의 일치하는 부분이 얼마나 되는지를 의미한다고 보면 된다.\n![[2024-10-24-지속-가능한-개발자란-무엇일까-학습-스프린트-회고-20241024163146212.webp]] 개발도 잘하자\n소중하고 뜻 깊은 만남들 다양한 활동들을 진행하며 많은 격려를 얻었다고 위에서 언급했다.\n많은 코드리뷰를 해주면서 나에게 많은 관심과 응원을 해주었던 따뜻한 한마디들이 나의 자존감을 채워주는데 큰 역할을 했다고 생각하고, 내가 앞으로도 성공하게 된다면 이런 공로를 같이 부스트캠프를 수료할 동기들에게 돌리고 싶다.\n개발자로써, 아니 사회인으로써 처음 출발지점이 된게 부스트캠프가 아닐까 생각한다.\n가장 먼저 생각나는 분들은 1-2 주차 분들이다.\n여태까지 나보고 긍정적이다고 말해주는 분들이 없었다. 1-2주차 그룹원 분들을 만나면서 여느때보다 정말로 진짜 재밌게 진행할 수 있었던 것 같고, 그 덕분에 학습 스프린트 과정에서 우울함 없이 즐겁게 소화할 수 있는 배경이 되었던 것 같다.\n그 이후로 \u0026lsquo;긍정적\u0026rsquo; 이라는 피드백을 한번도 안받은 적이 없었다! 앞으로 이런 긍정적인 마인드를 끝까지 가져갈 수 있다면 정말 좋겠다고 생각이 들었다!\n![[2024-10-24-지속-가능한-개발자란-무엇일까-학습-스프린트-회고-20241029185132109.webp|622]] 감사합니다, 1-2주차 그룹원 분들..!\n그리고 7-8 주차에 참여를 많이 못했었다. (화요일 허리 이슈로 인해 운동을 가야했다.) 그 과정에서 괜찮다고 응원해주며, 내 코드를 보고 좋은 점을 칭찬해주시는 동료 캠퍼분들 덕분에 힘이 많이 되었던 것 같다.\n무엇보다, 코드 리뷰 때 나름 신경을 많이 써준 점에서 고마움을 느낀다!\n![[2024-10-24-지속-가능한-개발자란-무엇일까-학습-스프린트-회고-20241024164031461.webp]]\n지속 가능한 개발자란 무엇일까 흥미를 가지자.\n이 말을 가장 먼저 쓰고 싶다. 매주마다 개인 회고를 진행해보면서 다음주의 나에게 하고 싶은 말들을 요약하여 키워드들을 나열해보았다.\n성장 기술적 근거 왜? 재미 정리하기 그리고.. 하면 된다. 였다.\n흥미를 가지는 개발자가 지속 가능한 개발자라고 생각한다.\n결국 모든게 흥미가 있어야만 배우는 것과 일하는 것을 멈추지 않는다고 깨닫게 되었다. 어렸을 때의 생각이 나게 만드는 아주 중요한 사실이라고 생각한다.\n어렸을 때부터 게임하는 걸 좋아했는데, 아픈데도 불구하고 게임하던 어린 시절이 생각났다.\n![[2024-10-24-네이버-부스트캠프-9기-학습스프린트-회고-20241024143341167.webp]]\n역시 내 마음대로 내 소신대로 사는게 재밌고, 그게 인생의 가치 같다. 😁\n함께 자라는 개발을 잘하자\n가장 중요한건, 결국엔 개발만 잘하는 것 이 아닌, 개발도 잘해야한다는 것이다.\n우리는 함께 자랄 수 있어야 지속 가능한 개발자가 될 수 있을 것이다.\n개발에 대한 열정이 떨어질 때, 주변에서 많은 격려를 받아 내가 다시 일어서서 나만의 개발자로써의 가치를 확립했던 것처럼, 함께 자랄 수 있어야 개발도 잘할 수 있을 것이다.\n다시 이야기하게 된다면 \u0026lsquo;함께자라는 개발을 잘하자\u0026rsquo;가 지속 간으한 개발자가 되기 위한 두번째 가치가 아닐까.. 스스로 회고 해본다.\n지속 가능한 개발자가 되기 위한 여정 그래서 앞으로 다시 긴 모험을 떠나보려고 한다. 그룹 프로젝트로의 여정을 말이다.\n부스트캠프 자문위원님께서 말씀해주셨다.\n우리는 모두 긴 여행의 출발점에 서 있다.\n사실 이번에 개인 회고 하면서 많은 시도를 해보려고 한다. 나는 평소에 소위 말하는 극 I 라고 할 수 있겠다.\n그래서 이번 인터미션 기간 동안 울산 에서 조금(멀리 ㅠㅠ) 떨어진 부산에서의 모각코도 적극 참여중이고, 새로운 만남을 아끼지 않고 적극적으로 만나볼 예정이다! 함께 자라는 것 말이다 😄\n모각코를 진행하며 성향이 같은 분들과 기술적인 이야기를 나누는 건 정말이지 즐거운 일이라고 할 수 있다.\n이렇게 흥미도 잃지 않으며 함께 자라는 사람이 되기 위해 나는 앞으로 긴 여정을 떠나보려고 하는 것이다.\n부산 모각코 모임 자세한건 나중에 써보겠다!\n그룹 프로젝트 때 우여곡절이 많겠지만, 내 모든걸 쏟고 싶다는 생각이 들었고, 앞으로 실수도 하고 많이 엎어질 거고.. 면접 때 많이 깨져보겠지만, 화이팅 하려고 한다.\n그야 재밌으니까~\n","permalink":"https://blog.moozeh.org/posts/2024/2024-10-24-%EC%A7%80%EC%86%8D-%EA%B0%80%EB%8A%A5%ED%95%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C-%ED%95%99%EC%8A%B5-%EC%8A%A4%ED%94%84%EB%A6%B0%ED%8A%B8-%ED%9A%8C%EA%B3%A0/","summary":"\u003ch2 id=\"부스트캠프-멤버십에-합격하다\"\u003e부스트캠프 멤버십에 합격하다.\u003c/h2\u003e\n\u003ch3 id=\"스스로에게-부실하고-아쉬울게-많았던-챌린지\"\u003e스스로에게 부실하고 아쉬울게 많았던 챌린지\u003c/h3\u003e\n\u003cp\u003e챌린지는 정말로 배울 기회가 많았고, 값진 기회였다. (챌린지 자체가 아쉽단게 \u003cstrong\u003e절대\u003c/strong\u003e 아니다.)\u003c/p\u003e\n\u003cp\u003e사실 한달은 긴 기간이지만, 배우고 실천하기에 있어서는 너무나 짧은 기간이다.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e어느 누가 부트캠프를 통해 한달 과정을 통해 모든 걸 마스터할 수 있다고 하겠는가.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003ccode\u003e그것은 나에게도 마찬가지였다.\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e솔직히 말해서 모든 주차별로 회고를 썼어야 했는데 다 쓰지 못해서 아쉬움이 많이 남았다. 그만큼 내가 여태 뼈저리게 느끼지 못했던 학구열과 실천을 하지 못했던 게으름에 대한 \u003ccode\u003e성장통\u003c/code\u003e 이라고 생각한다.\u003c/p\u003e","title":"지속 가능한 개발자란 무엇일까? - 학습 스프린트 회고"},{"content":"DTO 란? 이전에 계층 간 데이터 교환을 위한 객체라고 배웠다.\n여기에 더 나아가서, DTO란, 네트워크 를 통해 전송되는 방법 또한 정의할 수 있다.\n말 그대로 데이터 전송 객체이다.\nNest.js 에서의 DTO Nest.js 에서는 Class 를 이용하여 정의하는 것을 추천하고 있으며, interface 로도 가능하다.\n그 이유는 class 는 interface 와 달리, 런타임 내에 정의 되어 있기 때문에 pipe 등의 기능도 활용 가능하다고 한다.\n이는 반대로 얘기하면, 굳이 상태를 보존할 이유가 없다면 인터페이스를 쓰는게 낫다는 뜻으로도 해석할 수 있겠다.\nDTO의 역할 DTO의 역할은 크게 두가지 이다.\n데이터의 유효성 체크 타입스크립트에서의 타입으로 활용 프로퍼티 변경의 단순화 여러 계층에서 여러개의 데이터를 보내는 형식이 될 때 이를 하나의 객체로 정의하여 프로퍼티의 변경이 필요할 때, 여러 계층에서 수정해야할 때 되게 귀찮은데, 이 문제를 해결해줄 수 있다.\n내가 이전에 배웠던 점과의 차이 이전에 내가 공부하기를 엔티티와 대응시켜 DB와 분리하는 쪽으로 DTO를 구현했지만,\n실제로 메서드마다 사용하는 DTO를 따로 정의할 수도 있다. 굳이 하나만 만들 필요는 없단 점을 생각 못했다.\n즉, 하나의 모듈(도메인) 내에서 DTO를 꼭 하나로 통일할 필요가 없다.\nDTO 사용하기 예시 DTO 자체도 단순히 모델을 정의하듯이 정의하면 된다.\nexport class CreateBoardDto { title: string; description: string; } 이 DTO를 실제 사용할 때에는 아래와 같이 사용하면 된다.\n@Post() @UsePipes(ValidationPipe) createBoard(@Body() createBoardDto: CreateBoardDto): Board { return this.boardsService.createBoard(createBoardDto); } ","permalink":"https://blog.moozeh.org/posts/2024/2024-10-23-nestjs-nestjs-%EC%97%90%EC%84%9C%EC%9D%98-dto/","summary":"\u003ch2 id=\"dto-란\"\u003eDTO 란?\u003c/h2\u003e\n\u003cp\u003e이전에 계층 간 데이터 교환을 위한 객체라고 배웠다.\u003c/p\u003e\n\u003cp\u003e여기에 더 나아가서, \u003ccode\u003eDTO\u003c/code\u003e란, \u003ccode\u003e네트워크\u003c/code\u003e 를 통해 전송되는 방법 또한 정의할 수 있다.\u003c/p\u003e\n\u003cp\u003e말 그대로 데이터 전송 객체이다.\u003c/p\u003e\n\u003ch3 id=\"nestjs-에서의-dto\"\u003eNest.js 에서의 DTO\u003c/h3\u003e\n\u003cp\u003eNest.js 에서는 \u003ccode\u003eClass\u003c/code\u003e 를 이용하여 정의하는 것을 추천하고 있으며, \u003ccode\u003einterface\u003c/code\u003e 로도 가능하다.\u003c/p\u003e\n\u003cp\u003e그 이유는 \u003ccode\u003eclass\u003c/code\u003e 는 \u003ccode\u003einterface\u003c/code\u003e 와 달리, 런타임 내에 정의 되어 있기 때문에 \u003ccode\u003epipe\u003c/code\u003e 등의 기능도 활용 가능하다고 한다.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e이는 \u003cstrong\u003e반대로 얘기하면, 굳이 상태를 보존할 이유가 없다면 인터페이스를 쓰는게 낫다는 뜻으로도 해석할 수 있겠다.\u003c/strong\u003e\u003c/p\u003e","title":"[Nest.js] Nest.js 에서의 DTO"},{"content":"🧵 HTTP, 그 다음은? HTTP 프로토콜을 직접 만들어보면서, 생각보다 간단한 방식으로 소통한다고 깨달았습니다.\n무언가 특수한 포맷팅을 이용해서..? 바이너리로 인코딩하여 전송할 줄 알았는데 문자였던 것이지요..\n그래서 이렇게 간단하게 문자열로 소통하니, 보안에 정말로 취약할 수 밖에 없음을 또 인지할 수 밖에 없었습니다. 역시 무언가를 사용할 때에는 보안을 의식할 수 밖에 없습니다.\n그래서 우리가 흔하게 사용하지만, 당연하다고 여기는 HTTPS 에 대해 더 공부를 하게 되었습니다.\nHTTPS 프로토콜 그럼 HTTPS란 뭘까요?\nHTTP + S(ecure) 즉, 보안 계층을 더한 HTTP 라고 생각하면 됩니다. 우리가 C언어에서 MSVC 에서 사용할 수 있는 scanf_s 와 같은 s 처럼 보안을 의식하여 보안 계층을 한층 더 감싼 HTTP 통신이라고 생각하면 됩니다.\n이때, 이 인증은 정확히 어떤 인증을 뜻할까요? 이 인증은 SSL, 이제는 TLS라고 불리는 프로토콜을 사용하여 암호화하여 통신합니다.\nHTTPS 통신 과정 간단합니다! 사전에 약속된 대칭키를 통해서 소통하는 형태입니다.\n하지만 그 앞과정이 살짝 복잡한데요, 그래서 기존 HTTP보다 오버헤드가 크다는 단점이 있습니다.\n하지만 보안이라는 장점앞에 그깟 오버헤드쯤이야… 싶습니다 ㅎㅎ\n클라이언트가 서버에 연결 요청 서버가 SSL/TLS 인증서를 클라이언트에게 보내줌 클라이언트가 인증서를 검증함 (인증기관, CA 로부터) TLS 핸드 셰이크를 통해 안전한 연결 설정 암호화된 데이터 통신 시작 ![[2024-10-06-tls-https-image.png]]\n출처 : https://brunch.co.kr/@growthminder/79\n🗒️ TLS 란? 사전적 정의는 다음과 같습니다.\n🔥 Transport Layer Security\nSSL 이라고도 불리며, 인터넷에서 안전하게 서로 통신할 수 있도록 하는 프로토콜을 뜻합니다.\n그래서 이는 비단 인터넷 사용 뿐만 아니라, 인터넷 연결 그 자체에도 적용되기도 합니다.\n예를 들어, 우리가 와이파이를 연결할 때에도 대학교의 경우, 특정 인증서를 통해 (PEM 키 등) 연결하기도 합니다.\n이러한 TLS를 사용하여 좋은 점은 무엇일까요? 크게 세가지 입니다.\nTLS의 장점 데이터의 기밀성(보안) 유지 가능 데이터의 무결성 보장 (변조 방지) 인증 제공 가능 (서버 인증서를 통해 우리 서버가 검증된 서버임을 알려줄 수 있음) 🔒 TLS 가 완전히 안전할까요? 일반적으로 안전합니다! 사실 그렇게 깊게까지 생각할 필욘 없지만, 왜 이렇게 안전한지 한번 TLS 과정을 통해 같이 생각해봅시다.\nTLS 통신(핸드 셰이크) 과정 Client Hello 클라이언트가 서버에 지원 가능한 암호 스위트 목록, SSL/TLS 버전을 전송해줍니다. Server Hello 서버가 선택한 암호 스위트와 SSL/TLS 버전을 클라이언트에 응답합니다. Certificate : 서버가 자신의 SSL 인증서를 클라이언트에 전송해줍니다. Server Key Exchange : 서버가 키 교환에 필요한 추가 정보를 전송합니다. Server Hello Done : 서버가 초기 메세지 전송을 완료했음을 알립니다. Client Key Exchange : 클라이언트가 대칭키 (세션 키) 생성에 필요한 정보를 암호화하여 서버에 전송합니다. Change Cipher Spec : 양측이 협상된 암호 스위트를 사용할 준비가 되었음을 알립니다. Finished : 핸드 셰이크를 완료하고, 암호화 통신을 시작합니다. 그 이후부터는 단순히 HTTP 메세지를 서로 인증된 암호화 정보를 통해 암호화하여 통신하는게 끝입니다! 간단하죠. 간단하지만 정말 강력하다고 생각합니다.\n하지만 몇가지 궁금점들이 있을 수 있는데, 저의 경우 이러한 궁금점들이 생겨서 더 자세하게 공부하게 되었습니다.\n아무것도 없는 클라이언트가 무엇으로부터 암호화를 할 수 있을까? 일단, 첫번째로 서버에 지원 가능한 암호 스위트 목록을 전송합니다.\n그리고 인증서에는 공개키가 포함되어있습니다! 이게 정말 중요한 정보입니다. 인증서가 없어서 HTTPS 연결을 사용할 수 없는 이유가 이것입니다.\n이 인증서는 서버의 공개키를 포함하고 있고, 이것을 CA가 보증해주는 구조입니다.\n그리고, 실제 데이터 암호화에는 이 공개키가 사용되지 않습니다. 인증서를 검증하는데에 사용되기 때문입니다.\n대칭키(세션키) 가 무엇인가요? 세션키란, 세션마다 동적으로 생성되어 해당 세션 동안 유효한 키 입니다.\n암호화와 복호화에 동일한 키를 사용하는 암호화 방식에서 사용되는 키를 뜻합니다.\n따라서 우리가 생각하는 비밀키 공개키 등등.. 과는 관련없는 키입니다.\n오히려 비밀키와 공개키를 사용하여 해당 세션키를 전달하고 받는데에 사용됩니다.\n하지만,, 클라이언트가 공개키로 암호화한 데이터를 어떻게 알게 될까요..?\n그러면, 대칭키를 어떻게 클라이언트가 알게 되나요? 그래서, 프리마스터 시크릿 이라는 임의의 값을 별도로 생성하여 클라이언트가 세션키를 안전하게 받는데 사용할 수 있습니다.\n클라이언트가 먼저 생성한 프리마스터 시크릿 이라는 임의의 값을 서버에게 먼저 전달합니다. 서버는 이 프리마스터 시크릿 이라는 값을 받아서 알게 되는 거죠.\n결국, 세션 통신에 관한 키 생성은 클라이언트 가 하게 됩니다. 이 프리마스터 시크릿 이란 걸 가지고 각자 동일한 세션키를 생성하는 것이죠.\nTLS 중간자 공격 하지만 TLS 핸드셰이크 과정 자체에서 중간자 공격(MITM)이 일어날 수도 있는 것도 사실입니다.\n인증서 조작 공격자가 신뢰할 수 있는 인증서를 획득하거나 사용자의 시스템에 악의적인 루트 인증서를 설치할 경우, 중간자 공격(MITM) 공격이 가능할 수 있습니다\n프로토콜 다운그레이드 공격자가 클라이언트와 서버 간의 통신을 방해하여 더 취약한 이전 버전의 TLS를 사용하도록 강제할 수 있습니다.\n🧑‍⚕️ 중간자 공격을 완전히 방지하기 위한 방법 신뢰할 수 있는 CA (인증기관) 사용, 최신 TLS 버전 사용 Certificate authority\n신뢰할 수 있는 인증기관을 서버 도메인 / 인증서 내용을 비교하여 확인할 수 있다면, 우리는 인증하는 것 자체에는 큰 문제가 없는 이유가 이것입니다.\n우리가 자주 사용하는 Let's Encrypt 가 대표적인 인증기관입니다.\n하지만, 돈이 없거나, 이러한 인증 기관도 믿지 못하는 상황이 있을 수 있겠죠? 이러한 점에 대한 우려는 타당하다고 생각이 되고, 제 주변 지인과의 대화에서도 나온 주제이기도 합니다.\n진짜 그럼 매번 인증기관에 접속하나요..? 아뇨! 그건 또 아닙니다.\n대신 다음과 같은 방식으로 CA의 신뢰성을 확인할 수 있습니다.\n사전에 설치된 CA 인증서 애초부터 운영체제와 웹브라우저에서 신뢰할 수 있는 CA의 루트 인증서 목록이 미리 설치되어있습니다. 서버 인증서 검증 TLS 핸드 셰이크 중에는 자신의 인증서를 클라이언트에게 전송합니다. (원래 전송해옴) 로컬 검증 자신이 받은 서버 인증서와 자신이 가지고 있는 신뢰할 수 있는 CA 목록과 대조합니다. 인증서 체인 검증 필요할 경우, 루트 CA까지 검증을 수행할 수 있습니다. 이렇게 실시간 CA 접속 없음이 보장됩니다.\n이미 신뢰할 수 있는 CA 목록을 가지고 있기 때문에, 일반적으로 안전하다고 할 수 있는 겁니다.\n또한 최신 TLS 버전을 사용하는 것도 좋은 방법이 될 수 있습니다. 하지만 여기서 끝내면 섭섭하니 이러한 방법 외의 여러 방안 중 하나를 알아보고자 합니다.\n인증서 피닝 (공개키 피닝) 그 방법은 말 그대로 공개키 자체를 고정하는 방법입니다.\n서버와 클라이언트 간 공개키를 서로 가지고 있다면, CA 시스템을 변조됐더라도, 탈취할 수 없게 됩니다. (이미 서버에 대한 인증서정보(공개키)를 클라이언트가 가진 상태로 통신을 시작할 수 있습니다.)\n추가 : 인증 기관은 정확히 어떻게 등록되고 관리될까요? 인증기관이 신뢰할 수 있게 되는 과정에 대한 질문이 있었습니다.\n저도 그부분에 관련해서 미흡하게 알고 있었고 따로 공부하게 되었습니다.\n우선, 공개적인 인증기관이 되려면, 엄격한 검사과정을 거쳐야한다고 합니다. 우선, Let’s Encrypt 를 예시로 들면, 해당 기관은 비영리 인증 기관입니다. 이러한 인증기관은 WebTrust, ETSI 등의 엄격한 기준이 있다고 하는데, 이러한 조건을 충족해야한다고 합니다.\n해당 과정에서는 보안 정책, 키 관리, 인증서 발급 절차 등을 검사한다고 보시면 되겠습니다.\n그 후, 주요 브라우저와 운영체제 제조업체(마이크로소프트, 애플, 모질라) 등에서 운영하는 루트 인증서 프로그램이 따로 있습니다.\n이러한 루트 프로그램에 참여하여, 브라우저와 운영체제에 직접 인증기관의 서명을 발급해줄 수 있습니다.\n그 외에도 법적인 계약을 체결하거나, 지속적인 외부 감사를 받는 등 신뢰받을 수 있는 인증기관으로 거듭나려면 조건이 많이 필요합니다.\n","permalink":"https://blog.moozeh.org/posts/2024/2024-10-06-tls-https/","summary":"\u003ch2 id=\"http-그-다음은\"\u003e🧵 HTTP, 그 다음은?\u003c/h2\u003e\n\u003cp\u003eHTTP 프로토콜을 직접 만들어보면서, 생각보다 간단한 방식으로 소통한다고 깨달았습니다.\u003c/p\u003e\n\u003cp\u003e무언가 특수한 포맷팅을 이용해서..? 바이너리로 인코딩하여 전송할 줄 알았는데 문자였던 것이지요..\u003c/p\u003e\n\u003cp\u003e그래서 이렇게 간단하게 문자열로 소통하니, 보안에 정말로 취약할 수 밖에 없음을 또 인지할 수 밖에 없었습니다. 역시 무언가를 사용할 때에는 보안을 의식할 수 밖에 없습니다.\u003c/p\u003e\n\u003cp\u003e그래서 우리가 흔하게 사용하지만, 당연하다고 여기는 HTTPS 에 대해 더 공부를 하게 되었습니다.\u003c/p\u003e\n\u003ch3 id=\"https-프로토콜\"\u003eHTTPS 프로토콜\u003c/h3\u003e\n\u003cp\u003e그럼 HTTPS란 뭘까요?\u003c/p\u003e\n\u003cp\u003eHTTP + S(ecure) 즉, 보안 계층을 더한 HTTP 라고 생각하면 됩니다. 우리가 C언어에서 MSVC 에서 사용할 수 있는 scanf_s 와 같은 s 처럼 보안을 의식하여 보안 계층을 한층 더 감싼 HTTP 통신이라고 생각하면 됩니다.\u003c/p\u003e","title":"HTTPS, TLS의 의미와 관련 보안 취약점과 인증서 피닝\n"},{"content":"서론 : API 설계 시 든 의문 API 응답과 요청 과정에서의 오버헤드는 얼마나 성능에 영향을 끼칠까요?\n예를 들어 여러 카테고리 열에 담긴 카드 정보를 불러오는 API를 작성해야할 때가 있었는데, 저는 전체 데이터를 한번에 가져오는게 아니라, 열의 인덱스 번호를 URL에 담아서 보내고, 해당 열에 대응하는 카드들을 가져오는 API 로 설계를 했었습니다.\n이렇게 설계를 했던 이유는 사실 REST 원칙에서 \u0026ldquo;API 계층적으로 구성해야한다\u0026quot;는 원칙에 따라 구성을 하였기 때문입니다. 사실 카드 인덱싱을 하는데 있어서 계층적으로 구성하려면 URL 파라미터를 /columns/cards 이런식으로 불러오도록 만드는게 좋지 않았을까 하는 생각이 듭니다.\nAPI의 응답 바디는 과연 커도 상관이 없을까? 하지만 그때 의문이 들었습니다. API 요청을 받았을 때, 만약에 전체 카드에 대한 정보를 API로 요청을 하였다면, 만약 보내야할 응답의 바디가 커진다고 가정하면, 패킷의 경우 응답 바디가 커지게 되면 애플리케이션 단에서 보내게되는 패킷을 트래픽에 맞게 나누어서 보내야한다고 알고 있는데, 그러면 라우팅의 수가 많아지니 손해가 아닐까라는 것이었습니다.\n요청을 여러번하면, 그만큼 네트워크 상황에 따라 최적화되어 보내지지 않을까라고 순수하게 궁금해했던 것 같습니다. 단순하게 생각해보면 HTTP 요청은 애플리케이션 단 이므로 의미가 없지만, 실제로 나누어 보내는게 오버헤드가 얼마나 큰지도 궁금하기도 했습니다.\n이미지를 불러오기 위한 서버와 이미지 처리 방식 이게 신기한 점이, 실제로 노션과 같은 경우 이미지를 불러오는 방식은 따로 입니다. 비교적 용량이 큰 이미지의 경우 요청을 별도로 된다는 뜻인데, 노션의 경우 일반적으로 문서가 블락단위로 나누어서 각각의 블락을 하나의 객체로 담아서 API로 응답 바디에 담아서 보냅니다.\n실제 노션 API 를 통해서 노션 페이지를 제 개인 깃허브 페이지로 배포해보려고 예전에 잠깐 찾아봤었는데 (물론 완전히 해보진 못했지만..) 노션에서는 페이지를 불러올 때 각 블락단위로 불러오고, 이때 이미지의 경우 이것을 하나의 “파일” 취급합니다. 노션에서는 파일 블록에는 별도의 url 참조만 올려놓습니다.\n노션 파일 링크\n전체 블락을 가져오게 되면 모든 페이지의 내용이 구현되어야하지만, 최근 슬랙에서 다른 동료 캠퍼분께서 이미지만 로딩이 안되는 현상을 보셨을 겁니다. 사실 이러한 현상은 이미지가 별도의 파일로 취급되기 때문에, 블락은 불러와지고, 이미지와 연결된 파일의 url 을 통해 불러오는 것에 실패했기 때문입니다.\n일반적으로 백엔드 기술 중에 많이 알려진 로드 밸런싱 같은 별도의 확장 설계를 한 이유는 하나의 API로 불러오는 응답의 내용이 많아지기 때문에 이렇게 해결한 것이라고 저는 추측합니다.\n그래서 API 응답의 바디가 큰 하나의 API를 사용하는 것이 좋을까, 그게 아니라면, 내가 생각한 것 처럼 여러개의 API를 쓰더라도 응답 바디가 작은게 좋을까 라는 것에 대한 의문이 커지기 시작했습니다. 다른 말로 저런 이미지도 한번에 불러오면 되는 거 아닌가? 라는 것이죠.\n사실 트래픽 상으로만 보면 한번에 담아서 보내는게 이득일 것 입니다. 하지만 “왜?”라는 질문을 생각해보는게 우선이라고 생각했고, 아래와 같이 좀 더 깊게 고민해볼 수 있는 시간이었던 것 같습니다.\n왜? 라는 질문을 생각해보기 \u0026ldquo;요청 응답 헤더가 포함되어서 오버헤드가 커져서 그래요\u0026rdquo; 라고 단순히 생각하고 끝낼 수도 있을 것입니다. 하지만 그렇게 단순히 생각할 수가 없을지도 모릅니다.\n첫번째로, 만약 요청 응답 헤더를 무시할만큼 바디가 커지게 되면 패킷을 나누어야 합니다. (근거 : 내 학교 수업 중 \u0026ldquo;데이터통신, 자세한건 IPv4 패킷 전달 과정 참고\u0026rdquo;) 그렇게 된다면, 패킷을 나눈 만큼 네트워크 단의 패킷의 헤더는 다시 붙게 되고 오히려 전달해야할 패킷은 더 많아집니다. 즉, 큰 차이가 없게 될 것이란 거죠.\n두번째로, 한번에 보내는 애플리케이션의 요청 혹은 응답이 많아진다면, 패킷 로스로 인한 복구에 드는 시간이 증가할 수도 있다는 점입니다. 그렇게된다면 적은 크기를 주고받는 API를 여러번 호출하는게 이득이 될 수도 있지않을까란 생각입니다.\n사실 두번째에 관한 실험을 제대로 진행해볼 순 없었는데, 혹시 알고있는 분이 있다면 댓글로 정보공유해주시면 감사하겠습니다.\n실제로 스프링부트를 사용하다가 응답 바디가 큰 경우 중간에 패킷로스로 인해서 다시 보내야하는 경우가 있다고 한다.\nData loss when calling a HTTP request with huge response body\n하지만 이런 것도 직접 실험을 해보고 원인을 찾아보는게 의미 있다고 생각합니다. 그래서 주말에 남는 시간에 직접 실험을 해보았고, 배울 점들을 많이 발견할 수 있었던 것 같습니다.\nAPI 네트워크 테스트 진행 우선 위에 언급한 제 의문들에 대한 영향을 최대화 하기 위해 파일의 크기를 다르게 해서 진행했습니다. API 응답 바디에 큰 JSON 파일을 보내주었습니다.\n또한, 라우팅에 대한 최적화가 진행될 수 있다는 가정하에,\n하지만 돈이 없어(…) 서버를 사지 못하므로 나와 서버 간의 루트가 최적화 되어있는지는 별도로 환경을 분리하지 못함을 인식해주길 바라겠습니다.\n데이터 파일 크기 선정 기준 일단, IPv4 데이터 패킷이 65535Byte 이므로, 64KB 가 넘는 JSON 파일이 필요했습니다. 마침 구글링을 해보니까 실제로 크기에 따른 JSON 파일들을 제공해주는 사이트가 있었습니다. 다른분들도 필요하시면 참고하면 좋을 것 같습니다.\n![[image_1231333.png]]\n해당 파일로 진행\n20 MB Dummy JSON File - Sample Json File Free Download\nPostman 실험을 하려고 여러 툴을 찾아보았는데, 어쩌다보니 Postman 에 대해서 사용해보게 되는 경험을 갖게 되었습니다. 주변에 많은 백엔드 개발자 친구들이 애용하는 툴이였는데, 그때까지만 해도 저는 이걸 왜 쓰는가? 그냥 브라우저에서 요청해보면 되지 않을까? 라고 생각했었는데, 프론트엔드를 만들지 않은 상황에서는 이게 엄청 편했었습니다.\n사용방법 Postman 사용방법은 정말 간단합니다.\n![[image 1.png]]\n메인 화면에 요청 방식을 선택하고, 요청 주소를 쓰면 끝입니다.\nparams 는 URL 에 포함해서 보내는 파라미터를 뜻합니다.\n요청 body 는 Body 항목에 이런식으로 입력하면 됩니다.\n![[image 2.png]]\n또 HTTP 뿐만 아니라, 웹소켓, GraphQL 등의 요청도 보낼 수 있는 것 같습니다. 여러모로 유용할 것 같습니다!\n![[image 3.png]]\n실험 과정 솔직히 말해서 로컬 서버를 통해서 요청들을 받아냈고, 다른 영향 요소들을 완벽히 분리하진 못해서 엄밀히 정확한 측정을 하진 못했습니다.\n하지만 그 과정에서 얻어낸 결론과 공부할 점들이 많았습니다.\n10mb 크기의 JSON을 반환하는 요청 2번, 20mb 크기의 JSON을 반환하는 요청 1번을 각각 10번정도씩 실행하였고, 그 결과를 비교해보려고 합니다.\n10mb 요청 → 총 트래픽 9.81mb, 소요시간 110ms ~ 86ms 까지 내려감 Asset not found: image%204.png\n20mb → 총 트래픽 19.44mb, 소요시간 211ms ~ 155ms 까지 내려감 ![[image 5.png]]\nAPI 실험 결과 고려해야할 요소 요청을 많이 받으면 서버가 받을 부하도 생각해야합니다. 정보를 보내는 경우 데이터베이스 쿼리를 자주 수행해야할 것임을 인지해야합니다. 만약 그렇다면, 동시성 요소도 고려해야합니다. 예시 : API 요청을 여러번 보내고 받는 도중, 다른 곳에서 수정이 일어났다면? 알아낸 점 의외로 API 요청과 응답의 헤더의 크기는 상관 없습니다. 헤더의 경우 둘다 합쳐서 500Byte 도 채 되지 않았습니다. 시간에 영향을 주는 요소는 다른 곳에 있었습니다. HTTP는 TCP 로 소통하고 응답을 받습니다. TCP 라서 소켓 연결이 이루어지는 게 아닙니다. 따라서 API 요청은 TCP 소켓을 연결한 후, 작업이 끝나면 다시 연결을 닫는 구조로 이루어집니다. WebSocket 을 통해서 지속적으로 연결할 수 있는 것으로 보입니다. (추측) API가 요청을 보내고 받는 과정 이것을 이해하려면 API 요청을 보내고 받는 과정을 이해해야합니다. HTTP 요청은 TCP 요청인데, TCP 요청은 요청을 보내고, 응답을 받아야합니다. 그 과정에서 TCP 연결을 하게 됩니다. HTTP의 전송 프로토콜은 TCP 입니다.\n그 과정에서 생기는 TCP 의 특징으로 인해 이러한 부분에서 오버헤드가 더 큼을 알 수 있을 것 같습니다.\n[TCP/UDP] TCP와 UDP의 특징과 차이\nTCP 요청 TCP 연결은 IP가 데이터를 어디로 보낼지 처리한다면, TCP는 패킷이 제대로 전달되었는지 확인을 합니다. 일반적으로 연결형 서비스에서 TCP를 자주 사용하게 되는데, 위 링크에 따르면 3-way handshaking을 통해 연결을 설정하고, 4-way handshaking 을 통해서 연결을 해제한다고 합니다.\n![[image 6.png]]\n연결을 수립하는데 세번의 데이터 요청을 주고받기 때문에 3-way handshaking\n아래의 사진은 구글 서버에 직접 GET 요청을 보낸 결과입니다. 구글 서버와 같이 로컬보다 경로가 더 길어진 경우 TCP 핸드셰이킹 과정에서 드는 시간이 더욱 커집니다. 이것이 진짜 API 요청에 영향을 주는 핵심이고, API 요청은 클라이언트의 작업 요청에 따라 분리해야하는 원인입니다.\n![[image 7.png]]\n구글에 GET 요청을 보낸 결과. 확실히 TCP 핸드셰이킹 과정이 엄청 길어졌다.\n추후에 글로 정리하려고 하지만, 일단 3-way handshake 와 4-way handshake에 관한 글을 올려봅니다.\n[네트워크] TCP/UDP와 3 -Way Handshake \u0026amp; 4 -Way Handshake\n결론 저는 결국 API 설계를 할 때에는 어떤 것이든 대상의 요구사항에 따라 구성해야한다고 생각하게 되었습니다. 이게 무슨 뜻이냐면, 클라이언트가 몰라도 되는 일은 굳이 수행하지 않도록 하자는 것이었습니다.\n예를 들어, 서론에서 언급한 미션 예시를 보더라도, 특정 컬럼에 담긴 꼭 해야하지 않는 이상 그냥 한번에 보내는게 맞다고 생각이 들었고, 해당 수정 사항을 다음에 반영해보려고 합니다.\n","permalink":"https://blog.moozeh.org/posts/2024/2024-09-01-api-response/","summary":"\u003ch2 id=\"서론--api-설계-시-든-의문\"\u003e서론 : API 설계 시 든 의문\u003c/h2\u003e\n\u003cp\u003eAPI 응답과 요청 과정에서의 오버헤드는 얼마나 성능에 영향을 끼칠까요?\u003c/p\u003e\n\u003cp\u003e예를 들어 여러 카테고리 열에 담긴 카드 정보를 불러오는 API를 작성해야할 때가 있었는데, 저는 전체 데이터를 한번에 가져오는게 아니라, 열의 인덱스 번호를 URL에 담아서 보내고, 해당 열에 대응하는 카드들을 가져오는 API 로 설계를 했었습니다.\u003c/p\u003e\n\u003cp\u003e이렇게 설계를 했던 이유는 사실 REST 원칙에서 \u0026ldquo;API 계층적으로 구성해야한다\u0026quot;는 원칙에 따라 구성을 하였기 때문입니다. 사실 카드 인덱싱을 하는데 있어서 계층적으로 구성하려면 URL 파라미터를 \u003ccode\u003e/columns/cards\u003c/code\u003e 이런식으로 불러오도록 만드는게 좋지 않았을까 하는 생각이 듭니다.\u003c/p\u003e","title":"API의 응답 바디는 커도 좋을까\n"},{"content":"2주차가 훌쩍 지나갔다. 3주차부터는 문제를 단순히 바라보는 것에서 나아가 내가 해결한 것들에 대해 개선해보는 시간을 위주로 가졌다. 이번주는 특히 생각하는 것과 문제해결 로직(알고리즘)을 엄밀하게 구상하고 나면 코드를 짜는 시간이 생각보다 짧아졌음을 실감한 것 같다. 전부터 해오던 설계를 잘 하려는 노력과 함께 개선시간에서 피드백을 받으니, 설계를 하는 데 있어서 실력이 늘어나고 있음을 직감할 수 있었다.\n사라진 2주차 후기? 2주차 없이 3주차 회고부터 벌써 올라오다니, 이상하다? 그만큼 힘들었다! 사실 솔직히 말하자면 매일 새벽 3시에 잘 정도로 매번 열심히했고, 결과와 상관없이 계속 구현과 정리에 정진했던 것 같다. 물론 블로그에 관련 내용을 올리면 당연히 유추가 되기 쉽기 때문에 내용은 업로드하지 않으려고 한다. 원래 나는 옵시디언을 좋아하는데 제출용으로 내 개인 노션에 고이 모셔둔 상태이다.\n2주차는 진짜 정신없이 흘러갔다. 그리고 1주, 2주차 학습을 진행하면서 쌓여왔던 피로가 몰렸던 것도 없잖아 있었다. 그래서 2주차 회고는 일단은 하지 않기로 했고, 학습 피드백 정도만 거치고 넘어갔던 것 같다. 왜 그런지 생각해보니, 부캠을 시작하고서부터 매일 새벽 2시 3시에 잤고, 코딩을 하면서 휴식도 하지 않으면서 열심히했던 것 같다.\n그게 이번주에 몰려와서 월요일부터 화요일까지는 열심히 진행했지만 살짝 번아웃이 왔던 것 같다. 하지만 부족한 구현 부분을 제외한 설계부분은 정말 열심히했다고 생각한다. 학습 정리 + 설계 50%, 구현 20% 해서 총 70%만큼 달성이 됬던 것 같다.\n나의 주간 학습 회고 이젠 개인적인 이번주 학습 경험 위주로 설명해보려고 한다.\n설계에 대한 감을 잡았다.\n이번에 나는 설계 위주로 구현하려고 했다. 동일한 설계에 대한 여러가지 코드 를 최대한 줄일 순 없을까? 라고 고민을 많이 했던 것 같다. 이번 주차에서는 짝과 함께하는 시간이 많았고 나는 짝과 같이 활동하여 같이 프로그래밍 한 경험은 이번들어서 처음이어서 되게 신선한 경험이었다.\n이렇게 처음하다보니 바로 잘 될 수가 없었는데, 다른 조로부터 들어보니 규칙을 알람설정을 하여 역할을 바꾸는 등 엄밀하게 정하여 활동을 진행했더라. 다음주에는 이렇게 규칙을 세워서 해보려고 한다.\n학습도 설계와 깊은 관계가 있다. 오히려 제대로된 이해는 구현에 도움이 되고, 구현 시간 단축에 도움이 된다.\n학습한 것들을 정리하는 과정에 있어서 나중에 해야지 하고 학습 정리해두려고 했던 걸 몇번 잊어버렸던 것 같다. 그 이유를 생각해보니, 학습 정리하는데 시간 분배를 하는데 좀 더 시간이 적었던 것 같다. 이번주를 되돌아보니, 실제 구현에 시작하는 시간은 4시, 5시 등 의외로 늦게 시작해도 7시 내에 해결은 못하겠지만, 적어도 자는 시간은 비슷했던 것 같았다\u0026hellip;\n이러한 시행착오 결과는 실제로 공부를 제대로 하고 키보드를 잡는게 맞다는 뜻이다. 따라서 이번주에는 아예 좀 더 코드를 기반으로 학습을 해서 실제로 미션에 적용될 코드들을 구상해보는 단계까지 해보려고 한다.\n저번보다 열띤 소통!\n그래도 저번주보단 개선된 경험이 있었는데, 일단 피어 세션에서 내가 먼저 대답하고 내 생각을 공유하려고 했다. 또한, 다른 분들의 코드를 화면공유를 통해서 코드와 설계 의도를 파악했고, 질문과 피드백을 통해서 오히려 제가 다른분들 코드에 의문을 품고 질문을 하여 공유한 적은 이번주가 처음이었다.\n다음주도 이렇게 서로 피드백이 되었으면 좋을 거 같다.\n꾸준함을 넘어선 끈질김 최선을 다하는 열정보단 꾸준함이 중요하다는 건 최근 학교 선배님과의 커피챗에서 알게 되었다. 매일 100%를 다하는 열정이 사실은 이루기 힘들다는 사실은 모두가 알고 있을 것이다. 물론 사람마다 다르겠지만, 나는 내가 꾸준한 자세로 모든것에 임할 때 성공할 확률이 높다고 생각한다.\n그렇지만, 그런 꾸준함은 어디서 올까? 최선을 다하는 열정은 정말 열정에서 오는 최선이겠지만 이번 부스트캠프에서 꾸준함의 근원이 무엇인지 생각하게 만들었다. 솔직히 말해서 3주차때 포기할까..? 생각을 한번 한적 있었다. 나는 다른 분들과 다르게 3학년이고 졸업도 아직 해야하기 때문에 너무 시기가 이른게 아닐까 고민을 하기도 했었다.\n하지만 생각해보니 그렇진 않더라. 결국 부스트캠프 챌린지에서 바라는건 이러한 꾸준함을 넘어선 끈질김과 열의를 만들고 배우고자 노력하는 자세를 얻어가는 과정이라고 생각하게 되었다. 내 개인적인 경험이지만, 다른 사람들도 비슷하게 생각할 것이라 생각한다. 이번 후기를 보고 참고할 사람들은 도전적인 문제에 어떤 자세로 임해야할지 잘 생각해보아야할 것이다.\n부스트캠프 챌린지가 주장하는 지속가능한 개발자에 대해서 진지하고 깊게 고민을 해봐야한다. 당신이 정말로 지속가능한 개발자가 되려면 꾸준함을 넘어선 끈질김의 자세를 배워야한다. 이러한 과정을 기르는게 챌린지고, 동시에 개발자로써의 역량을 키울 수 있는 좋은 기회라고 생각한다.\n","permalink":"https://blog.moozeh.org/posts/2024/2024-08-03-boostcamp-3/","summary":"\u003ch2 id=\"2주차가-훌쩍-지나갔다\"\u003e2주차가 훌쩍 지나갔다.\u003c/h2\u003e\n\u003cp\u003e3주차부터는 문제를 단순히 바라보는 것에서 나아가 내가 해결한 것들에 대해 개선해보는 시간을 위주로 가졌다. 이번주는 특히 생각하는 것과 문제해결 로직(알고리즘)을 엄밀하게 구상하고 나면 코드를 짜는 시간이 생각보다 짧아졌음을 실감한 것 같다. 전부터 해오던 설계를 잘 하려는 노력과 함께 개선시간에서 피드백을 받으니, 설계를 하는 데 있어서 실력이 늘어나고 있음을 직감할 수 있었다.\u003c/p\u003e\n\u003ch3 id=\"사라진-2주차-후기\"\u003e사라진 2주차 후기?\u003c/h3\u003e\n\u003cp\u003e2주차 없이 3주차 회고부터 벌써 올라오다니, 이상하다? 그만큼 힘들었다! 사실 솔직히 말하자면 매일 새벽 3시에 잘 정도로 매번 열심히했고, 결과와 상관없이 계속 구현과 정리에 정진했던 것 같다. 물론 블로그에 관련 내용을 올리면 당연히 유추가 되기 쉽기 때문에 내용은 업로드하지 않으려고 한다. 원래 나는 옵시디언을 좋아하는데 제출용으로 내 개인 노션에 고이 모셔둔 상태이다.\u003c/p\u003e","title":"[부스트캠프 챌린지] 3주차 후기 및 회고\n"},{"content":"챌린지에 합격하다. (7월 14일) 베이직 과정을 뒤늦게 지원이 안됨을 확인(\u0026hellip;) 하며 2차 시험 때는 \u0026ldquo;아 여기까지인가보다\u0026rdquo; 했었다.\n그런데 2차 시험을 치면서 엥? 싶은 수준으로 문제가 생각보다 나에게는 쉽게 나왔다. 규정상 더이상 자세한 내용은 생략하도록 하겠지만, 어쨌건 내 입장에서 회고만 해보았을 땐 생각보단 쉽게 나왔었다.\n하여간 우여곡절 끝에 고맙게도(..!!) 부스트캠프 챌린지 과정에 합격하여 작성일(7월 14일)기준 내일(!!)부터 해당 과정을 시작한다. 사실 쉽게 나와서 다 풀긴 했었는데, 내가 잘 풀면 아마 여러분들도 시험을 치는 데에는 문제 없을거라 장담한다.\n어디에 지원했나? 나는 웹 모바일로 지원했고, 1년 정도 기간의 프론트엔드 경험을 보유하고 있으나, 아직 테스트를 할 줄 모르며 완성된 프로젝트를 내놓아 본 경험은 없는 정말로 취미 수준 개발 능력은 갖춘 사람이다(\u0026hellip;.) 그래서 깊어지기전에(^^..) 더더욱 백엔드로 할 지 프론트엔드로 할 지 이번 기회에 고민을 하고 있다. 코드를 짜는 것도 즐겁고, 누군가에게 내가 열심히! 디자인한 멋진 사이트를 보여주는 것도 좋아해서 고민이 더더욱 된다.\n챌린지에선 어떤 걸 했었나? 당연히 내용은 유출하면 안된다! 그래서 다른 분들의 후기와 비슷하게 대략적으로 문제의 난이도 만으로 설명해볼까 한다.\n챌린지의 내용은 조금 어렵대서 처음 듣고 살짝 겁이 났었다. 그래서 첫날엔 많이 겁먹어서 헤맸던 기억이 난다. 하지만 1주 동안 계속해보며 어려워도 챌린지 과정에서 배우는 내용이 중요한지 알게 됐다.\n챌린지 과정은 고중량 웨이트가 아닌, 코어 운동이라고 생각하는데, 이렇게 비유한 이유는 코어 근육이 아무리 헬스를 잘하는 트레이너라도 무조건 신경써야할 필수 근육이기 때문이다.\n챌린지 과정 또한 동일하다고 생각한다. 주어지는 도전적인 일을 해결하는 건, 단순히 무게만을 생각하고 운동하는 일반적인 그것과는 다른 기본적인 일이라고 생각한다.\n챌린지를 하며 어떤걸 배워갔나? 스스로 학습해보며 내가 어떻게 살아가야할지 해답을 알 수 있었다. 학교 수업시간에서 시험을 위한 공부, 그리고 개인 프로젝트를 진행하면서 구현에만 몰두하며 머리를 앓았던 기억이 동시에 스쳤던 기억이 난다. 두 사항에 너무 매몰되지 말고 나에게 맞는 공부를 해야함을 배웠다.\n또한 여기서 같은 개발자분들과 만날 수 있는 흔치 않은 기회를 얻어서 많은 걸 배워갔다. 다양한 커뮤니티 내에서 개발자 분들의 아이디어와 또다른 생각을 만날 수 있는 흔치 않은 기회였고, 그 과정에서 많은 걸 깨달았다고 생각한다. 이런 공유 문화가 정말 좋다고 생각했다.\n그 예로 다른 분들이 어떤걸 공부하고 공유했는지 올려주시는 분도 계셨는데, 그런 분들의 공부 과정도 볼 수 있어서 그 과정에서 배워가기도 했다.\n또 피어세션을 통해 같은 문제에 대해서 이렇게나 많이 다르게 설계되고, 동일한 설계라도 엄청나게 다양한 코드와 로직이 생성될 수 있구나 몸소 깨달았던 것 같다. 머릿속으로는 알고 있었는데 동료분들의 같은 주제의 여러가지 코드를 보니 생각이 많이 바뀌었던 것 같다.\n코드를 짜면 내가 생각한게 맞다고 생각을 했는데, 다르게 생각할 수도 있게 됐다. 오히려 오만했던 어린시절 나와 다른 생각을 하는 사람에게 아 그게 아닌데.. 라는 생각으로 치부했던 게 지금보니 상당히 부끄러운 것 같다..\n이번주는 그래서 얼마나 달성해보았는가? 나는 이번주 챌린지는 70% 정도를 채웠다고 생각한다. 70%는 일단, 주어지는 미션을 이해하고 완료했기 때문이고, 하지만 30%는 이를 정리하지 못한데서 온 것이라 생각한다.\n왜 50:50 이 아니냐라고 하면, 20%는 동료들과 함께 이야기를 나누는 피어세션에서 완료했다고 생각하는데, 내가 아는 지식을 전달하는 과정에서 내가 어떤 부분에 대해 알고 있다고 확신하게 되었고, 모르는 부분은 정리하여 체화하는 과제가 남았기 때문에 30%가 남았다. 지금도 하고있다..\n근데 정말 진짜 어려운가?? 다른 분들 후기 보면 다 어렵다고 하는데, 난 솔직히 쉬워서 미션은 모두 해결하긴 했다, 하지만 그러면서 동시에 아직 개선할 과정이 남았다고 생각한다.\n난 평소부터 글로 정리하고 나만의 지식으로 체화하는 습관을 잘 들이지 않았어서, 이렇게 글로 정리하거나, 나만의 언어로 정리하여 내 것으로 만드는 과정은 항상 학교 시험 이라는 범위 안에서 실행했던 적 밖에 없기 때문에, 스스로 야생과 같은 환경에서 학습하는 게 어려운 것 같다.\n마무리 솔직히 무엇보다 이러한 경험을 무료로 제공받아 들을 수 있었다는 것이 정말 좋았던 것 같다. 비전공자, 전공자 상관없이 내가 진짜로 무언가를 얻어가고 싶다면 챌린지 과정도 정말 중요하다고 생각한다. 다음주가 벌써 기대되지만, 힘들어할 걸 생각하니 솔직히 귀찮아지진 않을까 걱정되지만 동시에 배울 게 생긴다고 생각하니 기대가 많이 되는 한 주다.\n","permalink":"https://blog.moozeh.org/posts/2024/2024-07-20-boostcamp-1/","summary":"\u003ch2 id=\"챌린지에-합격하다-7월-14일\"\u003e챌린지에 합격하다. (7월 14일)\u003c/h2\u003e\n\u003cp\u003e베이직 과정을 뒤늦게 지원이 안됨을 확인(\u0026hellip;) 하며 2차 시험 때는 \u0026ldquo;아 여기까지인가보다\u0026rdquo; 했었다.\u003c/p\u003e\n\u003cp\u003e그런데 2차 시험을 치면서 엥? 싶은 수준으로 문제가 생각보다 나에게는 쉽게 나왔다. 규정상 더이상 자세한 내용은 생략하도록 하겠지만, 어쨌건 내 입장에서 회고만 해보았을 땐 생각보단 쉽게 나왔었다.\u003c/p\u003e\n\u003cp\u003e하여간 우여곡절 끝에 고맙게도(..!!) 부스트캠프 챌린지 과정에 합격하여 작성일(7월 14일)기준 내일(!!)부터 해당 과정을 시작한다. 사실 쉽게 나와서 다 풀긴 했었는데, 내가 잘 풀면 아마 여러분들도 시험을 치는 데에는 문제 없을거라 장담한다.\u003c/p\u003e","title":"[부스트캠프 챌린지] 1주차 후기 및 회고\n"},{"content":"Factory Method 패턴 살펴보기 react-diagrams 에서 커스텀 노드를 만들일이 생겨 커스텀 노드 패턴을 알아보던중 엥? Factory? 리액트에선 분명 deprecated 됐을텐데… 뭔가 이상하다 싶어서 알아보았고, 리액트의 그것을 사용하는게 아닌 정말로 디자인 패턴이라는 것을 알게 되었다.\n우선 결론부터 말하자면, 팩토리 패턴이 말이 어려울 뿐이지 실제론 아무것도 아니다.\n생각해보기 우리가 특정 함수로 여러가지의 클래스를 기반으로 하는 객체를 생성한다고 치자. 예를들어, 동물 클래스를 상속하는 고양이, 개, 여우 의 클래스를 생성하는 생성 함수가 있다고 생각해보자.\n가장 기본적인 방법은 그냥 부모클래스로 객체를 생성한 후에, 들어온 타입에 따라 값을 수정해주는 방법이 있겠다. 또는 타입에 따라 상속받은 클래스들을 new 생성자를 통해 뱉어주면 될것이다.\n일단 전자는 추가되는 자식 클래스의 종류(동물의 종류) 가 많아질 수록 구현해야할 분량이 미친듯이 불어난다. 후자의 경우도 예외는 없다. 후자의 경우, 생성 함수가 크게 길어질 일은 없겠지만, 생성 함수 자체를 수정해야한다는 결합성에 문제가 생긴다.\n팩토리 메소드 패턴 팩토리 메소드 패턴은 상술한 문제를 해결할 수 있는 디자인 패턴이라고 보면 된다. 팩토리 메소드 패턴을 사용하면 생성함수와 각각의 하위 클래스 간의 결합성이 많이 줄어든다. 다시 말해 생성함수를 일일이 수정할 필요가 없어진다는 뜻이다. 그렇게 된다면, 유지보수성이 크게 증가할 것이다.\n애초에 생성함수 자체를 건드릴 일이 없도록 만드는 것이 팩토리 메소드 패턴의 의의라고 볼 수 있다.\n팩토리 패턴의 주요 패러다임 클래스를 생성하는 생성함수(팩토리함수) 는 공통 코드로 둔다. 인스턴스를 생성하는 각 하위 클래스별 메인 코드는 하위 팩토리 클래스에서 만들도록 결정을 한다. 생성한 하위 팩토리 클래스를 등록하여, 추후에 팩토리 함수로 생성할 수 있게끔 만든다. // AnimalFactory.ts abstract class AnimalFactory { abstract createAnimal(name:string, sound:string):Animal; getData(name:string, sound:string): Animal { this.checkAnimal(); const animal:Animal = this.createAnimal(name, sound); return animal; } checkAnimal(){ console.log(\u0026#34;새로운 동물을 확인해보세요~!\u0026#34;); } } // DogFactory.ts class DogFactory extends AnimalFactory { createAnimal(name:string, sound:string): Animal { return new Dog(name, \u0026#34;woof\u0026#34;); } } // CatFactory.ts class CatFactory extends AnimalFactory { createAnimal(name:string, sound:string): Animal { return new Cat(name, \u0026#34;meow meow\u0026#34;); } } // Animals.ts class Animal { name?:string; sound?:string; saySound() { console.log(this.name + \u0026#34; says \u0026#34; + this.sound); } } // Cat.ts class Cat extends Animal { constructor(name:string, sound:string) { super(); this.name = name; this.sound = sound; } } // Dog.ts class Dog extends Animal { constructor(name:string, sound:string) { super(); this.name = name; this.sound = sound; } } 이렇게 따로 생성해서 어떻게 사용하면 되냐면 하위 클래스의 팩토리 클래스의 인스턴스를 생성하여 이의 createAnimal 메소드를 실행시켜주는 형식으로 사용하면 된다.\n// main.ts const dog:Dog = new DogFactory().getData(\u0026#34;dog\u0026#34;, \u0026#34;woof woof\u0026#34;); 싱글톤 형식으로 만들어보기 매번 new DogFatory() 형식으로 새롭게 인스턴스를 만들어 메모리 낭비를 주는 것보단 그냥 정적 인스턴스를 받아서 사용하는 게 메모리 상으론 이득일 것이다.\n// DogFactory.ts class DogFactory extends AnimalFactory { private static instance: DogFactory; public static getInstance() { if(!DogFactory.instance) { DogFactory.instance = new DogFactory(); } return DogFactory.instance; } createAnimal(name:string, sound:string): Animal { return new Dog(name, \u0026#34;woof woof\u0026#34;); } } ","permalink":"https://blog.moozeh.org/posts/2024/2024-03-16-factory-method-pattern/","summary":"\u003ch2 id=\"factory-method-패턴-살펴보기\"\u003eFactory Method 패턴 살펴보기\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003ereact-diagrams\u003c/code\u003e 에서 커스텀 노드를 만들일이 생겨 커스텀 노드 패턴을 알아보던중 엥? Factory? 리액트에선 분명 deprecated 됐을텐데… 뭔가 이상하다 싶어서 알아보았고, 리액트의 그것을 사용하는게 아닌 정말로 디자인 패턴이라는 것을 알게 되었다.\u003c/p\u003e\n\u003cp\u003e우선 결론부터 말하자면, 팩토리 패턴이 말이 어려울 뿐이지 실제론 아무것도 아니다.\u003c/p\u003e\n\u003ch2 id=\"생각해보기\"\u003e생각해보기\u003c/h2\u003e\n\u003cp\u003e우리가 특정 함수로 여러가지의 클래스를 기반으로 하는 객체를 생성한다고 치자. 예를들어, 동물 클래스를 상속하는 고양이, 개, 여우 의 클래스를 생성하는 생성 함수가 있다고 생각해보자.\u003c/p\u003e","title":"Factory Method 패턴 살펴보기"},{"content":"행렬이 왜 생겨났나 행렬은 연립방정식을 쉽게 풀기 위해 생겨난 겁니다. 근데 이 행렬을 통해 기하학에도 적용할 수 있는데, 이거는 나중에 설명하겠습니다.\n행렬의 정의 행렬은 아래와 같이 표현되는 수들의 나열입니다.\n| 1열을 뜻합니다. v | 1 1 1 | -\u0026gt; 1행을 뜻합니다. | 1 1 1 | | 1 1 1 | 일차방정식(선형방정식) 보통 우리가 보는 일차방정식 (연립 포함) 은 행렬로 나타낼 수 있습니다.\n각 변수의 계수를 행렬의 특정 값에 넣어서 나타낸 행렬을 계수행렬이라고 합니다. 계수 행렬과 등식에서 나타내는 상수 값을 같이 붙여서 행렬로 표현하면 이를 첨가행렬이라고도 합니다. 기본 행 연산 우리가 행할 수 있는 정의된 기초 행 연산을 이용해 여러가지 정리를 구할 수 있는데요.\n기본 행 연산의 가짓수는 3가지입니다.\n한 행에 임의의 상수를 곱하여, 다른 행에 더한다. 두 행을 교체합니다. 하나의 행에 0이 아닌 상수를 곱합니다. 해당 연산은 첨가행렬에서 사용 가능합니다.\n","permalink":"https://blog.moozeh.org/posts/2023/2023-12-30-linear-algebra-1/","summary":"\u003ch3 id=\"행렬이-왜-생겨났나\"\u003e행렬이 왜 생겨났나\u003c/h3\u003e\n\u003cp\u003e행렬은 연립방정식을 쉽게 풀기 위해 생겨난 겁니다. 근데 이 행렬을 통해 기하학에도 적용할 수 있는데, 이거는 나중에 설명하겠습니다.\u003c/p\u003e\n\u003ch3 id=\"행렬의-정의\"\u003e행렬의 정의\u003c/h3\u003e\n\u003cp\u003e행렬은 아래와 같이 표현되는 수들의 나열입니다.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e  | 1열을 뜻합니다.\n  v\n| 1 1 1 | -\u0026gt; 1행을 뜻합니다.\n| 1 1 1 |\n| 1 1 1 |\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"일차방정식선형방정식\"\u003e일차방정식(선형방정식)\u003c/h3\u003e\n\u003cp\u003e보통 우리가  보는 일차방정식 (연립 포함) 은 행렬로 나타낼 수 있습니다.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e각 변수의 계수를 행렬의 특정 값에 넣어서 나타낸 행렬을 계수행렬이라고 합니다.\u003c/li\u003e\n\u003cli\u003e계수 행렬과 등식에서 나타내는 상수 값을 같이 붙여서 행렬로 표현하면 이를 첨가행렬이라고도 합니다.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"기본-행-연산\"\u003e기본 행 연산\u003c/h3\u003e\n\u003cp\u003e우리가 행할 수 있는 정의된 기초 행 연산을 이용해 여러가지 정리를 구할 수 있는데요.\u003c/p\u003e","title":"[ 선형대수 ] 1. 행렬"},{"content":"행렬의 연산 A, B, C 가 행렬 이라고 할 때, a. A + B = B + A b. (A + B) + C = A + (B + C) c. A + 0 = A d. r(A + B) = rA + rB (r은 스칼라) e. (r + s)A = rA + sA (r, s는 스칼라) f. r(sA) = (rs)A (r, s는 스칼라) 행렬곱 행렬에는 곱연산도 있습니다.\nA 가 m x n 행렬이고, B 가 n x p 행렬일 때, A와 B는 곱할 수 있으며, 이 행렬곱 을 AB라고 표현합니다. 이때, AB의 i 행, j 열의 값은, 시그마(1 ~ n) : A의 i행 n열 * B의 n행 j열 입니다. 행렬곱 은 선형 변환 조합과 상응 한다고 하는데, 이것도 나중에 배워보겠습니다.\n그리고, 위에 보시는 바와 같이 행렬곱은 순서를 바꿔도 값이 동일하지 않습니다. 행렬곱의 순서에 따라 결과값이 달라짐에 유의하세요. (계산 순서는 상관 없음)\n예시) A(BC) == (AB)C 이나, AB != BA 이다. 행렬의 거듭제곱 그냥 행렬을 여러번 곱한 값입니다.\n당연히 행렬곱의 정의에 의하면, 행렬의 거듭제곱은 정방행렬만 가능합니다. 정방행렬이란, A_mn 일때, m == n 인 행렬을 이야기 합니다. (행과 열의 개수가 같음)\n전치행렬 전치행렬이란, 행렬에서 열과 행이 있을 때, 이 열과 행을 거꾸로 뒤집어 놓은 것을 의미합니다.\n| 2 3 4 | A = | 5 6 7 | 일때, 특정 요소의 값이 i행 j열에 위치해있다면, 전치행렬 A^T 는 언급한 특정 요소의 값이 j행 i열에 위치해 있습니다. A^T = | 2 5 | | 3 6 | | 4 7 | 전치행렬의 특성은 아래와 같습니다.\na. (A^T)^T = A b. (A + B)^T = A^T + B^T c. (AB)^T = B^T * A^T 역행렬, 항등행렬, 특이행렬 숫자에도 역수가 있잖아요? 행렬에도 역행렬이라는 게 있습니다.\n역수의 정의가 그러하듯, 행렬에서는 곱해서 항등 행렬 이 나오게 하는 행렬을 행렬의 역행렬이라고 합니다.\n항등행렬이란, 주 대각선 (i == j)의 원소가 1이고, 나머지 원소는 모두 0인 정방 행렬을 뜻합니다. 이때 항등행렬은 I_n 이라고 보통 표현하고, n은 행의 크기(=열의 크기)를 뜻합니다.\n그럼 모든 행렬이 역행렬이 있나요? 아닙니다. 역행렬이 없을 수 있습니다. 역행렬이 존재한다면 해당 행렬은 가역 행렬 이라고 하고, 그렇지 않다면 비 가역 행렬 이라고 합니다.\n우리는 이 비 가역행렬 을 특이 행렬 (singular matrix) 이라고도 표현합니다.\n역행렬 계산하기 우리는 역행렬을 계산할 수도 있습니다. 이때 행렬식이라는게 쓰이는데, 이는 나중에 배우도록 하고, 지금은 2 x 2 행렬에 대해 역행렬을 구하는 공식을 알아봅시다.\n| a b | 행렬 A = | c d | 일 때, ad - bc != 0 이면, A는 가역행렬이다. | d -b | 또한 A의 역행렬 A^-1 은, (ad-bc)^1 * | -c a | 이다. 상당히 복잡하지만, 3 x 3 에서는 더 복잡합니다. 이는 다음에 알아보겠습니다.\n행렬로 2 x 2 연립 방정식 계산하기 행렬이 가역행렬이라면, 해가 존재합니다. (해가 무수히 많거나, 비존재하지 않습니다.)\nAX = B 라는 2 x 2 연립 선형방정식을 계산 하는 방법은 다음과 같습니다. 1. A^-1 이 존재하므로, 양 변에 A^-1 을 맨 앞에 곱해줍니다. 2. X = A^1 * B 이므로 해당 행렬을 계산하면 X 값을 구할 수 있습니다. ","permalink":"https://blog.moozeh.org/posts/2023/2023-12-30-linear-algebra-2/","summary":"\u003ch2 id=\"행렬의-연산\"\u003e행렬의 연산\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eA, B, C 가 행렬 이라고 할 때,\n\na. A + B = B + A\nb. (A + B) + C = A + (B + C)\nc. A + 0 = A\nd. r(A + B) = rA + rB (r은 스칼라)\ne. (r + s)A = rA + sA (r, s는 스칼라)\nf. r(sA) = (rs)A (r, s는 스칼라)\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"행렬곱\"\u003e행렬곱\u003c/h2\u003e\n\u003cp\u003e행렬에는 곱연산도 있습니다.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eA 가 m x n 행렬이고, B 가 n x p 행렬일 때,\n\nA와 B는 곱할 수 있으며, 이 행렬곱 을 AB라고 표현합니다.\n\n이때, AB의 i 행, j 열의 값은,  시그마(1 ~ n) : A의 i행 n열 * B의 n행 j열 입니다.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e행렬곱 은 선형 변환 조합과 상응 한다고 하는데, 이것도 나중에 배워보겠습니다.\u003c/p\u003e","title":"[ 선형대수 ] 2. 행렬 대수"},{"content":"문제 접근 원형 타일채우기 DP 라고 생각하면 쉽다. 발상이 어려워서 플레티넘3 이 아닌가 조심스레 추측한다.\n해결방법 타일 채우기 문제와 같이 생각을 해보자. 타일을 채우거나 그렇지 않거나만을 따져서 DP 테이블을 잘 짰다면, 경계선에 대한 부분은 경우의 수로 아예 나누어 선형 DP 로 바꾸어 풀어보도록 하자. 타일을 나누는 법? 내가 이부분을 생각못해서, 다른 블로그를 참고했다.\n타일을 나누는 방법에는 총 3가지 경우의 수가 있을 것이다.\n현재 열을 기준으로 윗쪽만 채웠을 경우 (1행만) - a 현재 열을 기준으로 아랫쪽만 채웠을 경우 (2행만) - b 현재 열을 기준으로 윗쪽 아랫쪽 둘다 채웠을 경우 (둘다) - c 이런식으로 열을 1부터 N열 까지 채워나가다보면 선형적으로 풀 수가 있다.\na 경우의 점화식은 이렇게 될 것이다. 이때 a_n 은 n번째 행의 a 값이라는 뜻이다.\na_n = c_n-1 + 1 // 그냥 n행의 윗부분 한칸만 점령한 경우 if (n, 0) + (n-1, 0) \u0026lt;= w // 현재 열의 윗쪽 + 해당 칸의 왼쪽 칸을 같이 점령할 수 있는 경우 a_n = min(a_n, b_n-1 + 1) // if 문의 점령을 하게 딱 맞추면 남은 칸은 b_n-1 이 된다. 위의 경우를 그림으로 표현해보면 아래와 같다.\n![[2023-12-26-boj1006-20241220150420110.webp]]\na는 N행에 위에만 칠해져야한다. 기본적인 경우는 이렇게 될 것이다. 한칸만 칠하면 되니까 근데 이제 (n-1, 0) 과 (n, 0) 을 한번에 같이 칠할 수(나누어 점령) 있다면 이렇게 될 것이다.\n![[2023-12-26-boj1006-20241220150428269.webp]]\nb 경우도 점화식은 a와 크게 다르지 않다. 위의 경우와 뒤집어 생각할 수 있을 것이다.\nb_n = c_n-1 + 1 // 이 경우도 그냥 n행의 밑부분을 점령한 경우 if (n, 1) + (n-1, 1) \u0026lt;= w b_n = min(b_n, a_n-1 + 1) c의 경우는 쫌 다른데, 일단은 a_n 과 b_n 을 먼저 구하고 나중에 구해야한다. 왜냐하면 c_n 이 a_n + 1 (그냥 나머지칸을 칠하는 경우) 가 최소 값이 될 수도 있기 때문이다.\n또는 그냥 한번에 N행의 두칸을 한번에 점령할수도 있다.\n또는 (N, 0) 과 (N-1, 0) / (N, 1) 과 (N-1, 1) 을 각각 한 부대가 점령할 수도 있을 것이다.\n// 본 코드는 의사 코드다. c_n = min(c_n-1 + 2, a_n + 1, b_n + 1) if (n, 1) + (n, 0) \u0026lt;= w c_n = min(c_n-1 + 1, c_n) if (n, 1) + (n, 0) \u0026lt;= w and (n-1, 1) + (n-1, 0) \u0026lt;= w c_n = min(c_n, c_n-2 + 2) ![[2023-12-26-boj1006-20241220150436218.webp]]\n![[2023-12-26-boj1006-20241220150450303.webp]]\n![[2023-12-26-boj1006-20241220150501121.webp]]\n![[2023-12-26-boj1006-20241220150524902.webp]]\n원형 구조는 어떻게 해결하나요? 타일을 나누는 방법을 올바르게 생각했다면 원형 구조도 자연스레 해결이 된다.\n끝부분과 처음부분을 걸쳐서 생각해보는 것이다.\n어쨌던 입력으로 받은 배열은 선형적이니 선형적으로 생각할 때, 처음과 끝부분이 있겠다.\n이 처음과 끝 부분에 걸쳐서 나누어 점령을 할 수 있는지 경우의 수를 나누는 것이다.\n그렇게한다면 총 4개의 경우의 수가 생긴다.\n처음 - 끝 부분에 걸쳐서 점령하지 않는 경우 처음 - 끝 부분 열의 첫번째 행 칸 두곳을 한 부대가 점령하는 경우 처음 - 끝 부분 열의 두번째 행 칸 두곳을 한 부대가 점령하는 경우 2, 3 모두가 해당되는 경우. 해당 되는 경우를 모두 생각하게 되면 각각의 경우에 적용해야할 초기 값이 다르단 걸 인지할 것이다.\n1의 경우의 수 a_1(맨앞) 과 b_1 모두 1이고, c_1은 (1, 0), (1, 1) 의 값에 따라(두 곳을 한 부대만으로 점령이 가능한지를 생각.) 2 또는 1이 결정된다.\n이후 점화식에 따라 DP 테이블을 채우고, c_n 값이 정답의 후보값이 됩니다.\n2의 경우의 수 a_1은 0이다. 시작 시 미리 점령한 타일은 나중에 더해줄 것이다.\nb_1의 경우의 수는 존재하지 않음. 이미 (1, 0) 이 점령되었기 때문에.\nc_1은 1이 된다. 이 또한 (1, 0) 이 점령 되었기 때문에, c_1은 이곳에 (1, 1)만을 채우는 경우 밖에 존재하지 않는다.\n이후 점화식에 따라 DP 테이블을 채우게 되면, (n, 0) 이 이미 점령 되어 있기 때문에, b_n + 1 의 값이 후보값이 됩니다! (+1을 하는 이유는 시작 시 미리 점령한 타일을 나중에 더해주기 때문입니다.)\n3의 경우의 수 2와 동일하다.\na_1은 존재할 수 없고, b_1은 0이다. 시작 시 미리 점령한 타일은 나중에 더해준다고 가정한다.\nc_1은 1이된다. 이또한 위와 같은 이유에서다.\n2와 마찬가지로 a_n + 1 의 값이 후보값이 됩니다.\n4의 경우의 수 a_1과 b_1은 존재할 수 없고, c_1이 0이 된다.\n(1, 1) 과 (1, 0) 이 모두 시작 시 점령되었기 때문이다.\n정답의 후보값은 c_n-1 + 2 가 됩니다.\n내가 생각하지 못한 것 1. 타일을 채우는 경우의 수를 잘못 나누었다. 이게 무슨 소리냐면, 해당 타일이 하나만 차지하는지, 다른 타일과 나누어서 차지하고 있는지를 내가 나누었다.\n위와 같은 타일채우기 문제에서는 이미 차지하고 있는가 여부를 생각하고, 한번에 채울 때 나누어 채우는 방식으로 DP 테이블을 채워 나가야함을 인지하자!\n2. 원형 DP라고 생각하고 여러번 DP를 돌려야한다고 생각했다. 이는 1번 문제와 같이 대응되는데, 원형 DP이고 아니고 간에, 타일을 이미 채웠다면 이를 생각할 필요 없이 그냥 경우의 수로 나누어서 풀면 되는 문제였다.\n소스 코드 #include\u0026lt;iostream\u0026gt; #include\u0026lt;algorithm\u0026gt; #include\u0026lt;cstring\u0026gt; using namespace std; int dp[3][10001]; // 타일 문제 처럼 해당 행에 어느부분을 채우는가로 나누어야한다. int map[10001][2]; int n, w; const int INF = 987654321; void solve() { // 2열부터 시작해야함. // 그러려면 1열까진 내용을 다 채워놔야겠지 for (int i = 2; i \u0026lt;= n; ++i) { // 기본값 세팅 dp[0][i] = dp[2][i - 1] + 1; dp[1][i] = dp[2][i - 1] + 1; if (map[i][0] + map[i][1] \u0026lt;= w) { dp[2][i] = dp[2][i - 1] + 1; } else dp[2][i] = dp[2][i - 1] + 2; if (map[i - 1][0] + map[i][0] \u0026lt;= w \u0026amp;\u0026amp; map[i - 1][1] + map[i][1] \u0026lt;= w) { dp[2][i] = min(dp[2][i], dp[2][i - 2] + 2); } if (map[i][0] + map[i - 1][0] \u0026lt;= w) { dp[0][i] = min(dp[0][i], dp[1][i - 1] + 1); } if (map[i][1] + map[i - 1][1] \u0026lt;= w) { dp[1][i] = min(dp[1][i], dp[0][i - 1] + 1); } dp[2][i] = min(dp[2][i], min(dp[1][i] + 1, dp[0][i] + 1)); } } int main() { cout.tie(0); cin.tie(0)-\u0026gt;sync_with_stdio(0); int tc; cin \u0026gt;\u0026gt; tc; while (tc--) { cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; w; for (int j = 0; j \u0026lt; 2; ++j) { for (int i = 1; i \u0026lt;= n; ++i) { cin \u0026gt;\u0026gt; map[i][j]; } } int ans; // 시작 case 4개. // 끝 - 시작 부분에 특수부대를 걸치지 않은 경우 for (int i = 0; i \u0026lt; 3; ++i) memset(dp[i], 0, sizeof(dp[i])); dp[1][1] = dp[0][1] = 1; // 쌩으로 하나 채운 경우 if (map[1][0] + map[1][1] \u0026lt;= w) { dp[2][1] = 1; } else dp[2][1] = 2; solve(); ans = dp[2][n]; // 위에 만 걸친 경우 if (map[1][0] + map[n][0] \u0026lt;= w) { for (int i = 0; i \u0026lt; 3; ++i) memset(dp[i], 0, sizeof(dp[i])); dp[0][1] = 0; // 초기 상태가 이미 dp[0][1] 이다. dp[1][1] = INF; // 이곳을 참조할 경우의 수가 없다. dp[2][1] = 1; solve(); ans = min(ans, dp[1][n] + 1); } if (map[1][1] + map[n][1] \u0026lt;= w) { for (int i = 0; i \u0026lt; 3; ++i) memset(dp[i], 0, sizeof(dp[i])); dp[0][1] = INF; // 불가능 dp[1][1] = 0; dp[2][1] = 1; solve(); ans = min(ans, dp[0][n] + 1); } if (map[1][0] + map[n][0] \u0026lt;= w \u0026amp;\u0026amp; map[1][1] + map[n][1] \u0026lt;= w) { for (int i = 0; i \u0026lt; 3; ++i) memset(dp[i], 0, sizeof(dp[i])); dp[0][1] = dp[1][1] = INF; // 불가능 dp[2][1] = 0; solve(); ans = min(ans, dp[2][n - 1] + 2); } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } } ","permalink":"https://blog.moozeh.org/posts/2023/2023-12-26-boj1006/","summary":"\u003ch2 id=\"문제-접근\"\u003e문제 접근\u003c/h2\u003e\n\u003cp\u003e원형 타일채우기 DP 라고 생각하면 쉽다. 발상이 어려워서 플레티넘3 이 아닌가 조심스레 추측한다.\u003c/p\u003e\n\u003ch2 id=\"해결방법\"\u003e해결방법\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e타일 채우기 문제와 같이 생각을 해보자.\u003c/li\u003e\n\u003cli\u003e타일을 채우거나 그렇지 않거나만을 따져서 DP 테이블을 잘 짰다면, 경계선에 대한 부분은 경우의 수로 아예 나누어 선형 DP 로 바꾸어 풀어보도록 하자.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"타일을-나누는-법\"\u003e타일을 나누는 법?\u003c/h2\u003e\n\u003cp\u003e내가 이부분을 생각못해서, 다른 블로그를 참고했다.\u003c/p\u003e\n\u003cp\u003e타일을 나누는 방법에는 총 3가지 경우의 수가 있을 것이다.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e현재 열을 기준으로 윗쪽만 채웠을 경우 (1행만)  - a\u003c/li\u003e\n\u003cli\u003e현재 열을 기준으로 아랫쪽만 채웠을 경우 (2행만) - b\u003c/li\u003e\n\u003cli\u003e현재 열을 기준으로 윗쪽 아랫쪽 둘다 채웠을 경우 (둘다) - c\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e이런식으로 열을 1부터 N열 까지 채워나가다보면 선형적으로 풀 수가 있다.\u003c/p\u003e","title":"[ 백준 1006 ] 습격자 초라기 : C++ 풀이"},{"content":"증상 원인 내 마크다운 블로그를 개발하던 중 이게 왠일?\n블로그에 테마 토글 기능을 추가해서 다크모드를 사용할 때에도 라이트 모드를, 또는 그 반대를 활용할 수 있도록 만들었는데, 내가 시스템에서 설정한 테마 색이 시스템 설정을 따라 가다보니 시스템 테마가 먼저 적용이 되고, 그 다음에 토글 기능으로 설정된 테마가 나중에 적용된다.\n일명 깜빡거리는 증상인데 어떻게 된일인지 생각해봤다.\nHTML Blocking 보통 DOM 이 생성될 때, 중간에 script 태그를 만나게 되면 DOM 생성 과정이 중단됩니다.\n이걸 이용하면 body 가 처음에 흰색이던 아니던 우리가 보기전에 head 태그에서 배경색을 지정해버리면 처음부터 페이지 색상이 그랬던 것처럼 로딩이 잘 될거라 생각했습니다.\n대망의 첫 시도. 그리고 실패 실패했습니다. 하하. 하지만 생각보다 실패의 원인은 넥스트에 깊은 곳에 자리 잡고 있는 것으로 보입니다. 실패한 원인에 대해 얘기해보고자 합니다.\n내 index 페이지에서의 로딩 방식이 사뭇 다르다? 제 블로그는 Next.js Static Site Generation을 이용합니다. 정적 페이지를 생성을 해주어 정적 페이지로도 라우팅이 가능하게끔 구성되어 있는데요. 이 방식에 따르면 제 페이지는 반드시 정적 페이지가 생성되어야 하고, 클라이언트 사이드 코드는 극소수만 존재해야했다.\n그런데 __next_error__ 값의 id 속성이 html에 붙어있었다. 이게 뭐지? 싶었는데 알고보니 클라이언트 단에서 에러가 난 것이였다. 이걸 어떻게 알았냐고?\nPostlist 컴포넌트를 주석처리하니 놀랍게도 해당 속성이 없이 제대로 인덱스 페이지가 렌더링 되었다. 어떻게 된 일인지 생각을 해봤는데 놀랍게도 useSearchParam 이 원인이였다.\n진짜는 useSearchParam 에 있었다.. 어떻게 알아냈냐면 결국 넥스트가 SSG를 할 때 나는 오류구문을 어떻게든 찾아내게 계속 빌드를 해서 알아냈는데,\nEntire page deopted into client-side rendering\n위와 같은 사이트로 이동 되었는데 역시나,, 다른 것들도 아니고 useSearchParam 때문이였다.\n이게 뭐냐면 클라이언트의 페이지에 링크에 저장된 파라미터값을 가져오는 훅이다. 이걸 사용할 때 Suspense 로 범위를 묶어주어야 전체 CSR이 안된다고 한다.\n그래서 깜빡이는 현상이 생긴 것이다. 이것 때문에 CSR 렌더링이 전체 범위로 바뀌기 때문에 어떻게 똥꼬쇼를 해도 내가 만든 코드는 전부 페이지 로드가 끝이 나고 실행이 됐던 것이였다.\nSuspense 가 뭔지? suspense는 CSR이 어디서부터 어디까지 되게 할 건지 범위를 지정해주는 것이다.\n지금 내가 만들고 있는건 정적페이지인데, 어디서부터 CSR을 해야하는지 지정을 명확하게 해준다.\n단순히 use client; 를 선언한다고 이게 딱딱 맞추어 지는 건 아닌게, 아래가 page.tsx 인데 잘보면 Postlist 컴포넌트는 그냥 다른 div 컴포넌트와 형제 관계이므로 이 형제 관계인 요소들도 전부 CSR이 되고, 이런식으로 CSR이 타고올라가다보면 전체 범위가 CSR이 되는 것이다…!\n따라서 비동기로 생성되는 부분만 따로 선렌더링을 할 JSX 컴포넌트를 주고 후에 CSR로 렌더링되게 만들 게 해주는 것이 Suspense 인 것이다.\nimport Postlist from \u0026#34;./Postlist\u0026#34;; import styles from \u0026#34;./page.module.css\u0026#34;; import { Article, getArticleList } from \u0026#34;@/ts/article\u0026#34;; export default function Page() { const articles = getArticleList(); return \u0026lt;div className={styles.mainWrap}\u0026gt; \u0026lt;div className={styles.title}\u0026gt;Posts\u0026lt;/div\u0026gt; \u0026lt;div className={styles.description}\u0026gt;다양한 주제로 글을 씁니다.\u0026lt;/div\u0026gt; \u0026lt;div className={styles.hr} /\u0026gt; \u0026lt;Postlist articleList={articles} /\u0026gt; \u0026lt;/div\u0026gt; } 위 코드를 아래와 같이 바꿔주었다.\nimport Postlist from \u0026#34;./Postlist\u0026#34;; import { Suspense } from \u0026#34;react\u0026#34;; import styles from \u0026#34;./page.module.css\u0026#34;; import { getArticleList } from \u0026#34;@/ts/article\u0026#34;; function PostlistFallback() { return \u0026lt;\u0026gt; loading... \u0026lt;/\u0026gt; } export default function Page() { return \u0026lt;div className={styles.mainWrap}\u0026gt; \u0026lt;div className={styles.title}\u0026gt;Posts\u0026lt;/div\u0026gt; \u0026lt;div className={styles.description}\u0026gt;다양한 주제로 글을 씁니다.\u0026lt;/div\u0026gt; \u0026lt;div className={styles.hr} /\u0026gt; \u0026lt;Suspense fallback={\u0026lt;PostlistFallback /\u0026gt;}\u0026gt; \u0026lt;Postlist articleList={getArticleList()} /\u0026gt; \u0026lt;/Suspense\u0026gt; \u0026lt;/div\u0026gt; } 이렇게 바꾸고나니 놀랍게도 에러가 뜨지 않고 정상적으로 정적페이지가 렌더링 되었다! 더욱 내 블로그가 최적화 되었다고 생각하니 기쁘지 않을수가 없다.\n아래는 Suspense 기능에 관한 더 자세한 AI 검색 결과이다.\n안녕하세요, 이것은 Bing입니다. 😊\nReact.js에서 Suspense는 비동기 작업을 관리하는 기능입니다. Suspense를 사용하면 컴포넌트가 데이터를 기다리고 있는 것을 React에게 알릴 수 있고, 대신에 fallback 컴포넌트를 보여줄 수 있습니다. 예를 들어, 다음과 같이 코드를 작성하면 UserList 컴포넌트가 로딩될 때까지 Spinner 컴포넌트를 보여줍니다.\n\u0026lt;Suspense fallback={\u0026lt;Spinner /\u0026gt;}\u0026gt; \u0026lt;UserList /\u0026gt; \u0026lt;/Suspense\u0026gt; Suspense는 React v16.6부터 실험적으로 도입되었고, React v18에서 정식으로 지원됩니다. Suspense를 사용하면 컴포넌트의 렌더링을 더 쉽고 세련되게 제어할 수 있습니다. Suspense에 대한 자세한 내용은 공식 문서나 이 블로그 포스트를 참고하세요.\n","permalink":"https://blog.moozeh.org/posts/2023/2023-12-25-darkmode-flickering/","summary":"\u003ch2 id=\"증상-원인\"\u003e증상 원인\u003c/h2\u003e\n\u003cp\u003e내 마크다운 블로그를 개발하던 중 이게 왠일?\u003c/p\u003e\n\u003cp\u003e블로그에 테마 토글 기능을 추가해서 다크모드를 사용할 때에도 라이트 모드를, 또는 그 반대를 활용할 수 있도록 만들었는데, 내가 시스템에서 설정한 테마 색이 시스템 설정을 따라 가다보니 시스템 테마가 먼저 적용이 되고, 그 다음에 토글 기능으로 설정된 테마가 나중에 적용된다.\u003c/p\u003e\n\u003cp\u003e일명 깜빡거리는 증상인데 어떻게 된일인지 생각해봤다.\u003c/p\u003e\n\u003ch2 id=\"html-blocking\"\u003eHTML Blocking\u003c/h2\u003e\n\u003cp\u003e보통 \u003ccode\u003eDOM\u003c/code\u003e 이 생성될 때,  중간에 script 태그를 만나게 되면 DOM 생성 과정이 중단됩니다.\u003c/p\u003e","title":"다크모드 테마 시 깜빡거리는 증상"},{"content":"문제 접근 오프라인 쿼리라는 개념을 알고 접근해보도록 합시다.\n오프라인 쿼리란 간략히 말해서, 쿼리의 전체 적용 결과 값만 알고 싶을 때 사용하는 전략으로, 쿼리의 순서를 모두 받은 뒤, 역순으로 처리할 때, 중복처리가 되지 않는 경우 그 점을 이용하는 전략입니다.\n이 점을 이용해서 문제를 풀 수 있습니다.\n솔루션 단, 위 개념을 알아도, 칠해져있는지 일일이 매 역순 쿼리마다 확인해나가다 보면 시간초과하기 마련입니다.\n따라서 space[1 to N] 라는 이름의 배열을 생성하여 현재 위치를 기록해도 되는지, 그게 아니라면 다음 위치는 어디가 되는지를 기록해두어야합니다.\n이를 구현한 방법은 분리집합에서의 find() 와 같습니다.\n일단 매 쿼리에서 주어진 l 과 r 구간에서, 우리가 칠했던 모든 지역의 space[] 값을 r + 1로 설정해둡시다.\n우리가 칠하는 지역의 space[i] 값이 i가 아닌 경우, 언급한 find() 함수를 통해 재귀적으로 호출하며 space[] 값을 갱신해나가면 최적화가 가능합니다.\n소스코드 #include\u0026lt;iostream\u0026gt; #include\u0026lt;vector\u0026gt; #include\u0026lt;utility\u0026gt; using namespace std; int space[1000001]; // 1 to 1m int fibo[1000001]; // fibo value int ind[1000001]; // answer which indicates index of fibo value. const int MOD = 1000000007; int find(int t) { if (space[t] == t) return t; return space[t] = find(space[t]); } int main() { cout.tie(0); cin.tie(0)-\u0026gt;sync_with_stdio(0); fibo[1] = space[1] = 1; fibo[2] = space[2] = 2; for (int i = 3; i \u0026lt;= 1000000; ++i) { fibo[i] = fibo[i - 1] + fibo[i - 2]; fibo[i] %= MOD; space[i] = i; } int n, q; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; q; vector\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt; query; space[n + 1] = n + 1; for (int i = 0; i \u0026lt; q; ++i) { int l, r; cin \u0026gt;\u0026gt; l \u0026gt;\u0026gt; r; query.push_back({l, r}); } for (int i = query.size() - 1; i \u0026gt;= 0; --i) { int l = query[i].first; int r = query[i].second; int next = space[l]; while (next \u0026lt;= n \u0026amp;\u0026amp; next \u0026lt;= r) { next = find(next); if (next \u0026gt; r) break; int idx = next - l + 1; ind[next] = idx; space[next] = r + 1; next++; } } for (int i = 1; i \u0026lt;= n; ++i) { cout \u0026lt;\u0026lt; fibo[ind[i]] \u0026lt;\u0026lt; \u0026#39; \u0026#39;; } } ","permalink":"https://blog.moozeh.org/posts/2023/2023-11-16-boj26087/","summary":"\u003ch2 id=\"문제-접근\"\u003e문제 접근\u003c/h2\u003e\n\u003cp\u003e오프라인 쿼리라는 개념을 알고 접근해보도록 합시다.\u003c/p\u003e\n\u003cp\u003e오프라인 쿼리란 간략히 말해서, 쿼리의 전체 적용 결과 값\u003cstrong\u003e만\u003c/strong\u003e 알고 싶을 때 사용하는 전략으로,\n쿼리의 순서를 모두 받은 뒤, 역순으로 처리할 때, 중복처리가 되지 않는 경우 그 점을 이용하는 전략입니다.\u003c/p\u003e\n\u003cp\u003e이 점을 이용해서 문제를 풀 수 있습니다.\u003c/p\u003e\n\u003ch2 id=\"솔루션\"\u003e솔루션\u003c/h2\u003e\n\u003cp\u003e단, 위 개념을 알아도, 칠해져있는지 일일이 매 역순 쿼리마다 확인해나가다 보면 시간초과하기 마련입니다.\u003c/p\u003e\n\u003cp\u003e따라서 \u003ccode\u003espace[1 to N]\u003c/code\u003e 라는 이름의 배열을 생성하여 현재 위치를 기록해도 되는지, 그게 아니라면 다음 위치는 어디가 되는지를 기록해두어야합니다.\u003c/p\u003e","title":"[ 백준 26087 ] 피보나치와 마지막 수열과 쿼리 : C++ 풀이"},{"content":"풀이 결국엔 어떻게 돌리느냐는 위 아래 눈이 무엇인지 가 중요 합니다.\n내말은 돌려도 변하지 않는 면이 있는데, 그 면들을 중심으로 번호가 어떻게 변하는지 4개의 수의 반복이 어케되는지를 매겨놓으면 문제해결이 가능합니다.\n처음 주사위 상태는\n5 (굴려도 변하지 않는 앞쪽면) 1 (윗면) 2 (굴려도 변하지 않는 뒤쪽면) 이렇게 되고, 주사위를 굴리다가 다음 행으로 옮기게 되면 주사위의 상태는 아래처럼 변할 것입니다.\n(마지막 윗면 상태 의 반대편) (이전 윗면) (마지막 윗면 상태) 또 그 다음은\n(마지막 윗면 상태의 반대편) N (마지막 윗면상태) 이런식으로 반복됨을 알 수 있습니다.\n그렇다면, 1 4 6 3과 같은 옆면의 수열을 어떻게 구할 수 있느냐가 이제 관건인데, 사실 주사위기 때문에 경우의 수가 그렇게 많지 않습니다.\n저의 경우는 아예 계산을 해서 프리셋을 먼저 생성해놓고 풀었는데요, 아래와 같이 반복되는 수열이 정의됩니다.\n! 오른쪽으로 굴리는 기준 !\n(5, 2) 일 경우 {1, 4, 6, 3} (2, 5) 일 경우 {1, 3, 6, 4} (1, 6) 일 경우 {3, 2, 4, 5} (6, 1) 일 경우 {3, 5, 4, 2} (3, 4) 일 경우 {1, 5, 6, 2} (4, 3) 일 경우 {1, 2, 6, 5} 구상한 알고리즘 행이 홀수일 경우 (a, b) 값을 얻는다. (이때 a와 b는 수열에 관여하지 않는 위에서 봤을때 기준 주사위의 앞, 뒷면 이다.)\n이전 판의 a 값을 가져온다. 이 값이 현재 상태의 윗면이다.\n열의 크기를 4로 나눈 몫과 14(전체 수열의 투어 결과)를 곱한 값을 결과에 더한다.\n열의 크기를 4로 나눈 나머지값만큼 더 굴린다. while(remain--) {} 굴리는 원리는 첫 윗면의 idx 값을 가져와서, idx = (idx + 1) % 4; 와 같은 방식으로 더해나가면 된다.\n행일 짝수일 경우 수열을 얻는 과정은 똑같이 진행하나, idx = (idx - 1 \u0026gt;= 0 ? idx - 1 : 3) % 4; 과 같이 전개하면 된다. 소스코드 #include\u0026lt;iostream\u0026gt; #include\u0026lt;vector\u0026gt; using namespace std; vector\u0026lt;int\u0026gt; preset[7][7]; int main() { int front = 5, back = 2; int up = 1; preset[5][2] = { 1, 4, 6, 3 }; preset[2][5] = { 1, 3, 6, 4 }; preset[1][6] = { 3, 2, 4, 5 }; preset[6][1] = { 3, 5, 4, 2 }; preset[3][4] = { 1, 5, 6, 2 }; preset[4][3] = { 1, 2, 6, 5 }; int n, m; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m; long long ans = 0; for (int i = 1; i \u0026lt;= n; ++i) { ans += (m / 4) * 14; int remain = m % 4; int idx = -1; for (int i = 0; i \u0026lt; 4; ++i) { if (preset[front][back][i] == up) { idx = i; } } while (remain--) { int next_value = preset[front][back][idx]; ans += next_value; if (remain) { if(i%2) idx = (idx + 1) % 4; else idx = (idx - 1 \u0026gt;= 0 ? idx - 1 : 3) % 4; } } int tmp = front; back = preset[front][back][idx]; up = tmp; front = 7 - back; } cout \u0026lt;\u0026lt; ans; } ","permalink":"https://blog.moozeh.org/posts/2023/2023-11-16-boj2818/","summary":"\u003ch2 id=\"풀이\"\u003e풀이\u003c/h2\u003e\n\u003cp\u003e결국엔 어떻게 돌리느냐는 위 아래 눈이 무엇인지 가 중요 합니다.\u003c/p\u003e\n\u003cp\u003e내말은 돌려도 변하지 않는 면이 있는데, 그 면들을 중심으로 번호가 어떻게 변하는지 4개의 수의 반복이 어케되는지를 매겨놓으면 문제해결이 가능합니다.\u003c/p\u003e\n\u003cp\u003e처음 주사위 상태는\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e5 (굴려도 변하지 않는 앞쪽면)\n\n1 (윗면)\n\n2 (굴려도 변하지 않는 뒤쪽면)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e이렇게 되고, 주사위를 굴리다가 다음 행으로 옮기게 되면 주사위의 상태는 아래처럼 변할 것입니다.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e(마지막 윗면 상태 의 반대편)\n\n(이전 윗면)\n\n(마지막 윗면 상태)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e또 그 다음은\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e(마지막 윗면 상태의 반대편)\n\nN\n\n(마지막 윗면상태)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e이런식으로 반복됨을 알 수 있습니다.\u003c/p\u003e","title":"[ 백준 2818 ] 숙제하기 싫을 때 : C++ 풀이"},{"content":"text-underline의 상세한 조절이 가능합니다.\nunderline의 굵기 설정 text-decoration-thickness: 0; underline의 위치 조절 text-underline-offset: 5px; 참고할 수 있도록 게시함.\n","permalink":"https://blog.moozeh.org/posts/2023/2023-11-15-text-underline/","summary":"\u003cp\u003etext-underline의 상세한 조절이 가능합니다.\u003c/p\u003e\n\u003ch2 id=\"underline의-굵기-설정\"\u003eunderline의 굵기 설정\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003etext-decoration-thickness\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nt\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"underline의-위치-조절\"\u003eunderline의 위치 조절\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003etext-underline-offset\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nt\"\u003e5px\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e참고할 수 있도록 게시함.\u003c/p\u003e","title":"[ CSS ] text underline 의 높이 조절, 굵기 설정하기"},{"content":"내가 생각한 솔루션 1. 분리집합 문제를 보자마자 일단 아! 분리집합 문제구나 라고 생각은 했음.\n각 영역의 분리집합을 구한 후, 분리집합의 개수 별로 nC2의 값을 표현하기 가 구현내용이 아닐지.. 하고.\n예를들면, 문제 예시의 트리와, K = 6, S_k = { 1,2,3,4,5,6 } 인 경우\n{ 1, 2, 3, 5 } 와 {4, 6}으로 두 영역이 나뉘므로,\n4C2 + 2C2 = 6 + 1 = 7 가 정답인 것이다.\n각 영역별로 수행한다고 치면 최악의 경우 O(N) 만큼 걸릴 것임.\n이렇게 단순하게 생각하면 사실 풀 수 있지만, 애로사항이 있다.\n위의 시간 복잡도는 정확하지 않다. 쿼리가 있기 때문이다.\n2. DFS 그래서 DFS로 해볼까? 하고 생각해봤다.\nS_K 마다 탐색을 한다.\n자식노드가 없는 경우는 스킵한다.\n이미 방문한 점도 스킵한다.\n방문 수 : O(N) 이기 때문에 이 방법도 사실상 최적화엔 실패다.\n해설을 통한 솔루션 위 방식대로하면 결국 각 노드에서 모든 간선 을 둘러보게 되는 단점이 있고, 이는 O(N) 만큼 소모되게 만드는 단점이 있다.\n쿼리가 하나면 상관없지만 쿼리가 10만개나 되니, 결국 전체 쿼리에 등장하는 K의 개수가 최대 백만인 점을 이용해 O(쿼리중 나오는 전체 K 집합의 원소 수)로 단순화시켜야한다.\nN의 크기에 영향을 받지 않고 순수하게 K만 살펴보기 위해서는 트리의 구조를 이용해야한다.\n트리가 가지는 성질은 자신 노드가 루트가 아니라면, 부모노드는 오로지 하나라는 점이다. 이렇게 되면 순전히 K개의 노드와, 그의 부모노드만 확인하면 되게 되므로, O(N + 쿼리중 나오는 전체 K집합의 원소 수)가 되게 된다.\n각 K의 부모노드를 확인해가면서, 분리집합으로 어떤 트리에 어떻게 속하는지 기록을 하며 루트노드가 될 노드에게 노드의 개수를 전달해주면 해결이다.\n트리의 특성을 활용하는 문제였다. 많이 나에겐 어려운 것 같으니 골드 하위 트리문제를 좀 더 풀어봐야할 것 같다.\n소스코드 s[] 배열을 memset() 을 통해 초기화 하지 않고, 쓰고 난 후 다시 false 값으로 되돌려 주면 AC 시간을 많이 단축 시킬 수 있습니다.\n#include\u0026lt;iostream\u0026gt; #include\u0026lt;vector\u0026gt; using namespace std; vector\u0026lt;int\u0026gt; tree[250001]; bool visit[250001]; int parent[250001]; // 분리집합 int cnt[250001]; // 각 지점을 루트로 하는 트리의 노드 개수 입니다. bool s[250001]; int tree_parent[250001]; void process(int node) { // dfs로 전처리 하는 과정 visit[node] = true; for (int i : tree[node]) { if (!visit[i]) { process(i); tree_parent[i] = node; } } } int find(int t) { if (parent[t] == t) return t; return parent[t] = find(parent[t]); } void uni(int a, int b) { if (a \u0026gt; b) { int swp; swp = a; a = b; b = swp; } parent[b] = a; cnt[a] += cnt[b]; cnt[b] = -1; } int main() { cin.tie(0); cout.tie(0)-\u0026gt;sync_with_stdio(0); int n, q; cin \u0026gt;\u0026gt; n; for (int i = 0; i \u0026lt; n - 1; ++i) { int a, b; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; tree[a].push_back(b); tree[b].push_back(a); } process(1); // 최소 노드의 개수는 1일테니 1을 루트로 정의한다. cin \u0026gt;\u0026gt; q; while (q--) { int k; cin \u0026gt;\u0026gt; k; vector\u0026lt;int\u0026gt; arr; for (int i = 0; i \u0026lt; k; ++i) { int t; cin \u0026gt;\u0026gt; t; parent[t] = t; cnt[t] = 1; s[t] = true; arr.push_back(t); } long long ans = 0; for (int t : arr) { if (s[tree_parent[t]]) { uni(find(t), find(tree_parent[t])); } } for (int t : arr) { s[t] = false; // 쓰고 바로 마킹을 지우면 memset을 할 필요가 없어짐. if (cnt[t] \u0026gt; 1) { ans += (long long)cnt[t] * (cnt[t] - 1) / 2; } } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } } ","permalink":"https://blog.moozeh.org/posts/2023/2023-11-12-query-tree/","summary":"\u003ch2 id=\"내가-생각한-솔루션\"\u003e내가 생각한 솔루션\u003c/h2\u003e\n\u003ch3 id=\"1-분리집합\"\u003e1. 분리집합\u003c/h3\u003e\n\u003cp\u003e문제를 보자마자 일단 아! 분리집합 문제구나 라고 생각은 했음.\u003c/p\u003e\n\u003cp\u003e각 영역의 분리집합을 구한 후, 분리집합의 개수 별로 nC2의 값을 표현하기 가 구현내용이 아닐지.. 하고.\u003c/p\u003e\n\u003cp\u003e예를들면, 문제 예시의 트리와, \u003ccode\u003eK = 6, S_k = { 1,2,3,4,5,6 }\u003c/code\u003e 인 경우\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e{ 1, 2, 3, 5 }\u003c/code\u003e 와 \u003ccode\u003e{4, 6}\u003c/code\u003e으로 두 영역이 나뉘므로,\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e4C2 + 2C2 = 6 + 1 = 7\u003c/code\u003e 가 정답인 것이다.\u003c/p\u003e\n\u003cp\u003e각 영역별로 수행한다고 치면 최악의 경우 O(N) 만큼 걸릴 것임.\u003c/p\u003e","title":"[ 백준 25402 ] 트리와 쿼리 : C++ 풀이"},{"content":"주의사항 본 문서는 Bing AI로 작성되었으며, 작성자 참고용으로 제작된 문서입니다. 향후 저작권 이슈가 있을 경우 바로 내릴 수 있도록 하겠습니다.\n본문 TypeScript에서 as 키워드는 타입 단언(type assertion)을 사용하기 위한 것입니다. 타입 단언은 컴파일러에게 변수나 속성의 타입을 우리가 지정해주는 것이며, 컴파일러가 스스로 추론하는 것을 방지합니다. 타입 단언은 any 타입을 특정 타입으로 다루는 데 자주 사용됩니다. 예를 들어, 다음과 같은 코드가 있습니다.\nlet x: any = \u0026#34;Hello\u0026#34;; let y = x as string; 여기서 x는 any 타입이므로, 컴파일러는 x가 가지고 있는 메서드나 속성에 대해 알 수 없습니다. 그래서 x.length나 x.toUpperCase()와 같은 코드는 오류를 발생시킬 수 있습니다. 하지만 y는 x를 string 타입으로 단언한 것이므로, 컴파일러는 y가 string 타입이라고 인식하고, string 타입의 메서드나 속성을 사용할 수 있습니다.\n타입 단언은 변환(conversion)이 아닙니다. 즉, as 키워드로 변수의 값을 바꾸거나 새로운 값을 만들지 않습니다. 단지 컴파일러에게 변수의 타입을 알려주는 것뿐입니다. 런타임에는 as 키워드가 아무런 영향을 주지 않습니다¹.\n타입 단언은 다음과 같은 두 가지 방식으로 사용할 수 있습니다.\n// 꺽쇠 괄호(\u0026lt;\u0026gt;)를 사용하는 방식 let a = \u0026lt;string\u0026gt; x; // as 키워드를 사용하는 방식 let b = x as string; 두 방식은 동일한 기능을 하지만, JSX와 함께 사용할 때는 as 키워드를 사용해야 합니다². JSX는 XML과 비슷한 문법으로, React와 같은 프레임워크에서 UI 컴포넌트를 만들 때 사용합니다³.\n타입에러 방지 타입 에러를 방지하기 위해서는 as 키워드를 사용하는 것이 좋지 않은 방법이라고 할 수 있습니다. as 키워드는 컴파일러에게 타입을 강제로 지정하는 것이므로, 실제로 값이 다른 타입일 경우 런타임에 에러가 발생할 수 있습니다. 예를 들어, 다음과 같은 코드가 있습니다.\nlet x: any = 123; let y = x as string; console.log(y.length); // 런타임 에러 여기서 x는 any 타입이므로, y에 string 타입으로 단언하였습니다. 하지만 x의 값은 실제로 숫자이므로, y.length를 실행하면 런타임에 에러가 발생합니다. 이런 경우를 방지하기 위해서는 as 키워드를 사용하지 않고, 타입 가드(type guard)라는 기능을 사용하는 것이 좋습니다¹. 타입 가드는 특정 조건문을 통해 변수의 타입을 좁혀주는 것입니다. 예를 들어, 다음과 같은 코드가 있습니다.\nlet x: any = 123; // string이 타입이 아닌 문자열임에 주의하세요. (코멘트 직접 작성) if (typeof x === \u0026#34;string\u0026#34;) { console.log(x.length); // 안전하게 실행 } 여기서 typeof x === \u0026quot;string\u0026quot;이라는 조건문은 x가 string 타입일 때만 참이 되므로, 컴파일러는 이 조건문 안에서 x의 타입을 string으로 인식합니다. 따라서 x.length를 안전하게 실행할 수 있습니다.\n","permalink":"https://blog.moozeh.org/posts/2023/2023-11-03-typescript-interface/","summary":"\u003ch2 id=\"주의사항\"\u003e주의사항\u003c/h2\u003e\n\u003cp\u003e본 문서는 Bing AI로 작성되었으며, 작성자 참고용으로 제작된 문서입니다. 향후 저작권 이슈가 있을 경우 바로 내릴 수 있도록 하겠습니다.\u003c/p\u003e\n\u003ch2 id=\"본문\"\u003e본문\u003c/h2\u003e\n\u003cp\u003eTypeScript에서 as 키워드는 타입 단언(type assertion)을 사용하기 위한 것입니다. 타입 단언은 컴파일러에게 변수나 속성의 타입을 우리가 지정해주는 것이며, 컴파일러가 스스로 추론하는 것을 방지합니다. 타입 단언은 any 타입을 특정 타입으로 다루는 데 자주 사용됩니다. 예를 들어, 다음과 같은 코드가 있습니다.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-typescript\" data-lang=\"typescript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ex\u003c/span\u003e: \u003cspan class=\"kt\"\u003eany\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ex\u003c/span\u003e \u003cspan class=\"kr\"\u003eas\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e여기서 \u003ccode\u003ex\u003c/code\u003e는 any 타입이므로, 컴파일러는 \u003ccode\u003ex\u003c/code\u003e가 가지고 있는 메서드나 속성에 대해 알 수 없습니다. 그래서 \u003ccode\u003ex.length\u003c/code\u003e나 \u003ccode\u003ex.toUpperCase()\u003c/code\u003e와 같은 코드는 오류를 발생시킬 수 있습니다. 하지만 \u003ccode\u003ey\u003c/code\u003e는 \u003ccode\u003ex\u003c/code\u003e를 string 타입으로 단언한 것이므로, 컴파일러는 \u003ccode\u003ey\u003c/code\u003e가 string 타입이라고 인식하고, string 타입의 메서드나 속성을 사용할 수 있습니다.\u003c/p\u003e","title":"[ TS ] 타입스크립트에서 타이핑 하기 귀찮은데요 (Typescript as 키워드)"},{"content":"드로우 온 웹 프로젝트를 현재 vite + react + typescript로 진행중입니다.\n하다가 문제점이 생긴게, 캔버스 토글을 animation을 주면서 껐다켰다하는 기능을 만드는 중이넫 여기서 문제가 생기더라고요\neventlistener 를 삭제하려면 해당 함수가 무결해야 하고, 함수가 특정 변수에 정의되어 있어 지정할 수 있어야합니다..\n그런데, 제가 마우스 이벤트를 사용하던 함수들은 모두 리액트 훅으로 반환되는 ref 객체를 사용하고 있었습니다\u0026hellip;\n이렇게 되면 해당 함수들을 모두 toggleCanvas 내에 정의를 해야하는데, 그렇게되면 함수가 너무 길어져서 코드의 가독성이 작살나버리더라고요.\nfunction toggleCanvas(params:toggleCanvasParams) { const {ctx, status} = params; const prevX = useRef\u0026lt;number\u0026gt;(0); const prevY = useRef\u0026lt;number\u0026gt;(0); const contextMenuTimer = useRef\u0026lt;number\u0026gt;(0); const pressed = useRef\u0026lt;boolean\u0026gt;(false); if (status) { ctx.canvas.classList.add(\u0026#34;hide-canvas\u0026#34;); // first click events window.addEventListener(\u0026#34;mousedown\u0026#34;, (e) =\u0026gt; { if (e.button != 2) return; pressed.current = true; prevX.current = e.pageX; prevY.current = e.pageY; }); // mouse release events window.addEventListener(\u0026#34;mouseup\u0026#34;, (e) =\u0026gt; { if (e.button != 2) return; pressed.current = false; }); // drawing events. window.addEventListener(\u0026#34;mousemove\u0026#34;, (e) =\u0026gt; { if (!pressed.current) return; if (!ctx) return; contextMenuTimer.current++; doBrush(ctx, prevX, prevY, e); }); // about context menu popup window.addEventListener(\u0026#34;contextmenu\u0026#34;, (e) =\u0026gt; { if (contextMenuTimer.current \u0026gt;= 10) e.preventDefault(); contextMenuTimer.current = 0; }); } else { ctx.canvas.classList.add(\u0026#34;hide-canvas\u0026#34;); // 여기선 어떻게 해야하지?! } } 내가 해결한 방법 위와 같은 방법으로 해도 removeEventListener는 동작하지 않습니다.\nremoveEventListener를 사용하기 위해선 함수가 한번만 정의되어야합니다.\n따라서,\n중첩함수 (함수가 호출될때마다 정의됨) 익명함수 (함수가 메모리에 매번 새롭게 assign됨) 는 사용할 수 없습니다.\n클로저를 이용하여 전역에 접근할 EventContext 클래스를 정의하고, 함수들 또한 전역 스코프에 선언해주어 유일한 객체로 만들어야합니다.\n아래는 예시입니다.\n// 이벤트 객체에 클로저로 직접 주입한 객체. 근데 이게 맞는지 모르겠다. class EventContext { static params: toggleCanvasParams; static setParam(params:toggleCanvasParams): void { EventContext.params = params; } } function doBrush(params: doBrushParams) { ... } function handleMouseDown(e: MouseEvent) { const {pressed, prevX, prevY} = EventContext.params; if (e.button != 2) return; pressed.current = true; prevX.current = e.pageX; prevY.current = e.pageY; } function handleMouseUp(e: MouseEvent) { const {pressed} = EventContext.params; if (e.button != 2) return; pressed.current = false; } function handleMouseMove(e :MouseEvent) { const {pressed, contextMenuTimer, ctx, prevX, prevY} = EventContext.params; if (!pressed.current) return; contextMenuTimer.current++; doBrush({ctx, prevX, prevY, event:e}); } function handleRightClick(e: MouseEvent) { const {contextMenuTimer} = EventContext.params; if (contextMenuTimer.current \u0026gt;= 10) e.preventDefault(); contextMenuTimer.current = 0; } export function toggleCanvas(params:toggleCanvasParams) { EventContext.setParam(params); const {ctx, status} = params; if (status) { ctx.canvas.classList.remove(\u0026#34;hide-canvas\u0026#34;); window.addEventListener(\u0026#34;mousedown\u0026#34;, handleMouseDown); window.addEventListener(\u0026#34;mouseup\u0026#34;, handleMouseUp); window.addEventListener(\u0026#34;mousemove\u0026#34;, handleMouseMove); window.addEventListener(\u0026#34;contextmenu\u0026#34;, handleRightClick); } else { ctx.canvas.classList.add(\u0026#34;hide-canvas\u0026#34;); window.removeEventListener(\u0026#34;mousedown\u0026#34;, handleMouseDown); window.removeEventListener(\u0026#34;mouseup\u0026#34;, handleMouseUp); window.removeEventListener(\u0026#34;mousemove\u0026#34;, handleMouseMove); window.removeEventListener(\u0026#34;contextmenu\u0026#34;, handleRightClick); } } 여기서 더 나아가서 핸들러들을 EventContext의 메소드로 선언해도 가능한지 한번 연구중에 있습니당\n","permalink":"https://blog.moozeh.org/posts/2023/2023-10-31-remove-event/","summary":"\u003cp\u003e드로우 온 웹 프로젝트를 현재 \u003ccode\u003evite + react + typescript\u003c/code\u003e로 진행중입니다.\u003c/p\u003e\n\u003cp\u003e하다가 문제점이 생긴게, 캔버스 토글을 \u003ccode\u003eanimation\u003c/code\u003e을 주면서 껐다켰다하는 기능을 만드는 중이넫 여기서 문제가 생기더라고요\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eeventlistener\u003c/code\u003e 를 삭제하려면 해당 함수가 무결해야 하고, 함수가 특정 변수에 정의되어 있어 지정할 수 있어야합니다..\u003c/p\u003e\n\u003cp\u003e그런데, 제가 마우스 이벤트를 사용하던 함수들은 모두 리액트 훅으로 반환되는 \u003ccode\u003eref\u003c/code\u003e 객체를 사용하고 있었습니다\u0026hellip;\u003c/p\u003e\n\u003cp\u003e이렇게 되면 해당 함수들을 모두 \u003ccode\u003etoggleCanvas\u003c/code\u003e 내에 정의를 해야하는데, 그렇게되면 함수가 너무 길어져서 코드의 가독성이 작살나버리더라고요.\u003c/p\u003e","title":"[ React ] 이벤트 탈착할 때 주의 사항"},{"content":"나의 접근 이분탐색도 생각해보고, 뒤에서부터 진행도 생각해봤는데 도저히 감이 잡히질 않아서 주제를 봤더니 스택문제였습니다\u0026hellip;\n스택의 특징을 아직 잘 몰라서 실수를 했는데, 스택이 사용될 수 있는 상황은 다음과 같습니다.\n현재 문제 상황이 선형적이지만, 여태까지 내가 \u0026ldquo;탐색\u0026quot;했던 정보들을 바탕으로 판단해야할 때,\n혹은 탐색했지만 정답을 찾지못한 정보들을 모아두었다가 나중에 일괄적으로 문제를 해결할 수 있을 때,\n그 외 느낌상으로 모아두었다가 해결할 수 있을 것 같을 때\n한번 쯤 생각해보면 좋을 것 같습니다. 스택..실제로 활용 문제를 실전풀이로 할 때 상당히 어려운 것 같습니다.\n알고리즘 현재 수를 보고 다음 수를 본다, 다음 수가 더 크다면, 기본적으로 현재 수의 NGE는 다음 수이다.\n만약 다음 수가 더 작다면, 현재수를 push 하고 다음 수를 본다.\n1의 과정 중, 다음 수가 현재수보다 크다면, 현재 수의 NGE는 다음 수 이다, 또한 스택이 비지 않았을 때, top이 현재 시점의 다음 수보다 작을 경우, 해당 수의 NGE도 현재 시점의 다음 수이다.\n소스코드 #include\u0026lt;iostream\u0026gt; #include\u0026lt;stack\u0026gt; #include\u0026lt;vector\u0026gt; using namespace std; int main() { cout.tie(0); cin.tie(0)-\u0026gt;sync_with_stdio(0); int n; cin \u0026gt;\u0026gt; n; vector\u0026lt;int\u0026gt; arr(n); vector\u0026lt;int\u0026gt; ans(n, -1); stack\u0026lt;int\u0026gt; st; for (int i = 0; i \u0026lt; n; ++i) { cin \u0026gt;\u0026gt; arr[i]; } for (int i = 0; i \u0026lt; n - 1; ++i) { if (arr[i + 1] \u0026gt; arr[i]) { ans[i] = arr[i + 1]; while (!st.empty() \u0026amp;\u0026amp; arr[st.top()] \u0026lt; arr[i + 1]) { ans[st.top()] = arr[i + 1]; st.pop(); } } else if (arr[i + 1] \u0026lt;= arr[i]) { st.push(i); } } for (int t : ans) { cout \u0026lt;\u0026lt; t \u0026lt;\u0026lt; \u0026#39; \u0026#39;; } } ","permalink":"https://blog.moozeh.org/posts/2023/2023-10-25-boj17298/","summary":"\u003ch2 id=\"나의-접근\"\u003e나의 접근\u003c/h2\u003e\n\u003cp\u003e이분탐색도 생각해보고, 뒤에서부터 진행도 생각해봤는데\n도저히 감이 잡히질 않아서 주제를 봤더니 스택문제였습니다\u0026hellip;\u003c/p\u003e\n\u003cp\u003e스택의 특징을 아직 잘 몰라서 실수를 했는데, 스택이 사용될 수 있는 상황은 다음과 같습니다.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e현재 문제 상황이 선형적이지만, 여태까지 내가 \u0026ldquo;탐색\u0026quot;했던 정보들을 바탕으로 판단해야할 때,\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e혹은 탐색했지만 정답을 찾지못한 정보들을 모아두었다가 나중에 일괄적으로 문제를 해결할 수 있을 때,\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e그 외 느낌상으로 모아두었다가 해결할 수 있을 것 같을 때\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e한번 쯤 생각해보면 좋을 것 같습니다. 스택..실제로 활용 문제를 실전풀이로 할 때 상당히 어려운 것 같습니다.\u003c/p\u003e","title":"[ 백준 17298 ] 오큰수 : C++ 풀이"},{"content":"소스 코드 #include\u0026lt;iostream\u0026gt; using namespace std; int n, k, l; string input; int u[10001][10001]; int dp[10001]; // 유사 펠린드롬의 여부 = 1 이상이면 해당, 또 1 이상인 값이 여러개 일 경우 가장 적은 값 입니다. int getU(int s, int e) { if (s \u0026gt;= e) return 0; if (u[s][e]) return u[s][e]; if (input[s] != input[e]) return 0; return u[s][e] = 1 + getU(s + 1, e - 1); } bool is_theta(int s, int e) { if (s == e) return false; int len = e - s + 1; int v_len = getU(s, e); if (k*len \u0026lt;= 2 * v_len * l) return true; return false; } int main() { cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; k \u0026gt;\u0026gt; l \u0026gt;\u0026gt; input; for (int i = 0; i \u0026lt; n; ++i) { dp[i] = -1; if (is_theta(0, i)) dp[i] = 1; for (int j = 1; j \u0026lt; i; ++j) { // 끝점이 i인 경우를 모두 검색하다보면 dp 값을 한번만 방문할 수 있을 것이다. // 1 ~ j / j + 1 ~ i 이렇게 두개로 나눔. // 더 작은 segment로 나뉠 수 있는 것 아닌가? -\u0026gt; 그 경우는 이미 dp[a][b] : b가 i보다 작은 경우에서 모두 구했음. if (is_theta(j, i) \u0026amp;\u0026amp; dp[j - 1] \u0026gt; 0) { if (dp[i] \u0026gt; 1 + dp[j - 1] || dp[i] == -1) { dp[i] = dp[j - 1] + 1; } } } } cout \u0026lt;\u0026lt; ((dp[n - 1] == -1) ? 0 : dp[n - 1]); } ","permalink":"https://blog.moozeh.org/posts/2023/2023-10-24-boj13330/","summary":"\u003ch3 id=\"소스-코드\"\u003e소스 코드\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e10001\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e10001\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e10001\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 유사 펠린드롬의 여부 = 1 이상이면 해당, 또 1 이상인 값이 여러개 일 경우 가장 적은 값 입니다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003egetU\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003egetU\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003eis_theta\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ev_len\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetU\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ev_len\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ecin\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eis_theta\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"c1\"\u003e// 끝점이 i인 경우를 모두 검색하다보면 dp 값을 한번만 방문할 수 있을 것이다.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\t\t\u003cspan class=\"c1\"\u003e// 1 ~ j / j + 1 ~ i 이렇게 두개로 나눔.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\t\t\u003cspan class=\"c1\"\u003e// 더 작은 segment로 나뉠 수 있는 것 아닌가? -\u0026gt; 그 경우는 이미 dp[a][b] : b가 i보다 작은 경우에서 모두 구했음.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eis_theta\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\t\u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[ 백준 13330 ] 유사 팰린드롬 : C++ 풀이"},{"content":"접근 처음 접근은 이랬습니다. 사실 제일 처음에 어려웠던 부분은 d-정상이 무엇인지 이해를 하는 것이였습니다.\nd만큼의 높이차가 존재하는 정상들은 모두 정상이다라고 생각을 해서 땅에서부터 그냥 bfs하면 되는것 아닌가 싶은데, 잘못된 방법이였습니다.\n땅에서부터 d 만큼의 높이차가 존재하는 지역이 정상이라고 생각할 수 없는 이유는, 해당하는 높은 지역 사이에 그 지역보다 더 높은 지역이 있을지도 모르기 때문입니다.\n예를들어, 해당 지점이 땅이 아닌 지점이면서 (h-d)보다 더 낮은 지점이 방문 가능한 봉우리 h가 있다고 하면 어떻게 될까요?\n그림으로 설명해보겠습니다.\n- 제일 높은 위치 (0) --- ==\u0026gt; 여긴 d 정상임 (1) | -\u0026gt; d보다 작음 ------ ===========\u0026gt; 여긴 d 정상이 아님. (2) | -\u0026gt; d보다 큼. ---- 땅 - 1 2 4 2 5 0 3 4 가장 높은 지점에서만 bfs하면 (1)이 d-정상임을 판별할 수 없고,\n땅에서부터 bfs하면 (2)가 d-정상이 아님을 판별할 수 없습니다.\n따라서 저희는 모든 점을 찾아볼 수 밖에 없습니다.\n다만, 그중에서 가장 높은 \u0026ldquo;정상\u0026quot;부터 BFS해야합니다. d-정상의 정의에 따르면 높이가 어떻든, 가장 높은 점은 자신보다 더 높은 점이 존재하지 않기 때문에 주어진 맵에서 가장 높은 높이를 부여받은 지점은 무조건 d-정상에 해당됩니다.\n일단 가장 높은 지점에서부터 높이차가 d보다 작은 지점들을 bfs 하면서 visit 을 했다는 표식을 남깁시다.\n이 표식이 그 다음으로 가장 높은 지점에서 높이차가 d보다 작은 지점들을 bfs를 하다가 사전에 방문했던 지점들을 만난다면, 그것은 d-정상의 정의에 위배됩니다. 따라서 해당 bfs시작점을 비롯한 bfs 중 만났던 해당 bfs 시점 중 가장 높은 지점들 전부 d-정상에 위배됩니다.\n현재 bfs 중 방문햇던 지점과, 이전에 이미 방문했었던 지점을 구별하기 위해 visit 값은 bool이 아닌 int 값을 사용했습니다.\n구현 가장 높은 지역을 BFS 한다.\n닿지 않는 지역 중 그다음으로 가장 높은 지역을 BFS 한다. // 각 세그 먼트 중 자신보다 높은 지역이 닿이는 세그먼트는 d 정상이 아니다.\nqueue를 sorting 할거면.. priority queue를 사용.\nPQ를 사용한 뒤, 일단 visit 배열을 정상값으로 칠합니다. 이게 무슨 소리냐면, 3 이 정상이라 하면, 최소 (3 - d)인 지점을 모두 bfs 해가며 해당 부분의 visit 값은 가장 높은 정상의 값으로 정한다는 뜻입니다.\n만약 해당 bfs segment 도중에 자신보다 높은 지점을 나타내는 , 해당 bfs 서브프로세스에서 얻는 d-정상의 개수는 무조건 0으로 합니다. 단, 추후 bfs 할 프로세스에서 가장 높은 h는 현재의 h보다 작기 때문에 bfs 세그먼트를 계속해야합니다.\n도중에 자신과 같은 높이의 지점을 만났다면 bfs segment 에서 더할 d-정상의 개수를 1 늘립니다.\n도중에 라벨된 지점을 만났다면 해당 segment에서 얻는 d-정상의 개수는 0입니다. 왜냐하면 지점이 높은순으로 라벨링을 했기 때문입니다.\n내가 계속 틀렸던 이유 board를 클리어하지 않아서 계속 틀렸었다. 이때 vector를 써야하는 이유를 알았습니다.\nvector 가 갖는 또 다른 이점은 로컬 변수로 선언함으로써 반복문 내에서도 부담없이 memset할 필요가 없었고, 무엇보다 스택 영역을 차지하지 않음으로써 스택오버플로우도 면할 수 있었습니다. 여러모로 상당히 고마운 존재입니다.\nboard[n+2][m+2] 와 같은 형식으로 구현하고자 하는 경우 이럴땐 board[][]의 경계선을 확실히 해주도록합시다. 문제에선 0이 가장 낮은 땅이므로 경계선과 땅을 구별할 수 없습니다.\n따라서 입력된 board[][] 값을 모두 1씩 올려줌으로써 해결했습니다.\n소스코드 #include\u0026lt;iostream\u0026gt; #include\u0026lt;queue\u0026gt; #include\u0026lt;cstring\u0026gt; using namespace std; typedef pair\u0026lt;int, int\u0026gt; pii; int board[502][502]; int visit[502][502] = { 0, }; int dir[4][2] = { {0, 1}, {0, -1}, {1, 0}, {-1, 0} }; int n, m, d, total; priority_queue\u0026lt;pair\u0026lt;int, pii\u0026gt;\u0026gt; pq; queue\u0026lt;pii\u0026gt; bfs_q; int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); int t; cin \u0026gt;\u0026gt; t; while (t--) { total = 0; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m \u0026gt;\u0026gt; d; for (int i = 0; i \u0026lt;= n + 1; ++i) { memset(visit[i], 0, sizeof(visit[i])); memset(board[i], 0, sizeof(board[i])); } for (int i = 1; i \u0026lt;= n; ++i) { for (int j = 1; j \u0026lt;= m; ++j) { cin \u0026gt;\u0026gt; board[i][j]; board[i][j]++; if (board[i][j]) { pq.push({ board[i][j], {i, j} }); } } } int visit_seg = 0; while (!pq.empty()) { int d_summit = 1; visit_seg++; int h = pq.top().first; int st_x = pq.top().second.second; int st_y = pq.top().second.first; pq.pop(); if (visit[st_y][st_x]) continue; visit[st_y][st_x] = visit_seg; bfs_q.push({ st_y, st_x }); while (!bfs_q.empty()) { int y = bfs_q.front().first; int x = bfs_q.front().second; bfs_q.pop(); for (int i = 0; i \u0026lt; 4; ++i) { int dy = y + dir[i][0]; int dx = x + dir[i][1]; if (!board[dy][dx]) continue; if (visit[dy][dx] \u0026amp;\u0026amp; visit[dy][dx] \u0026lt; visit_seg) { d_summit = 0; continue; } if (visit[dy][dx] == visit_seg) continue; if (board[dy][dx] == h) { if (d_summit) d_summit++; } if (!visit[dy][dx] \u0026amp;\u0026amp; board[dy][dx] \u0026gt; h - d) { visit[dy][dx] = visit_seg; bfs_q.push({ dy, dx }); } } } total += d_summit; } cout \u0026lt;\u0026lt; total \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } } ","permalink":"https://blog.moozeh.org/posts/2023/2023-10-23-boj3697/","summary":"\u003ch2 id=\"접근\"\u003e접근\u003c/h2\u003e\n\u003cp\u003e처음 접근은 이랬습니다. 사실 제일 처음에 어려웠던 부분은 d-정상이 무엇인지 이해를 하는 것이였습니다.\u003c/p\u003e\n\u003cp\u003ed만큼의 높이차가 존재하는 정상들은 모두 정상이다라고 생각을 해서 땅에서부터 그냥 bfs하면 되는것 아닌가 싶은데,\n잘못된 방법이였습니다.\u003c/p\u003e\n\u003cp\u003e땅에서부터 d 만큼의 높이차가 존재하는 지역이 정상이라고 생각할 수 없는 이유는, 해당하는 높은 지역 사이에 그 지역보다 더 높은 지역이 있을지도 모르기 때문입니다.\u003c/p\u003e\n\u003cp\u003e예를들어, 해당 지점이 땅이 아닌 지점이면서 (h-d)보다 더 낮은 지점이 방문 가능한 봉우리 h가 있다고 하면 어떻게 될까요?\u003c/p\u003e","title":"[ 백준 3697 ] 정상 : C++ 풀이"},{"content":"next_permutation() 이란? 알고리즘을 하다보면 저희가 모든 경우의 수를 뽑아서 봐야할 때가 있습니다. 물론 이런 경우는 사실 대부분 재귀함수를 사용하다보면 해결이 되는 경우가 많습니다.\n하지만 재귀를 통한 경우의 수 추출의 경우, 모든 경우의 수의 처리를 위해서는 해당 함수 호출스택 내에서 외부 변수에 모두 모아놓거나, 각각의 경우의 수가 완성된 경우의 함수 스택 상태 위에서 작업을 실행해야 모든 경우의 수에 대한 대응이 가능합니다.\n간단한 처리의 경우는 상관 없지만, 스택 오버플로우 와 같은 오류를 내고 싶지 않은 상황이거나 재귀 함수를 사용 하는 것에 대해 약간 민감한 상황이라면, next_permutation 을 사용하는 것이 좋다고 생각합니다.\nnext_permutation() 함수는 algorithm 내 헤더에 있으며, 보통은 함수의 인자로 iterator 의 처음 부분과 끝 부분을 넣습니다.\n이때 iterator 의 개념에 대해 간단히 이야기하자면, 그냥 배열의 요소를 가르킨다고 보시면 됩니다. C++을 알고리즘 문제풀이로 사용하는 입장에서는 일반적인 배열과 vector 의 처음과 끝 포인터가 들어간다고 생각하면 됩니다.\n해당 함수가 호출되면, 함수의 인자로 들어간 배열 객체의 다음 순열의 순서로 변경해줍니다. 이때 정의된 배열의 순열의 순서는 오름차순이 기준입니다.\n예를 들어, 0 0 1 의 순열을 오름차순으로 나열하였을 때, 해당 배열의 다음 순열은 0 1 0 일 겁니다. 그 다음은 1 0 0 일 것입니다.\n따라서 보통 일반적으로 next_permutation()을 호출하기 전에 오름차순에 따라 정렬을 해두고 사용 해야 모든 순열의 경우의 수를 확인할 수 있습니다.\n조합을 뽑는 방법 next_permutation 에서는 값이 같은 배열의 요소를 동일한 원소로 취급합니다. 이 점을 이용하여 조합을 만들 수도 있습니다.\n이게 무슨 뜻이냐면, 0(1번째 원소) 0(2번째 원소) 1 이라는 내용의 배열이 있다면, 0 두개가 동일원소로 취급되지 않는 중복 순열 이라면 다음 순열은 0(2번째 원소) 0(1번째 원소) 1 이 다음 순열이여야합니다. 하지만 next_permuation 에서는 중복을 허용하지 않는 순열을 반환하기 때문에 중복 원소에 대한 순열은 스킵이 됩니다.\n이를 통해 조합을 구성하는 방법은 간단합니다. 뽑는가, 뽑지 않는가 여부만 판단하는 것이 조합이므로, 뽑는 수만큼 1, 뽑지 않는 수만큼 0으로 구성된 0-1 배열을 구성하여 next_permutation 함수를 호출 하면, 모든 조합의 경우의 수를 알 수 있습니다.\n응용 해당 문제는 응용입니다. 문제를 풀고 밑부분을 참고하세요.\n[ 백준 18809 ] Gaaaaarden : C++ 풀이 활용 설명 위에서 조합을 응용하는 방법은 그렇습니다.\n조합을 두번 뽑지 않고, 중복순열이 아닌 점을 활용하는 겁니다.\n땅이 5개, 그중에 빨간 배양액 2곳과 초록 배양액 2곳을 사용한다고 하는 예제 입력이 있다고 합시다. 그런 경우에 0 1 1 2 2 와 같은 배열의 순열을 순회하면 배양액을 뿌리는 모든 경우의 수를 저희는 확인할 수가 있을 것입니다.\n위와 같은 방식으로 문제를 활용할 수도 있을 것입니다.\n코드 짜는 법 이제부터는 실제 코드 사용법에 대해 알아보겠습니다.\n익숙치 않는 문법을 사용할 건데요. do - while 문을 사용할 것입니다. 그것에는 이유가 있습니다. sort 를 통해 순열을 확인할 배열을 정렬했다면, 일단 맨 첫번째 순열은 이미 정렬된 해당 배열이기 때문에 해당 구문을 이용해 일단 확인해도 모든 경우의 수를 확인할 수 있기 때문입니다.\nwhile문의 조건 문에서 next_permutation()을 호출하면 현재 해당 배열이 마지막 순열( = 현재 배열이 내림차순인지)인지 아닌지에 따라 return 값이 달라집니다.\n마지막 순열이라면 false를 출력하기 때문에 순열을 순회하기도 쉽습니다.\n배열 구성하기 sort 하기 do - while 구문으로 순회하기 #include\u0026lt;iostream\u0026gt; #include\u0026lt;algorithm\u0026gt; using namespace std; int main() { int arr[5]; for (int i = 0; i \u0026lt; 5; ++i) { arr[i] = i + 1; } sort(arr, arr + 5); do { for (auto i : arr) { cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#39; \u0026#39;; } cout \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } while (next_permutation(arr, arr + 5)); } ","permalink":"https://blog.moozeh.org/posts/2023/2023-10-21-next-permutation/","summary":"\u003ch2 id=\"next_permutation-이란\"\u003e\u003ccode\u003enext_permutation()\u003c/code\u003e 이란?\u003c/h2\u003e\n\u003cp\u003e알고리즘을 하다보면 저희가 모든 경우의 수를 뽑아서 봐야할 때가 있습니다. 물론\n이런 경우는 사실 대부분 재귀함수를 사용하다보면 해결이 되는 경우가 많습니다.\u003c/p\u003e\n\u003cp\u003e하지만 재귀를 통한 경우의 수 추출의 경우, 모든 경우의 수의 처리를 위해서는 해당 함수 호출스택 내에서 외부 변수에 모두 모아놓거나, 각각의 경우의 수가 완성된 경우의 함수 스택 상태 위에서 작업을 실행해야 모든 경우의 수에 대한 대응이 가능합니다.\u003c/p\u003e\n\u003cp\u003e간단한 처리의 경우는 상관 없지만, \u003ccode\u003e스택 오버플로우\u003c/code\u003e 와 같은 오류를 내고 싶지 않은 상황이거나 재귀 함수를 사용 하는 것에 대해 약간 민감한 상황이라면, \u003ccode\u003enext_permutation\u003c/code\u003e 을 사용하는 것이 좋다고 생각합니다.\u003c/p\u003e","title":"[ C++ ] 조합, 순열 을 next_permutation() 으로 순회하기"},{"content":"소스코드 #include\u0026lt;iostream\u0026gt; #include\u0026lt;algorithm\u0026gt; #include\u0026lt;cstring\u0026gt; #include\u0026lt;queue\u0026gt; using namespace std; int n, m; int r, g; int board[52][52]; // 맵 vector\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; able_list; // 배양액 뿌릴 수 있는 땅 정보 int dir[4][2] = { {0, 1}, {1, 0}, {0, -1}, {-1, 0} }; int flowers; // 꽃의 개수 void bfs(vector\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt;\u0026amp; gv, vector\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt;\u0026amp; rv) { int visit[52][52] = { 0, }; // 빨간색 -t 값. 초록색 t 값으로 시간을 표현. 1초부터 시작. 0이면 닿지않은 경우임. int f = 0; // 현재 꽃 queue\u0026lt;pair\u0026lt;int, pair\u0026lt;int, int\u0026gt;\u0026gt;\u0026gt; q; // bfs q for (auto t : gv) { visit[t.first][t.second] = -1; q.push({ -1, t }); } for (auto t : rv) { visit[t.first][t.second] = 1; q.push({ 1, t }); } while (!q.empty()) { int time = q.front().first; pair\u0026lt;int, int\u0026gt; node = q.front().second; q.pop(); int y = node.first; int x = node.second; if (visit[y][x] == 9999) continue; // 꽃은 퍼지지 않음. visit[y][x] = time; if (time \u0026gt; 0) time++; else time--; for (int i = 0; i \u0026lt; 4; ++i) { int dy = y + dir[i][0]; int dx = x + dir[i][1]; if (visit[dy][dx] + time == 0) { visit[dy][dx] = 9999; f++; continue; } if (board[dy][dx] \u0026amp;\u0026amp; visit[dy][dx] == 0) { q.push({ time, {dy, dx} }); visit[dy][dx] = time; } } } flowers = flowers \u0026lt; f ? f : flowers; } int main() { ios::sync_with_stdio(0); cin.tie(0); cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m \u0026gt;\u0026gt; r \u0026gt;\u0026gt; g; for (int i = 1; i \u0026lt;= n; ++i) { for (int j = 1; j \u0026lt;= m; ++j) { cin \u0026gt;\u0026gt; board[i][j]; if (board[i][j] == 2) { able_list.push_back({ i, j }); } } } vector\u0026lt;int\u0026gt; p; for (int i = 0; i \u0026lt; able_list.size() - r - g; ++i) p.push_back(0); for (int i = 0; i \u0026lt; r; ++i) p.push_back(1); for (int i = 0; i \u0026lt; g; ++i) p.push_back(2); do { vector\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; r_list; vector\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; g_list; for (int i = 0; i \u0026lt; p.size(); ++i) { if (p[i] == 1) r_list.push_back(able_list[i]); if (p[i] == 2) g_list.push_back(able_list[i]); } bfs(g_list, r_list); } while (next_permutation(p.begin(), p.end())); cout \u0026lt;\u0026lt; flowers; } ","permalink":"https://blog.moozeh.org/posts/2023/2023-10-20-boj18809/","summary":"\u003ch3 id=\"소스코드\"\u003e소스코드\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u0026lt;algorithm\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u0026lt;cstring\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u0026lt;queue\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eboard\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e52\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e52\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 맵\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eable_list\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 배양액 뿌릴 수 있는 땅 정보\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003edir\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eflowers\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 꽃의 개수\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ebfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003egv\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003erv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e52\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e52\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 빨간색 -t 값. 초록색 t 값으로 시간을 표현. 1초부터 시작. 0이면 닿지않은 경우임.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 현재 꽃\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// bfs q\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"nl\"\u003et\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003egv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"nl\"\u003et\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003erv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eempty\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efront\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efront\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e9999\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 꽃은 퍼지지 않음.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etime\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003edy\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edir\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003edx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edir\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003edy\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003edx\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003edy\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003edx\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e9999\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eboard\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003edy\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003edx\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003edy\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003edx\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003edy\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edx\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003edy\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003edx\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003eflowers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eflowers\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nl\"\u003ef\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eflowers\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003eios\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esync_with_stdio\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ecin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ecin\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"n\"\u003ecin\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eboard\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eboard\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"n\"\u003eable_list\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush_back\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eable_list\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush_back\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush_back\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush_back\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003er_list\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eg_list\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003er_list\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush_back\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eable_list\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eg_list\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush_back\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eable_list\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003ebfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eg_list\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er_list\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enext_permutation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e()));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eflowers\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[ 백준 18809 ] Gaaaaarden : C++ 풀이"},{"content":"풀이 풀이는 제 이전 블로그에서 확인 가능합니다.\n소스코드 : LIS 3 #include\u0026lt;iostream\u0026gt; using namespace std; int n, len; int arr[1000000]; int lis[1000000]; int main() { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); cin \u0026gt;\u0026gt; n; for (int i = 0; i \u0026lt; n; ++i) cin \u0026gt;\u0026gt; arr[i]; len = 1; lis[0] = arr[0]; for (int i = 1; i \u0026lt; n; ++i) { int l = 0; int h = len; int upper_bound = h; while (l \u0026lt;= h) { int mid = (l + h) / 2; if (lis[mid] \u0026lt; arr[i]) { l = mid + 1; } else if (lis[mid] \u0026gt;= arr[i]) { upper_bound = mid; h = mid - 1; } } lis[upper_bound] = arr[i]; if (len == upper_bound) { len += 1; } } cout \u0026lt;\u0026lt; len; } 주의점 upper bound를 확실히 구할 것! 해당 값을 제대로 구했는지 확인할 요소\nwhile(lo \u0026lt; hi) 가 아니라 while(lo \u0026lt;= hi) 인지 7 4 5 6 1 2 3 4 정답 : 4 ","permalink":"https://blog.moozeh.org/posts/2023/2023-10-14-lis/","summary":"\u003ch2 id=\"풀이\"\u003e풀이\u003c/h2\u003e\n\u003cp\u003e풀이는 제 이전 블로그에서 확인 가능합니다.\u003c/p\u003e\n\u003ch2 id=\"소스코드--lis-3\"\u003e\u003ca href=\"https://boj.kr/12783\"\u003e소스코드 : LIS 3\u003c/a\u003e\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1000000\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003elis\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1000000\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003eios_base\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esync_with_stdio\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003ecin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ecin\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ecin\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003elen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003elis\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eh\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eupper_bound\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elis\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elis\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"n\"\u003eupper_bound\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"n\"\u003eh\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003elis\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eupper_bound\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eupper_bound\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"n\"\u003elen\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"주의점\"\u003e주의점\u003c/h2\u003e\n\u003ch3 id=\"upper-bound를-확실히-구할-것\"\u003e\u003ccode\u003eupper bound\u003c/code\u003e를 확실히 구할 것!\u003c/h3\u003e\n\u003cp\u003e해당 값을 제대로 구했는지 확인할 요소\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003ewhile(lo \u0026lt; hi)\u003c/code\u003e 가 아니라 \u003ccode\u003ewhile(lo \u0026lt;= hi)\u003c/code\u003e 인지\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e7\n4 5 6 1 2 3 4\n\n정답 : 4\n\u003c/code\u003e\u003c/pre\u003e","title":"LIS 알고리즘 개념"},{"content":"설명 일단 이 문제를 풀기 위해선 페르마의 소정리와 모듈러 역원을 구하는 연산을 할줄 알아야한다.\n소스코드 #include\u0026lt;iostream\u0026gt; using namespace std; int n, r; int fact[4000001]; const long long MOD = 1000000007; long long getFact(long long n) { if (n == 0) return 1; if (fact[n]) return fact[n]; return fact[n] = n * (long long)getFact(n - 1) % MOD; } long long power(long long base, int exp) { if (!exp) return 1; long long i = 1; while (exp) { if (exp % 2) { i *= base; i %= MOD; exp--; continue; } base *= base; base %= MOD; exp /= 2; } return i; } int main() { cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; r; long long numer = getFact(n); long long deno = getFact(r) * getFact(n - r) % MOD; deno = power(deno, MOD - 2); numer = numer * deno % MOD; cout \u0026lt;\u0026lt; numer; } ","permalink":"https://blog.moozeh.org/posts/2023/2023-10-12-boj11401/","summary":"\u003ch2 id=\"설명\"\u003e설명\u003c/h2\u003e\n\u003cp\u003e일단 이 문제를 풀기 위해선 \u003ccode\u003e페르마의 소정리\u003c/code\u003e와 \u003ccode\u003e모듈러 역원\u003c/code\u003e을 구하는 연산을 할줄 알아야한다.\u003c/p\u003e\n\u003ch3 id=\"소스코드\"\u003e소스코드\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003efact\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4000001\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003eMOD\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1000000007\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"nf\"\u003egetFact\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efact\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003efact\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003efact\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003egetFact\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003eMOD\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"nf\"\u003epower\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexp\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e*=\u003c/span\u003e \u003cspan class=\"n\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e%=\u003c/span\u003e \u003cspan class=\"n\"\u003eMOD\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003ebase\u003c/span\u003e \u003cspan class=\"o\"\u003e*=\u003c/span\u003e \u003cspan class=\"n\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003ebase\u003c/span\u003e \u003cspan class=\"o\"\u003e%=\u003c/span\u003e \u003cspan class=\"n\"\u003eMOD\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003eexp\u003c/span\u003e \u003cspan class=\"o\"\u003e/=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ecin\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003enumer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetFact\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003edeno\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetFact\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003egetFact\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003eMOD\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003edeno\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epower\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edeno\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eMOD\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003enumer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumer\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edeno\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003eMOD\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003enumer\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[ 백준 11401 ] 이항 계수 3 : C++ 풀이"},{"content":".nojekyll 설정하기 이거 때문에 하루를 날려먹었다.\ngh-pages 를 통해 호스팅하는 모든 페이지들은 jekyll 블로그 설정에 따라 호스팅 되는 경우가 많아, 깃허브에서 자체적으로 _next 와 같은 디렉토리를 차단시켜버리는 경향이 있습니다.\n이를 막기위해서 gh-pages에 deploy할 branch의 루트폴더에 .nojekyll 이라는 이름의 파일을 두어 깃허브가 해당 정적페이지는 제킬이 아님을 알려주어야 인식이 정상적으로 된다.\n","permalink":"https://blog.moozeh.org/posts/2023/2023-10-12-nojekyll/","summary":"\u003ch1 id=\"nojekyll-설정하기\"\u003e\u003ccode\u003e.nojekyll\u003c/code\u003e 설정하기\u003c/h1\u003e\n\u003cp\u003e이거 때문에 하루를 날려먹었다.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003egh-pages\u003c/code\u003e 를 통해 호스팅하는 모든 페이지들은 \u003ccode\u003ejekyll\u003c/code\u003e 블로그 설정에 따라 호스팅 되는 경우가 많아, 깃허브에서\n자체적으로 \u003ccode\u003e_next\u003c/code\u003e 와 같은 디렉토리를 차단시켜버리는 경향이 있습니다.\u003c/p\u003e\n\u003cp\u003e이를 막기위해서 gh-pages에 deploy할 branch의 루트폴더에 \u003ccode\u003e.nojekyll\u003c/code\u003e 이라는 이름의 파일을 두어 깃허브가\n해당 정적페이지는 제킬이 아님을 알려주어야 인식이 정상적으로 된다.\u003c/p\u003e","title":"깃허브 페이지에서 _next/ 폴더에 접근할 수 없는 경우"},{"content":"이미지 가져오기 이미지를 가져오는 건 리액트처럼 그냥 해당 프로젝트 내에서도 가져올 수 있는데 문제는 asset들은 모두 public 폴더 를 root로 하기 때문에 해당 폴더 내에만 배치를 해야한다.\n본 문서들도 모두 public 에 배치된 이유가 그렇기 때문이다.\n동적 라우팅 동적 라우팅은 app router 에서는 이전 레거시 버전처럼 폴더 이름의 양 끝을 대괄호로 감싼 다음, 그 안의 page.ts 에서 params 라는 속성을 받게 만든다면 알아서 서버 컴포넌트에서 params 에 폴더 이름에 대응하는 값을 params 에 해당 폴더 이름으로 속성으로 넣어준다.\n페이지의 타이틀 변경 타이틀 부분은 중요하다.\n같은 솔루션 페이지를 여러군데를 띄워놓앗을 때 어떤 탭의 페이지가 어떤 내용을 함축하고있는지 나타내주어야하는데 가장 간단한 방법이 타이틀을 바꾸는 방법이다.\n해결방법 : \u0026lt;Head\u0026gt; 기능을 사용하면 된다. 일단 아래처럼 가져온다.\nimport Head from \u0026#39;next/head\u0026#39; 그런데 알고보니 이게 app router 에서는 이렇게 사용하지 않는다고 한다.\nAsset not found: image.png\n해결방법은 아래와 같이 Metadata 값을 재정의 해주는 것만으로 새롭게 바뀌는 가보다. 작동방식이 상당히 특이하다. 아마 해당 Functional Component의 default export 값만 보는게 아닌 것 같다.\nAsset not found: image-1.png\nTypescript on React : 자식 설정 This JSX tag's 'children' prop expects a single child of type 'ReactElement\u0026lt;any, string | JSXElementConstructor\u0026lt;any\u0026gt;\u0026gt;', but multiple children were provided.\n위와 관련된 에러 해결이다.\n아래와 같이 설정하자.\nchildren: JSX.Element|JSX.Element[]; Typescript 에서 React Children 설정 방법 총 3가지가 있음.\nReact.ReactNode JSX.Element React.ReactElement 이렇게 3가지가 있는데, React.ReactNode를 사용하면 string, number를 비롯한 JSX 노드들을 중복/단일 상관없이 받기 때문에, React.ReactNode 를 사용하면 됩니다.\n","permalink":"https://blog.moozeh.org/posts/2023/2023-10-11-next-js-blog/","summary":"\u003ch2 id=\"이미지-가져오기\"\u003e이미지 가져오기\u003c/h2\u003e\n\u003cp\u003e이미지를 가져오는 건 리액트처럼 그냥 해당  프로젝트 내에서도 가져올 수 있는데 문제는 asset들은 모두 \u003ccode\u003epublic\u003c/code\u003e 폴더 를 root로 하기 때문에 해당 폴더 내에만 배치를 해야한다.\u003c/p\u003e\n\u003cp\u003e본 문서들도 모두 public 에 배치된 이유가 그렇기 때문이다.\u003c/p\u003e\n\u003ch2 id=\"동적-라우팅\"\u003e동적 라우팅\u003c/h2\u003e\n\u003cp\u003e동적 라우팅은 app router 에서는 이전 레거시 버전처럼 폴더 이름의 양 끝을 대괄호로 감싼 다음, 그 안의 \u003ccode\u003epage.ts\u003c/code\u003e 에서 \u003ccode\u003eparams\u003c/code\u003e 라는 속성을 받게 만든다면 알아서 서버 컴포넌트에서 params 에 폴더 이름에 대응하는 값을 params 에 해당 폴더 이름으로 속성으로 넣어준다.\u003c/p\u003e","title":"[Next.js] 블로그 만들 때 생긴 에러 해결방안들 임시 메모"},{"content":"분리집합의 구현에 관해서는 union-find 방식을 사용하여 구현할 수 있는데, 그 중 UNION 하는 과정에서 주의할 필요가 있다.\n문제를 풀다가 이번에도 같은 방식으로 틀려서 기록하게 되었다.\nparent[t1] = p2; 위와 같이 바꾸게 되면, t1의 부모까지 부모값이 p2로 갱신되지 않고 짤리므로 위와 같이 구현하면 안된다.\n따라서 아래와 같이 그냥 부모노드의 부모값을 바꿔주어야한다.\nint t1 = edges[i - 1].first, t2 = edges[i - 1].second; int p1 = getParent(t1); int p2 = getParent(t2); if (p1 == p2) { // if point, memo it and break. point = i; break; } if (p1 \u0026lt; p2) { parent[p2] = p1; } else { parent[p1] = p2; } ","permalink":"https://blog.moozeh.org/posts/2023/2023-10-11-disjoint-set/","summary":"\u003cp\u003e분리집합의 구현에 관해서는 \u003ccode\u003eunion-find\u003c/code\u003e 방식을 사용하여 구현할 수 있는데, 그 중 UNION 하는 과정에서 주의할 필요가 있다.\u003c/p\u003e\n\u003cp\u003e문제를 풀다가 이번에도 같은 방식으로 틀려서 기록하게 되었다.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003et1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e위와 같이 바꾸게 되면, t1의 부모까지 부모값이 p2로 갱신되지 않고 짤리므로 위와 같이 구현하면 안된다.\u003c/p\u003e\n\u003cp\u003e따라서 아래와 같이 그냥 부모노드의 부모값을 바꿔주어야한다.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003et1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eedges\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003et2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eedges\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ep1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetParent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ep2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetParent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ep2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// if point, memo it and break.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003epoint\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ep2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ep2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ep1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"분리 집합 구현 시 주의 점"}]